<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="fr" lang="fr">
<head>
<meta charset="UTF-8"/>
<title>Commandes Git</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Commandes Git" epub:type="chapter" id="C-git-commands">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Commandes</b> <b>Git</b></small></h1>
</div>
</header>
<p>Tout au long du livre, nous avons introduit des dizaines de commandes Git et avons essayé le plus possible de les introduire de manière narrative, en ajoutant progressivement des commandes dans l&#8217;histoire.
Cependant, cela nous laisse avec des exemples d&#8217;utilisation des commandes quelque peu dispersés tout au long du livre.</p>
<p>Dans cette annexe, nous allons revoir toutes les commandes Git qui se trouvent dans le livre, regroupées à peu près par leur usage.
Nous allons parler de ce que chaque commande fait très généralement et nous indiquerons où vous pouvez les retrouver dans le livre.</p>
<section class="sect1" title="Installation et configuration">
<h2 id="_installation_et_configuration">Installation et configuration</h2>
<p>Il y a deux commandes qui sont les plus utilisées, depuis les premières invocations de Git jusqu&#8217;à la mise au point et à la gestion quotidienne des branches, ce sont les commandes <code class="literal">config</code> et <code class="literal">help</code>.</p>
<section class="sect2" title="git config">
<h3 id="_git_config">git config</h3>
<p>Git a une façon par défaut de faire des centaines de choses.
Pour beaucoup de ces choses, vous pouvez demander à Git de les faire par défaut d&#8217;une autre manière ou de définir vos préférences.
Cela implique tout depuis dire à Git quel est votre nom jusqu&#8217;aux préférences spécifiques des couleurs du terminal ou de l&#8217;éditeur que vous utilisez.
Il y a plusieurs fichiers que cette commande lira et dans lesquels elle écrira de façon à définir des valeurs globales ou spécifiques à des dépôts.</p>
<p>La commande <code class="literal">git config</code> a été utilisée dans presque tous les chapitres du livre.</p>
<p>Dans <a id="xref--ch01-introduction--s_first_time" href="ch01-introduction.xhtml#s_first_time" class="xref">Paramétrage à la première utilisation de Git</a>, nous l&#8217;avons utilisée pour indiquer notre nom, adresse de courrier électronique et la préférence d&#8217;éditeur avant même que nous commencions à utiliser Git.</p>
<p>Dans <a id="xref--ch02-git-basics--s_git_aliases" href="ch02-git-basics.xhtml#s_git_aliases" class="xref">Les alias Git</a>, nous avons montré comment vous pourriez l&#8217;utiliser pour créer des commandes raccourcies qui se développent en longues séquences d&#8217;options pour que vous n&#8217;ayez pas à les taper à chaque fois.</p>
<p>Dans <a id="xref--ch03-git-branching--s_rebasing" href="ch03-git-branching.xhtml#s_rebasing" class="xref">Rebaser (<em>Rebasing</em>)</a>, nous l&#8217;avons utilisée pour faire de <code class="literal">--rebase</code> le comportement par défaut quand vous lancez <code class="literal">git pull</code>.</p>
<p>Dans <a id="xref--ch07-git-tools--s_credential_caching" href="ch07-git-tools.xhtml#s_credential_caching" class="xref">Stockage des identifiants</a>, nous l&#8217;avons utilisée pour définir un stockage par défaut pour vos mots de passe HTTP.</p>
<p>Dans <a id="xref--ch08-customizing-git--s_keyword_expansion" href="ch08-customizing-git.xhtml#s_keyword_expansion" class="xref">Expansion des mots-clés</a>, nous avons montré comment définir des filtres « smudge » et « clean » sur le contenu entrant et sortant de Git.</p>
<p>Enfin, la totalité de <a id="xref--ch08-customizing-git--s_git_config" href="ch08-customizing-git.xhtml#s_git_config" class="xref">Configuration de Git</a> est dédiée à cette commande.</p>
</section>
<section class="sect2" title="git help">
<h3 id="_git_help">git help</h3>
<p>La commande <code class="literal">git help</code> est utilisée pour vous montrer toute la documentation livrée avec Git à propos de n&#8217;importe quelle commande.
Bien que nous donnions un panorama général des plus populaires d&#8217;entre elles dans cette annexe, pour une liste complète de toutes les options possibles pour chaque commande, vous pouvez toujours lancer <code class="literal">git help &lt;commande&gt;</code>.</p>
<p>Nous avons introduit la commande <code class="literal">git help</code> dans <a id="xref--ch01-introduction--s_git_help" href="ch01-introduction.xhtml#s_git_help" class="xref">Obtenir de l&#8217;aide</a> et vous avons montré comment l&#8217;utiliser pour trouver plus d&#8217;informations sur le <code class="literal">git shell</code> dans <a id="xref--ch04-git-server--s_setting_up_server" href="ch04-git-server.xhtml#s_setting_up_server" class="xref">Mise en place du serveur</a>.</p>
</section>
</section>
<section class="sect1" title="Obtention et création des projets">
<h2 id="_obtention_et_création_des_projets">Obtention et création des projets</h2>
<p>Il y a deux façons de récupérer un dépôt Git.
L&#8217;une consiste à le copier d&#8217;un dépôt existant sur le réseau ou ailleurs et l&#8217;autre est d&#8217;en créer un nouveau dans un dossier existant.</p>
<section class="sect2" title="git init">
<h3 id="_git_init">git init</h3>
<p>Pour transformer un dossier en un nouveau dépôt Git afin que vous puissiez commencer sa gestion de version, vous pouvez simplement lancer <code class="literal">git init</code>.</p>
<p>Nous l&#8217;avons d&#8217;abord présentée dans <a id="xref--ch02-git-basics--s_getting_a_repo" href="ch02-git-basics.xhtml#s_getting_a_repo" class="xref">Démarrer un dépôt Git</a>, où nous avons montré la création d&#8217;un tout nouveau dépôt pour commencer à l&#8217;utiliser.</p>
<p>Nous parlons brièvement de la façon dont vous pourriez changer la branche par défaut depuis « master » dans <a id="xref--ch03-git-branching--s_remote_branches" href="ch03-git-branching.xhtml#s_remote_branches" class="xref">Branches distantes</a>.</p>
<p>Nous utilisons cette commande pour créer un dépôt vierge pour un serveur dans <a id="xref--ch04-git-server--s_bare_repo" href="ch04-git-server.xhtml#s_bare_repo" class="xref">Copie du dépôt nu sur un serveur</a>.</p>
<p>Enfin, nous rentrons dans quelques détails de ce qu&#8217;il fait effectivement en coulisses dans <a id="xref--ch10-git-internals--s_plumbing_porcelain" href="ch10-git-internals.xhtml#s_plumbing_porcelain" class="xref">Plomberie et porcelaine</a>.</p>
</section>
<section class="sect2" title="git clone">
<h3 id="_git_clone">git clone</h3>
<p>La commande <code class="literal">git clone</code> sert en fait à englober plusieurs autres commandes.
Elle crée un nouveau dossier, va à l&#8217;intérieur de celui-ci et lance <code class="literal">git init</code> pour en faire un dépôt Git vide, ajoute un serveur distant (<code class="literal">git remote add</code>) à l&#8217;URL que vous lui avez passée (appelé par défaut <code class="literal">origin</code>), lance <code class="literal">git fetch</code> à partir de ce dépôt distant et ensuite extrait le dernier <em>commit</em> dans votre répertoire de travail avec <code class="literal">git checkout</code>.</p>
<p>La commande <code class="literal">git clone</code> est utilisée dans des dizaines d&#8217;endroits du livre, mais nous allons seulement lister quelques endroits intéressants.</p>
<p>C&#8217;est présenté et expliqué en gros dans <a id="xref--ch02-git-basics--s_git_cloning" href="ch02-git-basics.xhtml#s_git_cloning" class="xref">Cloner un dépôt existant</a>, où vous trouverez quelques exemples.</p>
<p>Dans <a id="xref--ch04-git-server--s_git_on_the_server" href="ch04-git-server.xhtml#s_git_on_the_server" class="xref">Installation de Git sur un serveur</a>, nous montrons l&#8217;utilisation de l&#8217;option <code class="literal">--bare</code> pour créer une copie d&#8217;un dépôt Git sans répertoire de travail.</p>
<p>Dans <a id="xref--ch07-git-tools--s_bundling" href="ch07-git-tools.xhtml#s_bundling" class="xref">Empaquetage (<em>bundling</em>)</a>, nous l&#8217;utilisons pour dépaqueter un dépôt Git empaqueté.</p>
<p>Enfin, dans <a id="xref--ch07-git-tools--s_cloning_submodules" href="ch07-git-tools.xhtml#s_cloning_submodules" class="xref">Cloner un projet avec des sous-modules</a>, nous apprenons l&#8217;option <code class="literal">--recursive-submodule</code> pour rendre le clonage d&#8217;un dépôt avec sous-modules un peu plus simple.</p>
<p>Bien qu&#8217;elle soit utilisée dans beaucoup d&#8217;autres endroits du livre, ceux-là sont ceux qui sont en quelque sorte uniques ou qui sont utilisés de manière un peu différente.</p>
</section>
</section>
<section class="sect1" title="Capture d&#8217;instantané basique">
<h2 id="_capture_d_instantané_basique">Capture d&#8217;instantané basique</h2>
<p>Pour le flux de travail basique d&#8217;indexation du contenu et de sa validation dans votre historique, il n&#8217;y a que quelques commandes basiques.</p>
<section class="sect2" title="git add">
<h3 id="_git_add">git add</h3>
<p>La commande <code class="literal">git add</code> ajoute le contenu du répertoire de travail dans la zone d&#8217;index pour le prochain <em>commit</em>.
Quand la commande <code class="literal">git commit</code> est lancée, par défaut elle ne regarde que cette zone d&#8217;index, donc <code class="literal">git add</code> est utilisée pour réaliser le prochain <em>commit</em> exactement comme vous le voulez.</p>
<p>Cette commande est une commande incroyablement importante dans Git et est mentionnée ou utilisée des dizaines de fois dans ce livre.
Nous allons revoir rapidement quelques utilisations uniques qui peuvent être trouvées.</p>
<p>Nous avons d&#8217;abord présenté et expliqué <code class="literal">git add</code> en détails dans <a id="xref--ch02-git-basics--s_tracking_files" href="ch02-git-basics.xhtml#s_tracking_files" class="xref">Placer de nouveaux fichiers sous suivi de version</a>.</p>
<p>Nous mentionnons comment s&#8217;en servir pour résoudre les conflits de fusion dans <a id="xref--ch03-git-branching--s_basic_merge_conflicts" href="ch03-git-branching.xhtml#s_basic_merge_conflicts" class="xref">Conflits de fusions (<em>Merge conflicts</em>)</a>.</p>
<p>Nous la passons en revue pour indexer interactivement seulement des parties spécifiques d&#8217;un fichier modifié dans <a id="xref--ch07-git-tools--s_interactive_staging" href="ch07-git-tools.xhtml#s_interactive_staging" class="xref">Indexation interactive</a>.</p>
<p>Enfin, nous l&#8217;émulons à bas niveau dans <a id="xref--ch10-git-internals--s_tree_objects" href="ch10-git-internals.xhtml#s_tree_objects" class="xref">Les objets arbres</a> pour que vous ayez une idée de ce qu&#8217;elle fait en coulisses.</p>
</section>
<section class="sect2" title="git status">
<h3 id="_git_status">git status</h3>
<p>La commande <code class="literal">git status</code> vous montrera les différents états des fichiers de votre répertoire de travail et de l&#8217;index.
Quels sont les fichiers modifiés et non indexés et lesquels sont indexés mais pas encore validés.
Dans sa forme normale, elle vous donnera aussi des conseils basiques sur comment passer les fichiers d&#8217;un état à l&#8217;autre.</p>
<p>Nous couvrons pour la première fois <code class="literal">status</code> dans <a id="xref--ch02-git-basics--s_checking_status" href="ch02-git-basics.xhtml#s_checking_status" class="xref">Vérifier l&#8217;état des fichiers</a>, à la fois dans sa forme basique et dans sa forme simplifiée.
Bien que nos l&#8217;utilisions tout au long du livre, pratiquement tout ce que vous pouvez faire avec la commande <code class="literal">git status</code> y est couvert.</p>
</section>
<section class="sect2" title="git diff">
<h3 id="_git_diff">git diff</h3>
<p>La commande <code class="literal">git diff</code> s&#8217;utilise lorsque vous voulez voir la différence entre deux arbres.
Cela peut être la différence entre votre répertoire de travail et votre index (<code class="literal">git diff</code> en elle-même), entre votre index et votre dernier <em>commit</em> (<code class="literal">git diff --staged</code>) ou entre deux <em>commits</em> (<code class="literal">git diff master brancheB</code>).</p>
<p>Nous regardons d&#8217;abord les utilisations basiques de <code class="literal">git diff</code> dans <a id="xref--ch02-git-basics--s_git_diff_staged" href="ch02-git-basics.xhtml#s_git_diff_staged" class="xref">Inspecter les modifications indexées et non indexées</a> où nous montrons comment voir quels changements sont indexés et lesquels ne le sont pas.</p>
<p>Nous l&#8217;utilisons pour chercher de possibles problèmes d&#8217;espaces blancs avant de valider avec l&#8217;option <code class="literal">--check</code> dans <a id="xref--ch05-distributed-git--s_commit_guidelines" href="ch05-distributed-git.xhtml#s_commit_guidelines" class="xref">Guides pour une validation</a>.</p>
<p>Nous voyons comment vérifier les différences entre branches plus efficacement avec la syntaxe <code class="literal">git diff A...B</code> dans <a id="xref--ch05-distributed-git--s_what_is_introduced" href="ch05-distributed-git.xhtml#s_what_is_introduced" class="xref">Déterminer les modifications introduites</a>.</p>
<p>Nous l&#8217;utilisons pour filtrer les différences d&#8217;espaces blancs avec <code class="literal">-w</code> et comment comparer différentes étapes de fichiers conflictuels avec <code class="literal">--theirs</code>, <code class="literal">--ours</code> et <code class="literal">--base</code> dans <a id="xref--ch07-git-tools--s_advanced_merging" href="ch07-git-tools.xhtml#s_advanced_merging" class="xref">Fusion avancée</a>.</p>
<p>Enfin, nous l&#8217;utilisons pour comparer efficacement les modifications de sous-modules avec <code class="literal">--submodule</code> dans <a id="xref--ch07-git-tools--s_starting_submodules" href="ch07-git-tools.xhtml#s_starting_submodules" class="xref">Démarrer un sous-module</a>.</p>
</section>
<section class="sect2" title="git difftool">
<h3 id="_git_difftool">git difftool</h3>
<p>La commande <code class="literal">git difftool</code> lance simplement un outil externe pour vous montrer la différence entre deux arbres dans le cas où vous voudriez utiliser quelque chose de différent de la commande <code class="literal">git diff</code> intégrée.</p>
<p>Nous ne mentionnons ceci que brièvement dans <a id="xref--ch02-git-basics--s_git_difftool" href="ch02-git-basics.xhtml#s_git_difftool" class="xref">Git Diff dans un outil externe</a>.</p>
</section>
<section class="sect2" title="git commit">
<h3 id="_git_commit">git commit</h3>
<p>La commande <code class="literal">git commit</code> prend tout le contenu des fichiers qui ont été indexés avec <code class="literal">git add</code> et enregistre un nouvel instantané permanent dans la base de données puis fait pointer la branche courante dessus.</p>
<p>Nous couvrons d&#8217;abord les bases de la validation dans <a id="xref--ch02-git-basics--s_committing_changes" href="ch02-git-basics.xhtml#s_committing_changes" class="xref">Valider vos modifications</a>.
Là nous montrons aussi comment utiliser l&#8217;option <code class="literal">-a</code> pour sauter l&#8217;étape <code class="literal">git add</code> dans le travail quotidien et comment utiliser l&#8217;option <code class="literal">-m</code> pour passer un message de validation en ligne de commande plutôt que d&#8217;ouvrir un éditeur.</p>
<p>Dans <a id="xref--ch02-git-basics--s_undoing" href="ch02-git-basics.xhtml#s_undoing" class="xref">Annuler des actions</a>, nous couvrons l&#8217;utilisation de l&#8217;option <code class="literal">--amend</code> pour refaire le <em>commit</em> le plus récent.</p>
<p>Dans <a id="xref--ch03-git-branching--s_git_branches_overview" href="ch03-git-branching.xhtml#s_git_branches_overview" class="xref">Les branches en bref</a>, nous allons plus dans le détail sur ce que <code class="literal">git commit</code> fait et pourquoi elle le fait ainsi.</p>
<p>Nous avons vu comment signer cryptographiquement les <em>commits</em> avec l&#8217;option <code class="literal">-S</code> dans <a id="xref--ch07-git-tools--s_signing_commits" href="ch07-git-tools.xhtml#s_signing_commits" class="xref">Signer des <em>commits</em></a>.</p>
<p>Enfin, nous regardons ce que la commande <code class="literal">git commit</code> fait en coulisses et comment elle est réellement implémentée dans <a id="xref--ch10-git-internals--s_git_commit_objects" href="ch10-git-internals.xhtml#s_git_commit_objects" class="xref">Les objets <em>commit</em></a>.</p>
</section>
<section class="sect2" title="git reset">
<h3 id="_git_reset">git reset</h3>
<p>La commande <code class="literal">git reset</code> est d&#8217;abord utilisée pour défaire des choses, comme son nom l&#8217;indique.
Elle modifie le pointeur <code class="literal">HEAD</code> et change optionnellement l&#8217;index et peut aussi modifier le répertoire de travail si vous l&#8217;utilisez avec l&#8217;option <code class="literal">--hard</code>.
Cette dernière option rend possible la perte de votre travail par cette commande si elle est mal employée, alors soyez certain de bien la comprendre avant de l&#8217;utiliser.</p>
<p>Nous couvrons d&#8217;abord effectivement le cas le plus simple de <code class="literal">git reset</code> dans <a id="xref--ch02-git-basics--s_unstaging" href="ch02-git-basics.xhtml#s_unstaging" class="xref">Désindexer un fichier déjà indexé</a> où nous l&#8217;utilisons pour désindexer un fichier sur lequel nous avons lancé <code class="literal">git add</code>.</p>
<p>Nous la couvrons ensuite de façon assez détaillée dans <a id="xref--ch07-git-tools--s_git_reset" href="ch07-git-tools.xhtml#s_git_reset" class="xref">Reset démystifié</a>, qui est entièrement dédié à l&#8217;explication de cette commande.</p>
<p>Nous utilisons <code class="literal">git reset --hard</code> pour annuler une fusion dans <a id="xref--ch07-git-tools--s_abort_merge" href="ch07-git-tools.xhtml#s_abort_merge" class="xref">Abandonner une fusion</a>, où nous utilisons aussi <code class="literal">git merge --abort</code>, qui est un peu un enrobage pour la commande <code class="literal">git reset</code>.</p>
</section>
<section class="sect2" title="git rm">
<h3 id="_git_rm">git rm</h3>
<p>La commande <code class="literal">git rm</code> est utilisée pour supprimer des fichiers de l&#8217;index et du répertoire de travail pour Git.
Elle est similaire à <code class="literal">git add</code> dans le sens où elle indexe la suppression d&#8217;un fichier pour le prochain <em>commit</em>.</p>
<p>Nous couvrons la commande <code class="literal">git rm</code> dans le détail dans <a id="xref--ch02-git-basics--s_removing_files" href="ch02-git-basics.xhtml#s_removing_files" class="xref">Effacer des fichiers</a>, y compris en supprimant récursivement les fichiers et en ne supprimant les fichiers que de l&#8217;index mais en les laissant dans le répertoire de travail avec <code class="literal">--cached</code>.</p>
<p>Le seul autre usage différent de <code class="literal">git rm</code> dans le livre est dans <a id="xref--ch10-git-internals--s_removing_objects" href="ch10-git-internals.xhtml#s_removing_objects" class="xref">Suppression d&#8217;objets</a> où nous utilisons et expliquons brièvement l&#8217;option <code class="literal">--ignore-unmatch</code> quand nous lançons <code class="literal">git filter-branch</code>, qui ne sort tout simplement pas d&#8217;erreur lorsque le fichier que nous essayons de supprimer n&#8217;existe pas.
Cela peut être utile dans le but d&#8217;utiliser des scripts.</p>
</section>
<section class="sect2" title="git mv">
<h3 id="_git_mv">git mv</h3>
<p>La commande <code class="literal">git mv</code> est une commande de faible utilité pour renommer un fichier et ensuite lancer <code class="literal">git add</code> sur le nouveau fichier et <code class="literal">git rm</code> sur l&#8217;ancien.</p>
<p>Nous ne mentionnons cette commande que brièvement dans <a id="xref--ch02-git-basics--s_git_mv" href="ch02-git-basics.xhtml#s_git_mv" class="xref">Déplacer des fichiers</a>.</p>
</section>
<section class="sect2" title="git clean">
<h3 id="_git_clean">git clean</h3>
<p>La commande <code class="literal">git clean</code> est utilisée pour supprimer les fichiers indésirables de votre répertoire de travail.
Cela peut aller de la suppression des fichiers temporaires de compilation jusqu&#8217;aux fichiers de conflit de fusion.</p>
<p>Nous couvrons une grande part des options et des scénarios dans lesquels vous pourriez utiliser la commande <code class="literal">clean</code> dans <a id="xref--ch07-git-tools--s_git_clean" href="ch07-git-tools.xhtml#s_git_clean" class="xref">Nettoyer son répertoire de travail</a>.</p>
</section>
</section>
<section class="sect1" title="Création de branches et fusion">
<h2 id="_création_de_branches_et_fusion">Création de branches et fusion</h2>
<p>Il y a une poignée seulement de commandes qui implémentent la plupart des fonctionnalités de branche et de fusion dans Git.</p>
<section class="sect2" title="git branch">
<h3 id="_git_branch">git branch</h3>
<p>La commande <code class="literal">git branch</code> est en fait une sorte d&#8217;outil de gestion de branche.
Elle peut lister les branches que vous avez, créer une nouvelle branche, supprimer des branches et renommer des branches.</p>
<p>La plus grande partie de <a id="xref--ch03-git-branching" href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a> est dédiée à la commande <code class="literal">branch</code> et elle est utilisée tout au long du chapitre.
Nous la présentons d&#8217;abord dans <a id="xref--ch03-git-branching--s_create_new_branch" href="ch03-git-branching.xhtml#s_create_new_branch" class="xref">Créer une nouvelle branche</a> et nous explorons la plupart de ses autres fonctionnalités (listage et suppression) dans <a id="xref--ch03-git-branching--s_branch_management" href="ch03-git-branching.xhtml#s_branch_management" class="xref">Gestion des branches</a>.</p>
<p>Dans <a id="xref--ch03-git-branching--s_tracking_branches" href="ch03-git-branching.xhtml#s_tracking_branches" class="xref">Suivre les branches</a>, nous utilisons l&#8217;option <code class="literal">git branch -u</code> pour définir une branche de suivi.</p>
<p>Enfin, nous explorons une partie de ce qu&#8217;elle fait en arrière-plan dans <a id="xref--ch10-git-internals--s_git_refs" href="ch10-git-internals.xhtml#s_git_refs" class="xref">Références Git</a>.</p>
</section>
<section class="sect2" title="git checkout">
<h3 id="_git_checkout">git checkout</h3>
<p>La commande <code class="literal">git checkout</code> est utilisée pour passer d&#8217;une branche à l&#8217;autre et en extraire le contenu dans votre répertoire de travail.</p>
<p>Nous rencontrons cette commande pour la première fois dans <a id="xref--ch03-git-branching--s_switching_branches" href="ch03-git-branching.xhtml#s_switching_branches" class="xref">Basculer entre les branches</a> avec la commande <code class="literal">git branch</code>.</p>
<p>Nous voyons comment l&#8217;utiliser pour commencer à suivre des branches avec l&#8217;option <code class="literal">--track</code> dans <a href="ch03-git-branching.xhtml#s_tracking_branches" class="xref">Suivre les branches</a>.</p>
<p>Nous nous en servons pour réintroduire des conflits de fichiers avec <code class="literal">--conflict=diff3</code> dans <a id="xref--ch07-git-tools--s_checking_out_conflicts" href="ch07-git-tools.xhtml#s_checking_out_conflicts" class="xref">Examiner les conflits</a>.</p>
<p>Nous allons plus en détail sur sa relation avec <code class="literal">git reset</code> dans <a href="ch07-git-tools.xhtml#s_git_reset" class="xref">Reset démystifié</a>.</p>
<p>Enfin, nous voyons quelques détails d&#8217;implémentation dans <a id="xref--ch10-git-internals--s_the_head" href="ch10-git-internals.xhtml#s_the_head" class="xref">La branche HEAD</a>.</p>
</section>
<section class="sect2" title="git merge">
<h3 id="_git_merge">git merge</h3>
<p>L&#8217;outil <code class="literal">git merge</code> est utilisé pour fusionner une ou plusieurs branches dans la branche que vous avez extraite.
Il avancera donc la branche courante au résultat de la fusion.</p>
<p>La commande <code class="literal">git merge</code> est d&#8217;abord présentée dans <a id="xref--ch03-git-branching--s_basic_branching" href="ch03-git-branching.xhtml#s_basic_branching" class="xref">Branches</a>.
Bien qu&#8217;elle soit utilisée à plusieurs endroits du livre, il n&#8217;y a que peu de variations de la commande <code class="literal">merge</code>&#8201;&#8212;&#8201;généralement juste <code class="literal">git merge &lt;branche&gt;</code> avec le nom de la seule branche que vous voulez fusionner.</p>
<p>Nous avons couvert comment faire une fusion écrasée (dans laquelle Git fusionne le travail mais fait comme si c&#8217;était juste un nouveau <em>commit</em> sans enregistrer l&#8217;historique de la branche dans laquelle vous fusionnez) à la toute fin de <a id="xref--ch05-distributed-git--s_public_project" href="ch05-distributed-git.xhtml#s_public_project" class="xref">Projet public dupliqué</a>.</p>
<p>Nous avons exploré une grande partie du processus de fusion et de la commande, y compris la commande <code class="literal">-Xignore-all-whitespace</code> et l&#8217;option <code class="literal">--abort</code> pour abandonner un problème du fusion dans <a href="ch07-git-tools.xhtml#s_advanced_merging" class="xref">Fusion avancée</a>.</p>
<p>Nous avons appris à vérifier les signatures avant de fusionner si votre projet utilise la signature GPG dans <a href="ch07-git-tools.xhtml#s_signing_commits" class="xref">Signer des <em>commits</em></a>.</p>
<p>Enfin, nous avons appris la fusion de sous-arbre dans <a id="xref--ch07-git-tools--s_subtree_merge" href="ch07-git-tools.xhtml#s_subtree_merge" class="xref">Subtree Merging</a>.</p>
</section>
<section class="sect2" title="git mergetool">
<h3 id="_git_mergetool">git mergetool</h3>
<p>La commande <code class="literal">git mergetool</code> se contente de lancer un assistant de fusion externe dans le cas où vous rencontrez des problèmes de fusion dans Git.</p>
<p>Nous la mentionnons rapidement dans <a href="ch03-git-branching.xhtml#s_basic_merge_conflicts" class="xref">Conflits de fusions (<em>Merge conflicts</em>)</a> et détaillons comment implémenter votre propre outil externe dans <a id="xref--ch08-customizing-git--s_external_merge_tools" href="ch08-customizing-git.xhtml#s_external_merge_tools" class="xref">Outils externes de fusion et de différence</a>.</p>
</section>
<section class="sect2" title="git log">
<h3 id="_git_log">git log</h3>
<p>La commande <code class="literal">git log</code> est utilisée pour montrer l&#8217;historique enregistré atteignable d&#8217;un projet en partant du <em>commit</em> le plus récent.
Par défaut, elle vous montrera seulement l&#8217;historique de la branche sur laquelle vous vous trouvez, mais elle accepte des branches ou sommets différents ou même multiples comme points de départ de parcours.
Elle est aussi assez souvent utilisée pour montrer les différences entre deux ou plusieurs branches au niveau <em>commit</em>.</p>
<p>Cette commande est utilisée dans presque tous les chapitres du livre pour exposer l&#8217;historique d&#8217;un projet.</p>
<p>Nous présentons la commande et la parcourons plus en détail dans <a id="xref--ch02-git-basics--s_viewing_history" href="ch02-git-basics.xhtml#s_viewing_history" class="xref">Visualiser l&#8217;historique des validations</a>.
Là nous regardons les options <code class="literal">-p</code> et <code class="literal">--stat</code> pour avoir une idée de ce qui a été introduit dans chaque <em>commit</em> et les options <code class="literal">--pretty</code> et <code class="literal">--oneline</code> pour voir l&#8217;historique de manière plus concise, avec quelques options simples de filtre de date et d&#8217;auteur.</p>
<p>Dans <a href="ch03-git-branching.xhtml#s_create_new_branch" class="xref">Créer une nouvelle branche</a>, nous l&#8217;utilisons avec l&#8217;option <code class="literal">--decorate</code> pour visualiser facilement où se trouvent nos pointeurs de branche et nous utilisons aussi l&#8217;option <code class="literal">--graph</code> pour voir à quoi ressemblent les historiques divergents.</p>
<p>Dans <a id="xref--ch05-distributed-git--s_private_team" href="ch05-distributed-git.xhtml#s_private_team" class="xref">Cas d&#8217;une petite équipe privée</a> et <a id="xref--ch07-git-tools--s_commit_ranges" href="ch07-git-tools.xhtml#s_commit_ranges" class="xref">Plages de <em>commits</em></a>, nous couvrons la syntaxe <code class="literal">brancheA..brancheB</code> que nous utilisons avec la commande <code class="literal">git log</code> pour voir quels <em>commits</em> sont propres à une branche relativement à une autre branche.
Dans <a href="ch07-git-tools.xhtml#s_commit_ranges" class="xref">Plages de <em>commits</em></a>, nous explorons cela de manière assez détaillée.</p>
<p>Dans <a id="xref--ch07-git-tools--s_merge_log" href="ch07-git-tools.xhtml#s_merge_log" class="xref">Journal de fusion</a> et <a id="xref--ch07-git-tools--s_triple_dot" href="ch07-git-tools.xhtml#s_triple_dot" class="xref">Triple point</a>, nous couvrons l&#8217;utilisation du format <code class="literal">brancheA...brancheB</code> et de la syntaxe <code class="literal">--left-right</code> pour voir ce qui est dans une branche ou l&#8217;autre mais pas dans les deux à la fois.
Dans <a href="ch07-git-tools.xhtml#s_merge_log" class="xref">Journal de fusion</a>, nous voyons aussi comment utiliser l&#8217;option <code class="literal">--merge</code> comme aide au débogage de conflit de fusion tout comme l&#8217;utilisation de l&#8217;option <code class="literal">--cc</code> pour regarder les conflits de <em>commits</em> de fusion dans votre historique.</p>
<p>Dans <a id="xref--ch07-git-tools--s_git_reflog" href="ch07-git-tools.xhtml#s_git_reflog" class="xref">Raccourcis RefLog</a>, nous utilisons l&#8217;option <code class="literal">-g</code> pour voir le reflog Git à travers cet outil au lieu de faire le parcours de la branche.</p>
<p>Dans <a id="xref--ch07-git-tools--s_searching" href="ch07-git-tools.xhtml#s_searching" class="xref">Recherche</a>, nous voyons l&#8217;utilisation des options <code class="literal">-S</code> et <code class="literal">-L</code> pour faire des recherches assez sophistiquées sur quelque chose qui s&#8217;est passé historiquement dans le code comme voir l&#8217;historique d&#8217;une fonction.</p>
<p>Dans <a href="ch07-git-tools.xhtml#s_signing_commits" class="xref">Signer des <em>commits</em></a>, nous voyons comment utiliser <code class="literal">--show-signature</code> pour ajouter un message de validation pour chaque <em>commit</em> dans la sortie de <code class="literal">git log</code> basé sur le fait qu&#8217;il ait ou qu&#8217;il n&#8217;ait pas une signature valide.</p>
</section>
<section class="sect2" title="git stash">
<h3 id="_git_stash">git stash</h3>
<p>La commande <code class="literal">git stash</code> est utilisée pour remiser temporairement du travail non validé afin d&#8217;obtenir un répertoire de travail propre sans avoir à valider du travail non terminé dans une branche.</p>
<p>Elle est entièrement décrite simplement dans <a id="xref--ch07-git-tools--s_git_stashing" href="ch07-git-tools.xhtml#s_git_stashing" class="xref">Remisage et nettoyage</a>.</p>
</section>
<section class="sect2" title="git tag">
<h3 id="_git_tag">git tag</h3>
<p>La commande <code class="literal">git tag</code> est utilisée pour placer un signet permanent à un point spécifique de l&#8217;historique du code.
C&#8217;est généralement utilisé pour marquer des choses comme des publications.</p>
<p>Cette commande est présentée et couverte en détail dans <a id="xref--ch02-git-basics--s_git_tagging" href="ch02-git-basics.xhtml#s_git_tagging" class="xref">Étiquetage</a> et nous la mettons en pratique dans <a id="xref--ch05-distributed-git--s_tagging_releases" href="ch05-distributed-git.xhtml#s_tagging_releases" class="xref">Étiquetage de vos publications</a>.</p>
<p>Nous couvrons aussi comment créer une étiquette signée avec l&#8217;option <code class="literal">-s</code> et en vérifier une avec l&#8217;option <code class="literal">-v</code> dans <a id="xref--ch07-git-tools--s_signing" href="ch07-git-tools.xhtml#s_signing" class="xref">Signer votre travail</a>.</p>
</section>
</section>
<section class="sect1" title="Partage et mise à jour de projets">
<h2 id="_partage_et_mise_à_jour_de_projets">Partage et mise à jour de projets</h2>
<p>Il n&#8217;y a pas vraiment beaucoup de commandes dans Git qui accèdent au réseau ; presque toutes les commandes agissent sur la base de données locale.
Quand vous êtes prêt à partager votre travail ou à tirer les changements depuis ailleurs, il y a une poignée de commandes qui échangent avec les dépôts distants.</p>
<section class="sect2" title="git fetch">
<h3 id="_git_fetch">git fetch</h3>
<p>La commande <code class="literal">git fetch</code> communique avec un dépôt distant et rapporte toutes les informations qui sont dans ce dépôt qui ne sont pas dans le vôtre et les stocke dans votre base de données locale.</p>
<p>Nous voyons cette commande pour la première fois dans <a id="xref--ch02-git-basics--s_fetching_and_pulling" href="ch02-git-basics.xhtml#s_fetching_and_pulling" class="xref">Récupérer et tirer depuis des dépôts distants</a> et nous continuons à voir des exemples d&#8217;utilisation dans <a href="ch03-git-branching.xhtml#s_remote_branches" class="xref">Branches distantes</a>.</p>
<p>Nous l&#8217;utilisons aussi dans plusieurs exemples dans <a id="xref--ch05-distributed-git--s_contributing_project" href="ch05-distributed-git.xhtml#s_contributing_project" class="xref">Contribution à un projet</a>.</p>
<p>Nous l&#8217;utilisons pour aller chercher une seule référence spécifique qui est hors de l&#8217;espace par défaut dans <a id="xref--ch06-github--s_pr_refs" href="ch06-github.xhtml#s_pr_refs" class="xref">Références aux requêtes de tirage</a> et nous voyons comment aller chercher depuis un paquet dans <a href="ch07-git-tools.xhtml#s_bundling" class="xref">Empaquetage (<em>bundling</em>)</a>.</p>
<p>Nous définissons des refspecs hautement personnalisées dans le but de faire faire à <code class="literal">git fetch</code> quelque chose d&#8217;un peu différent que le comportement par défaut dans <a id="xref--ch10-git-internals--s_refspec" href="ch10-git-internals.xhtml#s_refspec" class="xref">La <em>refspec</em></a>.</p>
</section>
<section class="sect2" title="git pull">
<h3 id="_git_pull">git pull</h3>
<p>La commande <code class="literal">git pull</code> est essentiellement une combinaison des commandes <code class="literal">git fetch</code> et <code class="literal">git merge</code>, où Git ira chercher les modifications depuis le dépôt distant que vous spécifiez et essaie immédiatement de les fusionner dans la branche dans laquelle vous vous trouvez.</p>
<p>Nous la présentons rapidement dans <a href="ch02-git-basics.xhtml#s_fetching_and_pulling" class="xref">Récupérer et tirer depuis des dépôts distants</a> et montrons comment voir ce qui sera fusionné si vous la lancez dans <a id="xref--ch02-git-basics--s_inspecting_remote" href="ch02-git-basics.xhtml#s_inspecting_remote" class="xref">Inspecter un dépôt distant</a>.</p>
<p>Nous voyons aussi comment s&#8217;en servir pour nous aider dans les difficultés du rebasage dans <a id="xref--ch03-git-branching--s_rebase_rebase" href="ch03-git-branching.xhtml#s_rebase_rebase" class="xref">Rebaser quand vous rebasez</a>.</p>
<p>Nous montrons comment s&#8217;en servir avec une URL pour tirer ponctuellement les modifications dans <a id="xref--ch05-distributed-git--s_checking_out_remotes" href="ch05-distributed-git.xhtml#s_checking_out_remotes" class="xref">Vérification des branches distantes</a>.</p>
<p>Enfin, nous mentionnons très rapidement que vous pouvez utiliser l&#8217;option <code class="literal">--verify-signatures</code> dans le but de vérifier que les <em>commits</em> que vous tirez ont une signature GPG dans <a href="ch07-git-tools.xhtml#s_signing_commits" class="xref">Signer des <em>commits</em></a>.</p>
</section>
<section class="sect2" title="git push">
<h3 id="_git_push">git push</h3>
<p>La commande <code class="literal">git push</code> est utilisée pour communiquer avec un autre dépôt, calculer ce que votre base de données locale a et que le dépôt distant n&#8217;a pas, et ensuite pousser la différence dans l&#8217;autre dépôt.
Cela nécessite un droit d&#8217;écriture sur l&#8217;autre dépôt et donc normalement de s&#8217;authentifier d&#8217;une manière ou d&#8217;une autre.</p>
<p>Nous voyons la commande <code class="literal">git push</code> pour la première fois dans <a id="xref--ch02-git-basics--s_pushing_remotes" href="ch02-git-basics.xhtml#s_pushing_remotes" class="xref">Pousser son travail sur un dépôt distant</a>.
Ici nous couvrons les bases de la poussée de branche vers un dépôt distant.
Dans <a id="xref--ch03-git-branching--s_pushing_branches" href="ch03-git-branching.xhtml#s_pushing_branches" class="xref">Pousser les branches</a>, nous allons un peu plus loin dans la poussée de branches spécifiques et dans <a href="ch03-git-branching.xhtml#s_tracking_branches" class="xref">Suivre les branches</a> nous voyons comment définir des branches de suivi pour y pousser automatiquement.
Dans <a id="xref--ch03-git-branching--s_delete_branches" href="ch03-git-branching.xhtml#s_delete_branches" class="xref">Suppression de branches distantes</a>, nous utilisons l&#8217;option <code class="literal">--delete</code> pour supprimer une branche sur le serveur avec <code class="literal">git push</code>.</p>
<p>Tout au long de <a href="ch05-distributed-git.xhtml#s_contributing_project" class="xref">Contribution à un projet</a>, nous voyons plusieurs exemples d&#8217;utilisation de <code class="literal">git push</code> pour partager du travail sur des branches à travers de multiples dépôts distants.</p>
<p>Nous voyons dans <a id="xref--ch02-git-basics--s_sharing_tags" href="ch02-git-basics.xhtml#s_sharing_tags" class="xref">Partager les étiquettes</a> comment s&#8217;en servir avec l&#8217;option <code class="literal">--tags</code> pour partager des étiquettes que vous avez faites.</p>
<p>Dans <a id="xref--ch07-git-tools--s_publishing_submodules" href="ch07-git-tools.xhtml#s_publishing_submodules" class="xref">Publier les modifications dans un sous-module</a>, nous utilisons l&#8217;option <code class="literal">--recurse-submodules</code> pour vérifier que tout le travail de nos sous-modules a été publié avant de pousser le super-projet, ce qui peut être vraiment utile quand on utilise des sous-modules.</p>
<p>Dans <a id="xref--ch08-customizing-git--s_other_client_hooks" href="ch08-customizing-git.xhtml#s_other_client_hooks" class="xref">Autres crochets côté client</a>, nous discutons brièvement du crochet <code class="literal">pre-push</code>, qui est un script que nous pouvons installer pour se lancer avant qu&#8217;une poussée ne s&#8217;achève pour vérifier qu&#8217;elle devrait être autorisée à pousser.</p>
<p>Enfin, dans <a id="xref--ch10-git-internals--s_pushing_refspecs" href="ch10-git-internals.xhtml#s_pushing_refspecs" class="xref">Pousser des <em>refspecs</em></a>, nous considérons une poussée avec une refspec complète au lieu des raccourcis généraux qui sont normalement utilisés.
Ceci peut vous aider à être très spécifique sur le travail que vous désirez partager.</p>
</section>
<section class="sect2" title="git remote">
<h3 id="_git_remote">git remote</h3>
<p>La commande <code class="literal">git remote</code> est un outil de gestion pour votre base de dépôts distants.
Elle vous permet de sauvegarder de longues URLs en tant que raccourcis, comme « origin », pour que vous n&#8217;ayez pas à les taper dans leur intégralité tout le temps.
Vous pouvez en avoir plusieurs et la commande <code class="literal">git remote</code> est utilisée pour les ajouter, les modifier et les supprimer.</p>
<p>Cette commande est couverte en détail dans <a id="xref--ch02-git-basics--s_remote_repos" href="ch02-git-basics.xhtml#s_remote_repos" class="xref">Travailler avec des dépôts distants</a>, y compris leur listage, ajout, suppression et renommage.</p>
<p>Elle est aussi utilisée dans presque tous les chapitres suivants du livre, mais toujours dans le format standard <code class="literal">git remote add &lt;nom&gt; &lt;URL&gt;</code>.</p>
</section>
<section class="sect2" title="git archive">
<h3 id="_git_archive">git archive</h3>
<p>La commande <code class="literal">git archive</code> est utilisée pour créer un fichier d&#8217;archive d&#8217;un instantané spécifique du projet.</p>
<p>Nous utilisons <code class="literal">git archive</code> pour créer une archive d&#8217;un projet pour partage dans <a id="xref--ch05-distributed-git--s_preparing_release" href="ch05-distributed-git.xhtml#s_preparing_release" class="xref">Préparation d&#8217;une publication</a>.</p>
</section>
<section class="sect2" title="git submodule">
<h3 id="_git_submodule">git submodule</h3>
<p>La commande <code class="literal">git submodule</code> est utilisée pour gérer des dépôts externes à l&#8217;intérieur de dépôts normaux.
Cela peut être pour des bibliothèques ou d&#8217;autres types de ressources partagées.
La commande <code class="literal">submodule</code> a plusieurs sous-commandes (<code class="literal">add</code>, <code class="literal">update</code>, <code class="literal">sync</code>, etc) pour la gestion de ces ressources.</p>
<p>Cette commande est mentionnée et entièrement traitée uniquement dans <a id="xref--ch07-git-tools--s_git_submodules" href="ch07-git-tools.xhtml#s_git_submodules" class="xref">Sous-modules</a>.</p>
</section>
</section>
<section class="sect1" title="Inspection et comparaison">
<h2 id="_inspection_et_comparaison">Inspection et comparaison</h2>
<section class="sect2" title="git show">
<h3 id="_git_show">git show</h3>
<p>La commande <code class="literal">git show</code> peut montrer un objet Git d&#8217;une façon simple et lisible pour un être humain.
Vous l&#8217;utiliseriez normalement pour montrer les informations d&#8217;une étiquette ou d&#8217;un <em>commit</em>.</p>
<p>Nous l&#8217;utilisons d&#8217;abord pour afficher l&#8217;information d&#8217;une étiquette annotée dans <a id="xref--ch02-git-basics--s_annotated_tags" href="ch02-git-basics.xhtml#s_annotated_tags" class="xref">Les étiquettes annotées</a>.</p>
<p>Plus tard nous l&#8217;utilisons un petit peu dans <a id="xref--ch07-git-tools--s_revision_selection" href="ch07-git-tools.xhtml#s_revision_selection" class="xref">Sélection des versions</a> pour montrer les <em>commits</em> que nos diverses sélections de versions résolvent.</p>
<p>Une des choses les plus intéressantes que nous faisons avec <code class="literal">git show</code> est dans <a id="xref--ch07-git-tools--s_manual_remerge" href="ch07-git-tools.xhtml#s_manual_remerge" class="xref">Re-fusion manuelle d&#8217;un fichier</a> pour extraire le contenu de fichiers spécifiques d&#8217;étapes différentes durant un conflit de fusion.</p>
</section>
<section class="sect2" title="git shortlog">
<h3 id="_git_shortlog">git shortlog</h3>
<p>La commande <code class="literal">git shortlog</code> est utilisée pour résumer la sortie de <code class="literal">git log</code>.
Elle prendra beaucoup des mêmes options que la commande <code class="literal">git log</code> mais au lieu de lister tous les <em>commits</em>, elle présentera un résumé des <em>commits</em> groupés par auteur.</p>
<p>Nous avons montré comment s&#8217;en servir pour créer un joli journal des modifications dans <a id="xref--ch05-distributed-git--s_the_shortlog" href="ch05-distributed-git.xhtml#s_the_shortlog" class="xref">Shortlog</a>.</p>
</section>
<section class="sect2" title="git describe">
<h3 id="_git_describe">git describe</h3>
<p>La commande <code class="literal">git describe</code> est utilisée pour prendre n&#8217;importe quelle chose qui se résoud en un <em>commit</em> et produit une chaîne de caractères qui est somme toute lisible pour un être humain et qui ne changera pas.
C&#8217;est une façon d&#8217;obtenir une description d&#8217;un <em>commit</em> qui est aussi claire qu&#8217;un SHA de <em>commit</em> mais en plus compréhensible.</p>
<p>Nous utilisons <code class="literal">git describe</code> dans <a id="xref--ch05-distributed-git--s_build_number" href="ch05-distributed-git.xhtml#s_build_number" class="xref">Génération d&#8217;un nom de révision</a> et <a href="ch05-distributed-git.xhtml#s_preparing_release" class="xref">Préparation d&#8217;une publication</a> pour obtenir une chaîne de caractères pour nommer notre fichier de publication après.</p>
</section>
</section>
<section class="sect1" title="Débogage">
<h2 id="_débogage">Débogage</h2>
<p>Git possède quelques commandes qui sont utilisées pour aider à déboguer un problème dans votre code.
Cela va de comprendre où quelque chose a été introduit à comprendre qui l&#8217;a introduite.</p>
<section class="sect2" title="git bisect">
<h3 id="_git_bisect">git bisect</h3>
<p>L&#8217;outil <code class="literal">git bisect</code> est un outil de débogage incroyablement utile utilisé pour trouver quel <em>commit</em> spécifique a le premier introduit un bug ou problème en faisant une recherche automatique par dichotomie.</p>
<p>Il est complètement couvert dans <a id="xref--ch07-git-tools--s_binary_search" href="ch07-git-tools.xhtml#s_binary_search" class="xref">Recherche dichotomique</a> et n&#8217;est mentionné que dans cette section.</p>
</section>
<section class="sect2" title="git blame">
<h3 id="_git_blame">git blame</h3>
<p>La commande <code class="literal">git blame</code> annote les lignes de n&#8217;importe quel fichier avec quel <em>commit</em> a été le dernier à introduire un changement pour chaque ligne du fichier et quelle personne est l&#8217;auteur de ce <em>commit</em>.
C&#8217;est utile pour trouver la personne pour lui demander plus d&#8217;informations sur une section spécifique de votre code.</p>
<p>Elle est couverte dans <a id="xref--ch07-git-tools--s_file_annotation" href="ch07-git-tools.xhtml#s_file_annotation" class="xref">Fichier annoté</a> et n&#8217;est mentionnée que dans cette section.</p>
</section>
<section class="sect2" title="git grep">
<h3 id="_git_grep">git grep</h3>
<p>La commande <code class="literal">git grep</code> peut aider à trouver n&#8217;importe quelle chaîne de caractères ou expression régulière dans n&#8217;importe quel fichier de votre code source, même dans des anciennes versions de votre projet.</p>
<p>Elle est couverte dans <a id="xref--ch07-git-tools--s_git_grep" href="ch07-git-tools.xhtml#s_git_grep" class="xref">Git grep</a> et n&#8217;est mentionnée que dans cette section.</p>
</section>
</section>
<section class="sect1" title="Patchs">
<h2 id="_patchs">Patchs</h2>
<p>Quelques commandes dans Git sont centrées sur la considération des <em>commits</em> en termes de changements qu&#8217;ils introduisent, comme si les séries de <em>commits</em> étaient des séries de patchs.
Ces commandes vous aident à gérer vos branches de cette manière.</p>
<section class="sect2" title="git cherry-pick">
<h3 id="_git_cherry_pick">git cherry-pick</h3>
<p>La commande <code class="literal">git cherry-pick</code> est utilisée pour prendre les modifications introduites dans un seul <em>commit</em> Git et essaye de les réintroduire en tant que nouveau <em>commit</em> sur la branche sur laquelle vous vous trouvez.
Cela peut être utile pour prendre un ou deux <em>commits</em> sur une branche individuellement plutôt que fusionner dans la branche, ce qui prend toutes les modifications.</p>
<p>La sélection de <em>commits</em> est décrite et démontrée dans <a id="xref--ch05-distributed-git--s_rebase_cherry_pick" href="ch05-distributed-git.xhtml#s_rebase_cherry_pick" class="xref">Gestion par rebasage et sélection de <em>commit</em></a>.</p>
</section>
<section class="sect2" title="git rebase">
<h3 id="_git_rebase">git rebase</h3>
<p>La commande <code class="literal">git rebase</code> est simplement un <code class="literal">cherry-pick</code> automatisé.
Elle détermine une série de <em>commits</em> puis les sélectionne et les ré-applique un par un dans le même ordre ailleurs.</p>
<p>Le rebasage est couvert en détail dans <a href="ch03-git-branching.xhtml#s_rebasing" class="xref">Rebaser (<em>Rebasing</em>)</a>, y compris l&#8217;étude des problèmes de collaboration induits par le rebasage de branches qui sont déjà publiques.</p>
<p>Nous la mettons en pratique tout au long d&#8217;un exemple de scission de votre historique en deux dépôts séparés dans <a id="xref--ch07-git-tools--s_replace" href="ch07-git-tools.xhtml#s_replace" class="xref">Replace</a>, en utilisant aussi l&#8217;option <code class="literal">--onto</code>.</p>
<p>Nous explorons un conflit de fusion de rebasage dans <a id="xref--ch07-git-tools--s_sect_rerere" href="ch07-git-tools.xhtml#s_sect_rerere" class="xref">Rerere</a>.</p>
<p>Nous l&#8217;utilisons aussi dans un mode de script interactif avec l&#8217;option <code class="literal">-i</code> dans <a id="xref--ch07-git-tools--s_changing_multiple" href="ch07-git-tools.xhtml#s_changing_multiple" class="xref">Modifier plusieurs messages de validation</a>.</p>
</section>
<section class="sect2" title="git revert">
<h3 id="_git_revert">git revert</h3>
<p>La commande <code class="literal">git revert</code> est fondamentalement le contraire de <code class="literal">git cherry-pick</code>.
Elle crée un <em>commit</em> qui applique l&#8217;exact opposé des modifications introduites par le <em>commit</em> que vous ciblez, essentiellement en le défaisant ou en revenant dessus.</p>
<p>Nous l&#8217;utilisons dans <a id="xref--ch07-git-tools--s_reverse_commit" href="ch07-git-tools.xhtml#s_reverse_commit" class="xref">Inverser le <em>commit</em></a> pour défaire un <em>commit</em> de fusion.</p>
</section>
</section>
<section class="sect1" title="Courriel">
<h2 id="_courriel">Courriel</h2>
<p>Beaucoup de projets Git,y compris Git lui-même,sont entièrement maintenus à travers des listes de diffusion de courrier électronique.
Git possède un certain nombre d&#8217;outils intégrés qui aident à rendre ce processus plus facile, depuis la génération de patchs que vous pouvez facilement envoyer par courriel jusqu&#8217;à l&#8217;application de ces patchs depuis une boîte de courrier électronique.</p>
<section class="sect2" title="git apply">
<h3 id="_git_apply">git apply</h3>
<p>La commande <code class="literal">git apply</code> applique un patch créé avec la commande <code class="literal">git diff</code> ou même la commande GNU diff.
C&#8217;est similaire à ce que la commande <code class="literal">patch</code> ferait avec quelques petites différences.</p>
<p>Nous démontrons son utilisation et les circonstances dans lesquelles vous pourriez ainsi faire dans <a id="xref--ch05-distributed-git--s_patches_from_email" href="ch05-distributed-git.xhtml#s_patches_from_email" class="xref">Application des patchs à partir de courriel</a>.</p>
</section>
<section class="sect2" title="git am">
<h3 id="_git_am">git am</h3>
<p>La commande <code class="literal">git am</code> est utilisée pour appliquer des patchs depuis une boîte de réception de courrier électronique, en particulier ceux qui sont dans le format mbox.
C&#8217;est utile pour recevoir des patchs par courriel et les appliquer à votre projet facilement.</p>
<p>Nous avons couvert l&#8217;utilisation et le flux de travail autour de <code class="literal">git am</code> dans <a id="xref--ch05-distributed-git--s_git_am" href="ch05-distributed-git.xhtml#s_git_am" class="xref">Application d&#8217;un patch avec <code class="literal">am</code></a>, y compris en utilisant les options <code class="literal">--resolved</code>, <code class="literal">-i</code> et <code class="literal">-3</code>.</p>
<p>Il y a aussi un certain nombre de crochets dont vous pouvez vous servir pour vous aider dans le flux de travail autour de <code class="literal">git am</code> et ils sont tous couverts dans <a id="xref--ch08-customizing-git--s_email_hooks" href="ch08-customizing-git.xhtml#s_email_hooks" class="xref">Crochets de gestion courriel</a>.</p>
<p>Nous l&#8217;utilisons aussi pour appliquer les modifications d&#8217;un patch au format « GitHub Pull Request » dans <a id="xref--ch06-github--s_email_notifications" href="ch06-github.xhtml#s_email_notifications" class="xref">Notifications par courriel</a>.</p>
</section>
<section class="sect2" title="git format-patch">
<h3 id="_git_format_patch">git format-patch</h3>
<p>La commande <code class="literal">git format-patch</code> est utilisée pour générer une série de patchs au format mbox que vous pouvez envoyer à une liste de diffusion proprement formattée.</p>
<p>Nous explorons un exemple de contribution à un projet en utilisant l&#8217;outil <code class="literal">git format-patch</code> dans <a id="xref--ch05-distributed-git--s_project_over_email" href="ch05-distributed-git.xhtml#s_project_over_email" class="xref">Projet public via courriel</a>.</p>
</section>
<section class="sect2" title="git imap-send">
<h3 id="_git_imap_send">git imap-send</h3>
<p>La commande <code class="literal">git imap-send</code> téléverse une boîte mail générée avec <code class="literal">git format-patch</code> dans un dossier « brouillons » IMAP.</p>
<p>Nous explorons un exemple de contribution à un projet par envoi de patchs avec l&#8217;outil <code class="literal">git imap-send</code> dans <a href="ch05-distributed-git.xhtml#s_project_over_email" class="xref">Projet public via courriel</a>.</p>
</section>
<section class="sect2" title="git send-email">
<h3 id="_git_send_email">git send-email</h3>
<p>La commande <code class="literal">git send-email</code> est utilisée pour envoyer des patchs générés avec <code class="literal">git format-patch</code> par courriel.</p>
<p>Nous explorons un exemple de contribution à un projet en envoyant des patchs avec l&#8217;outil <code class="literal">git send-email</code> dans <a href="ch05-distributed-git.xhtml#s_project_over_email" class="xref">Projet public via courriel</a>.</p>
</section>
<section class="sect2" title="git request-pull">
<h3 id="_git_request_pull">git request-pull</h3>
<p>La commande <code class="literal">git request-pull</code> est simplement utilisée pour générer un exemple de corps de message à envoyer par courriel à quelqu&#8217;un.
Si vous avez une branche sur un serveur public et que vous voulez faire savoir à quelqu&#8217;un comment intégrer ces modifications sans envoyer les patchs par courrier électronique, vous pouvez lancer cette commande et envoyer la sortie à la personne dont vous voulez qu&#8217;elle tire les modifications.</p>
<p>Nous démontrons comment utiliser <code class="literal">git request-pull</code> pour générer un message de tirage dans <a href="ch05-distributed-git.xhtml#s_public_project" class="xref">Projet public dupliqué</a>.</p>
</section>
</section>
<section class="sect1" title="Systèmes externes">
<h2 id="_systèmes_externes">Systèmes externes</h2>
<p>Git est fourni avec quelques commandes pour s&#8217;intégrer avec d&#8217;autres systèmes de contrôle de version.</p>
<section class="sect2" title="git svn">
<h3 id="_git_svn">git svn</h3>
<p>La commande <code class="literal">git svn</code> est utilisée pour communiquer avec le système de contrôle de version Subversion en tant que client.
Cela signifie que vous pouvez vous servir de Git pour extraire depuis et envoyer des <em>commits</em> à un serveur Subversion.</p>
<p>Cette commande est couverte en profondeur dans <a id="xref--ch09-git-and-other-scms--s_git_svn" href="ch09-git-and-other-scms.xhtml#s_git_svn" class="xref">Git et Subversion</a>.</p>
</section>
<section class="sect2" title="git fast-import">
<h3 id="_git_fast_import">git fast-import</h3>
<p>Pour les autres systèmes de contrôle de version ou pour importer depuis presque n&#8217;importe quel format, vous pouvez utiliser <code class="literal">git fast-import</code> pour associer rapidement l&#8217;autre format à quelque chose que Git peut facilement enregistrer.</p>
<p>Cette commande est couverte en profondeur dans <a id="xref--ch09-git-and-other-scms--s_custom_importer" href="ch09-git-and-other-scms.xhtml#s_custom_importer" class="xref">Un importateur personnalisé</a>.</p>
</section>
</section>
<section class="sect1" title="Administration">
<h2 id="_administration">Administration</h2>
<p>Si vous administrez un dépôt Git ou si vous avez besoin de corriger quelque chose de façon globale, Git fournit un certain nombre de commandes administratives pour vous y aider.</p>
<section class="sect2" title="git gc">
<h3 id="_git_gc">git gc</h3>
<p>La commande <code class="literal">git gc</code> lance le « ramasse-miette » sur votre dépôt, en supprimant les fichiers superflus de votre base de données et en empaquetant les fichiers restants dans un format plus efficace.</p>
<p>Cette commande tourne normalement en arrière-plan pour vous, même si vous pouvez la lancer manuellement si vous le souhaitez.
Nous parcourons quelques exemples dans <a id="xref--ch10-git-internals--s_git_gc" href="ch10-git-internals.xhtml#s_git_gc" class="xref">Maintenance</a>.</p>
</section>
<section class="sect2" title="git fsck">
<h3 id="_git_fsck">git fsck</h3>
<p>La commande <code class="literal">git fsck</code> est utilisée pour vérifier les problèmes ou les incohérences de la base de données interne.</p>
<p>Nous l&#8217;utilisons rapidement une seule fois dans <a id="xref--ch10-git-internals--s_data_recovery" href="ch10-git-internals.xhtml#s_data_recovery" class="xref">Récupération de données</a> pour chercher des objets ballants.</p>
</section>
<section class="sect2" title="git reflog">
<h3 id="_git_reflog">git reflog</h3>
<p>La commande <code class="literal">git reflog</code> explore un journal de là où toutes vos branches sont passées pendant que vous travailliez pour trouver des <em>commits</em> que vous pourriez avoir perdus en ré-écrivant des historiques.</p>
<p>Nous couvrons cette commande principalement dans <a href="ch07-git-tools.xhtml#s_git_reflog" class="xref">Raccourcis RefLog</a>, où nous montrons un usage normal et comment utiliser <code class="literal">git log -g</code> pour visualiser la même information avec la sortie de <code class="literal">git log</code>.</p>
<p>Nous explorons aussi un exemple pratique de récupération d&#8217;une telle branche perdue dans <a href="ch10-git-internals.xhtml#s_data_recovery" class="xref">Récupération de données</a>.</p>
</section>
<section class="sect2" title="git filter-branch">
<h3 id="_git_filter_branch">git filter-branch</h3>
<p>La commande <code class="literal">git filter-branch</code> est utilisée pour réécrire un tas de <em>commits</em> selon des motifs particuliers, comme supprimer un fichier partout ou filtrer le dépôt entier sur un seul sous-dossier pour l&#8217;extraction d&#8217;un projet.</p>
<p>Dans <a id="xref--ch07-git-tools--s_removing_file_every_commit" href="ch07-git-tools.xhtml#s_removing_file_every_commit" class="xref">Supprimer un fichier de chaque <em>commit</em></a>, nous expliquons la commande et explorons différentes options telles que <code class="literal">--commit-filter</code>, <code class="literal">--subdirectory-filter</code> et <code class="literal">--tree-filter</code>.</p>
<p>Dans <a id="xref--ch09-git-and-other-scms--s_sect_git_p4" href="ch09-git-and-other-scms.xhtml#s_sect_git_p4" class="xref">Git-p4</a> et <a id="xref--ch09-git-and-other-scms--s_git_tfs" href="ch09-git-and-other-scms.xhtml#s_git_tfs" class="xref">TFS</a>, nous l&#8217;utilisons pour arranger des dépôts externes importés.</p>
</section>
</section>
<section class="sect1" title="Commandes de plomberie">
<h2 id="_commandes_de_plomberie">Commandes de plomberie</h2>
<p>Il y a un certain nombre de commandes de plomberie de bas niveau que nous avons rencontrées dans le livre.</p>
<p>La première que nous avons rencontrée est <code class="literal">ls-remote</code> dans <a href="ch06-github.xhtml#s_pr_refs" class="xref">Références aux requêtes de tirage</a> que nous utilisons pour regarder les références brutes sur le serveur.</p>
<p>Nous utilisons <code class="literal">ls-files</code> dans <a href="ch07-git-tools.xhtml#s_manual_remerge" class="xref">Re-fusion manuelle d&#8217;un fichier</a>, <a href="ch07-git-tools.xhtml#s_sect_rerere" class="xref">Rerere</a> et <a id="xref--ch07-git-tools--s_the_index" href="ch07-git-tools.xhtml#s_the_index" class="xref">L&#8217;index</a> pour jeter un coup d&#8217;œil plus cru sur ce à quoi ressemble votre index.</p>
<p>Nous mentionnons aussi <code class="literal">rev-parse</code> dans <a id="xref--ch07-git-tools--s_branch_references" href="ch07-git-tools.xhtml#s_branch_references" class="xref">Références de branches</a> pour prendre n&#8217;importe quelle chaîne de caractères et la transformer en un objet SHA.</p>
<p>Cependant, la plupart des commandes de plomberie de bas niveau que nous couvrons se trouvent dans <a id="xref--ch10-git-internals" href="ch10-git-internals.xhtml" class="xref">Les tripes de Git</a>, qui est plus ou moins ce sur quoi le chapitre se focalise.
Nous avons évité de les utiliser tout au long de la majeure partie du reste du livre.</p>
</section>
</section>
</body>
</html>