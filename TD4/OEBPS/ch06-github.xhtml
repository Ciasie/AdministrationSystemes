<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="fr" lang="fr">
<head>
<meta charset="UTF-8"/>
<title>GitHub</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="GitHub" epub:type="chapter" id="ch06-github">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>GitHub</b></small></h1>
</div>
</header>
<p></p>
<p>GitHub est l&#8217;un des plus grands hébergeurs de dépôts Git et constitue le point central pour la collaboration de millions de développeurs et de projets.
Une grande partie des dépôts Git publics sont hébergés sur GitHub et de nombreux projets open-source l&#8217;utilisent pour l&#8217;hébergement Git, le suivi des erreurs, la revue de code et d&#8217;autres choses.
Donc, bien que ce ne soit pas un sous-ensemble direct du projet open source Git, il est très probable que vous souhaiterez ou aurez besoin d&#8217;interagir avec GitHub à un moment ou à un autre dans votre utilisation professionnelle de Git.</p>
<p>Ce chapitre présente la façon d&#8217;utiliser GitHub de manière efficace.
Nous traiterons la création et la gestion d&#8217;un compte utilisateur, la création et l&#8217;utilisation de dépôts Git, les processus courants pour contribuer aux projets ou pour accepter des contributions, l&#8217;interface de programmation de GitHub ainsi qu&#8217;un grand nombre d&#8217;astuces pour vous simplifier la vie.</p>
<p>Si vous n&#8217;êtes pas intéressé par l&#8217;utilisation de GitHub pour héberger vos projets personnels ou pour collaborer à d&#8217;autres projets hébergés sur GitHub, vous pouvez sans problème passer directement à <a id="xref--ch07-git-tools" href="ch07-git-tools.xhtml" class="xref">Utilitaires Git</a>.</p>
<aside class="admonition warning" title="Warning: Modification de l&#8217;interface" epub:type="warning">
<h2>Modification de l&#8217;interface</h2>
<div class="content">
<p>À l&#8217;instar de nombreux sites Web actifs, GitHub changera tôt ou tard les éléments de l&#8217;interface utilisateur par rapport aux captures d&#8217;écran présentées ici. Heureusement, l&#8217;idée générale de l&#8217;objectif des actions reste valable, mais si vous souhaitez voir des versions plus à jour de ces captures, les versions en ligne de ce livre peuvent présenter des captures plus récentes.</p>
</div>
</aside>
<section class="sect1" title="Configuration et paramétrage d&#8217;un compte">
<h2 id="_configuration_et_paramétrage_d_un_compte">Configuration et paramétrage d&#8217;un compte</h2>
<p>
La première chose à faire consiste à créer un compte utilisateur gratuit.
Allez tout simplement sur <a href="https://github.com" class="link">https://github.com</a>, choisissez un nom d&#8217;utilisateur qui n&#8217;est pas déjà pris et saisissez
une adresse électronique et un mot de passe, puis cliquez sur le gros bouton vert « Sign up for GitHub » (S&#8217;inscrire sur GitHub).</p>
<figure class="image">
<div class="content">
<img src="images/signup.png" alt="Le formulaire d'inscription de GitHub."/>
</div>
<figcaption>Figure 1. Le formulaire d&#8217;inscription de GitHub.</figcaption>
</figure>
<p>La deuxième chose que vous verrez est la page des tarifs pour des projets améliorés mais il vaut mieux ignorer
cela pour l&#8217;instant. GitHub vous envoie un courriel pour vérifier l&#8217;adresse fournie. Suivez les instructions mentionnées, c&#8217;est très important (comme nous allons le voir plus tard).</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Vous avez accès à toutes les fonctionnalités de GitHub avec un compte gratuit, à la condition que tous vos projets soient entièrement publics (tout le monde peut y accéder en lecture).
Les projets payant de GitHub comprennent la possibilité de créer des projets privés mais nous ne parlerons pas de cela dans ce livre.</p>
</div>
</aside>
<p>En cliquant sur le logo Octocat (logo en forme de chat) dans le coin supérieur gauche de l&#8217;écran, vous accéderez
à votre tableau de bord. Vous êtes maintenant prêt à utiliser GitHub.</p>
<section class="sect2" title="Accès par SSH">
<h3 id="_accès_par_ssh">Accès par SSH</h3>
<p>
Pour l&#8217;instant, vous avez la possibilité de vous connecter à des dépôts Git en utilisant le protocole <code class="literal">https://</code> et de vous identifier au moyen de votre nom d&#8217;utilisateur et de votre mot de passe.
Cependant, pour simplement cloner des projets publics, il n&#8217;est même pas nécessaire de créer un compte ‑ le compte que nous venons de créer devient utile pour commencer à dupliquer (<em>fork</em>) un projet ou pour pousser sur ces dépôts plus tard.</p>
<p>Si vous préférez utiliser des serveurs distants en SSH, vous aurez besoin de renseigner votre clé publique.
Si vous n&#8217;en possédez pas déjà une, référez-vous à <a id="xref--ch04-git-server--s_generate_ssh_key" href="ch04-git-server.xhtml#s_generate_ssh_key" class="xref">Génération des clés publiques SSH</a>.
Accédez aux paramètres de votre compte en utilisant le lien en haut à droite de la fenêtre :</p>
<figure class="image">
<div class="content">
<img src="images/account-settings.png" alt="Lien vers « Account settings » (paramètres du compte)."/>
</div>
<figcaption>Figure 2. Lien vers « Account settings » (paramètres du compte).</figcaption>
</figure>
<p>Sélectionnez ensuite la section « SSH keys » (clés SSH) sur le côté gauche.</p>
<figure class="image">
<div class="content">
<img src="images/ssh-keys.png" alt="Lien vers « SSH keys » (clés SSH)."/>
</div>
<figcaption>Figure 3. Lien vers « SSH keys » (clés SSH).</figcaption>
</figure>
<p>Ensuite, cliquez sur le bouton « <code class="literal">Add an SSH key</code> » (ajouter une clé SSH), donnez un nom à votre clé, copiez le contenu du fichier de clé publique <code class="literal">~/.ssh/id_rsa.pub</code> (ou autre si vous l&#8217;avez appelé différemment) dans la zone de texte et cliquez sur « Add key » (ajouter la clé).</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Assurez-vous de choisir un nom facile à retenir pour votre clé SSH. Vous pouvez donner un nom à chacune de vos clés
(par ex. : « mon portable » ou « compte travail ») de façon à la retrouver facilement si vous devez la révoquer plus tard.</p>
</div>
</aside>
</section>
<section class="sect2" title="Votre Avatar">
<h3 id="s_personal_avatar">Votre Avatar</h3>
<p>Ensuite, si vous le souhaitez, vous pouvez remplacer l&#8217;avatar généré pour vous par une image de votre choix.
Sélectionnez la section « Profile » (profil) (au dessus de la section « SSH Keys ») et cliquez sur « Upload new picture » (télécharger une nouvelle image).</p>
<figure class="image">
<div class="content">
<img src="images/your-profile.png" alt="Lien vers « Profile » (profil)."/>
</div>
<figcaption>Figure 4. Lien vers « Profile » (profil).</figcaption>
</figure>
<p>Après avoir sélectionné une image sur votre disque dur, il vous est possible de la recadrer.</p>
<figure class="image">
<div class="content">
<img src="images/avatar-crop.png" alt="Recadrage de l'avatar."/>
</div>
<figcaption>Figure 5. Recadrage de l&#8217;avatar</figcaption>
</figure>
<p>À présent, toutes vos interventions sur le site seront agrémentées de votre avatar au côté de votre nom d&#8217;utilisateur.</p>
<p>S&#8217;il se trouve que vous avez déposé un avatar sur le service populaire Gravatar (souvent utilisé pour les comptes Wordpress), cet avatar sera utilisé par défaut et vous n&#8217;avez pas à exécuter cette étape.</p>
</section>
<section class="sect2" title="Vos adresses électroniques">
<h3 id="_vos_adresses_électroniques">Vos adresses électroniques</h3>
<p>Github utilise les adresses électroniques pour faire correspondre les <em>commits</em> Git aux utilisateurs.
Si vous utilisez plusieurs adresses électroniques dans vos <em>commits</em> et que vous souhaitez que GitHub les relie correctement, vous devez ajouter toutes les adresses que vous avez utilisées dans la section « Emails » (adresses électroniques) de la section d&#8217;administration.</p>
<figure id="s_add_email_addresses" class="image">
<div class="content">
<img src="images/email-settings.png" alt="Ajout d'adresses électroniques."/>
</div>
<figcaption>Figure 6. Ajout d&#8217;adresses électroniques</figcaption>
</figure>
<p>Sur <a id="xref-s_add_email_addresses" href="#s_add_email_addresses" class="xref">Ajout d&#8217;adresses électroniques</a> nous pouvons voir certains états possibles.
L&#8217;adresse du haut est vérifiée et définie comme adresse principale, c&#8217;est-à-dire que ce sera l&#8217;adresse utilisée pour vous envoyer toutes les notifications.
La seconde adresse est vérifiée et peut donc aussi être définie comme adresse principale si on l&#8217;échange avec la première.
La dernière adresse est non vérifiée, ce qui signifie que vous ne pouvez pas en faire votre adresse principale.
Si GitHub détecte une de ces adresses dans des messages de validation dans n&#8217;importe quel dépôt du site, il les reliera à votre compte utilisateur.</p>
</section>
<section class="sect2" title="Authentification à deux facteurs">
<h3 id="_authentification_à_deux_facteurs">Authentification à deux facteurs</h3>
<p>Enfin, pour plus de sécurité, vous devriez assurément paramétrer une authentification à deux facteurs ou « 2FA » (<em>2 Factor Authentication</em>).
L&#8217;authentification à deux facteurs est un mécanisme d&#8217;authentification qui est devenu très populaire récemment pour réduire les risques de corruption de votre compte si votre mot de passe est dérobé.
Une fois activée, GitHub vous demandera deux méthodes différentes d&#8217;authentification, de sorte que si l&#8217;une devait être compromise, un attaquant ne pourrait tout de même pas accéder à votre compte.</p>
<p>Vous pouvez trouver les réglages de l&#8217;authentification à deux facteurs dans la section « Security » (Sécurité) de la section d&#8217;administration.</p>
<figure class="image">
<div class="content">
<img src="images/2fa-1.png" alt="2FA dans la section « Security » (Sécurité)"/>
</div>
<figcaption>Figure 7. 2FA dans la section « Security » (Sécurité)</figcaption>
</figure>
<p>Si vous cliquez sur le bouton « Set up two-factor authentication » (paramétrage de l&#8217;authentification à deux facteurs), vous serez redirigé vers une page de configuration sur laquelle vous pourrez choisir d&#8217;utiliser une application de téléphone mobile pour générer votre code secondaire (un « mot de passe à usage unique basé sur la date ») ou bien de vous faire envoyer un code GitHub par SMS chaque fois que vous avez besoin de vous identifier.</p>
<p>Après avoir choisi votre méthode préférée et suivi les instructions pour activer 2FA, votre compte sera un peu plus sécurisé et vous devrez fournir un code supplémentaire en plus de votre mot de passe quand vous vous identifierez sur GitHub.</p>
</section>
</section>
<section class="sect1" title="Contribution à un projet">
<h2 id="_contribution_à_un_projet">Contribution à un projet</h2>
<p>Après avoir configuré votre compte, examinons comment contribuer à un projet existant.</p>
<section class="sect2" title="Duplication des projets">
<h3 id="_duplication_des_projets">Duplication des projets</h3>
<p>
Si vous souhaitez contribuer à un projet existant sur lequel vous n&#8217;avez pas le droit de pousser, vous pouvez dupliquer (<em>fork</em>) ce projet.
Cela signifie que GitHub va faire pour vous une copie personnelle du projet.
Elle se situe dans votre espace de nom et vous pouvez pousser dessus.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Historiquement, le terme « <em>fork</em> » transmet une idée négative, qui s&#8217;apparente à l&#8217;idée que quelqu&#8217;un mène un projet open-source vers une direction différente, créant un projet concurrent de l&#8217;original et divisant les forces de contributions.
Au sein de GitHub, un « <em>fork</em> » constitue une simple copie d&#8217;un projet au sein de votre espace de nom personnel, ce qui vous permet d&#8217;y apporter publiquement des modifications, c&#8217;est donc tout simplement un moyen de contribuer de manière plus ouverte.</p>
</div>
</aside>
<p>Ainsi, les gestionnaires de projets n&#8217;ont pas à se soucier de devoir ajouter des utilisateurs comme collaborateurs pour leur accorder un accès en poussée.
Les personnes peuvent dupliquer un projet eux-mêmes, pousser sur leur copie personnelle et fournir leur contribution au dépôt originel en créant une requête de tirage (<em>Pull Request</em>), concept qui sera abordé par la suite.
Ceci ouvre un fil de discussion avec possibilité de revue de code, pour que le propriétaire et le contributeur puissent discuter et modifier le code proposé jusqu&#8217;à ce que le propriétaire soit satisfait du résultat et le fusionne dans son dépôt.</p>
<p>Pour dupliquer un projet, visitez la page du projet et cliquez sur le bouton « <em>Fork</em> » en haut à droite de la page.</p>
<figure class="image">
<div class="content">
<img src="images/forkbutton.png" alt="Le bouton  « _Fork_ »."/>
</div>
<figcaption>Figure 8. Le bouton  « <em>Fork</em> ».</figcaption>
</figure>
<p>Quelques secondes plus tard, vous serez redirigé vers la page de votre nouveau projet, contenant votre copie modifiable du code.</p>
</section>
<section class="sect2" title="Processus GitHub">
<h3 id="s_github_flow">Processus GitHub</h3>
<p>
GitHub est construit autour d&#8217;une certaine organisation de la collaboration, centrée autour des requêtes de tirage (<em>Pull Request</em>).</p>
<p>Ce processus de travail fonctionne aussi bien avec une petite équipe soudée collaborant sur un dépôt unique partagé qu&#8217;avec une société éclatée à travers le monde ou un réseau d&#8217;inconnus contribuant sur un projet au moyen de dizaines de projets dupliqués.
Il est centré sur le processus de travail par branches thématiques (voir <a id="xref--ch03-git-branching--s_topic_branch" href="ch03-git-branching.xhtml#s_topic_branch" class="xref">Les branches thématiques</a> traité dans le <a id="xref--ch03-git-branching" href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a>).</p>
<p>Le principe général est le suivant :</p>
<div class="ordered-list arabic">
<ol class="arabic">
<li>
<span class="principal">création d&#8217;une branche thématique à partir de la branche <code class="literal">master</code>,</span>
</li>
<li>
<span class="principal">validation de quelques améliorations (<em>commit</em>),</span>
</li>
<li>
<span class="principal">poussée de la branche thématique sur votre projet GitHub (<em>push</em>),</span>
</li>
<li>
<span class="principal">ouverture d&#8217;une requête de tirage sur GitHub (<em>Pull Request</em>),</span>
</li>
<li>
<span class="principal">discussion et éventuellement possibilité de nouvelles validations (<em>commit</em>).</span>
</li>
<li>
<span class="principal">Le propriétaire du projet fusionne (<em>merge</em>) ou ferme (<em>close</em>) la requête de tirage.</span>
</li>
</ol>
</div>
<p>C&#8217;est essentiellement le processus de gestion par gestionnaire d&#8217;intégration traité dans <a id="xref--ch05-distributed-git--s_integration_manager" href="ch05-distributed-git.xhtml#s_integration_manager" class="xref">Mode du gestionnaire d&#8217;intégration</a>, mais au lieu d&#8217;utiliser des courriels pour communiquer et faire une revue des modifications, les équipes utilisent les outils Web de GitHub.</p>
<p>Détaillons un exemple illustrant une proposition de modification à un projet open-source hébergé sur GitHub.</p>
<section class="sect3" title="Création d&#8217;une requête de tirage">
<h4 id="_création_d_une_requête_de_tirage">Création d&#8217;une requête de tirage</h4>
<p>Tony recherche un programme à faire tourner sur son micro-contrôleur Arduino et a trouvé un programme génial sur GitHub à <a href="https://github.com/schacon/blink" class="link">https://github.com/schacon/blink</a>.</p>
<figure class="image">
<div class="content">
<img src="images/blink-01-start.png" alt="Le projet auquel nous souhaitons contribuer."/>
</div>
<figcaption>Figure 9. Le projet auquel nous souhaitons contribuer.</figcaption>
</figure>
<p>Le seul problème est que le clignotement est trop rapide, nous pensons qu&#8217;il serait mieux d&#8217;attendre 3 secondes au lieu d&#8217;une entre chaque changement d&#8217;état.
Améliorons donc le programme et soumettons cette amélioration au projet initial.</p>
<p>Premièrement, nous cliquons sur le bouton « Fork » comme mentionné ci-dessus pour obtenir une copie du projet.
Notre nom d&#8217;utilisateur ici est « tonychacon » donc notre copie de ce projet est à <code class="literal">https://github.com/tonychacon/blink</code> et c&#8217;est ici que nous pouvons la modifier.
Nous pouvons aussi la cloner localement, créer une branche thématique, modifier le code et pousser finalement cette modification sur GitHub.</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ git clone https://github.com/tonychacon/blink <i class="conum" data-value="1">①</i>
Clonage dans <span style="font-style: italic">&#39;blink&#39;</span>...

$ cd blink
$ git checkout -b slow-blink <i class="conum" data-value="2">②</i>
Switched to a new branch <span style="font-style: italic">&#39;slow-blink&#39;</span>

$ sed -i <span style="font-style: italic">&#39;&#39;</span> <span style="font-style: italic">&#39;s/1000/3000/&#39;</span> blink.ino <span style="font-style: italic"># (MacOSX) </span> <i class="conum" data-value="3">③</i>
<span style="font-style: italic"># Si vous êtes sur un système Linux, faites plutôt ceci :</span>
<span style="font-style: italic"># $ sed -i &#39;s/1000/3000/&#39; blink.ino </span> <i class="conum" data-value="3">③</i>

$ git diff --word-diff <i class="conum" data-value="4">④</i>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// the loop routine runs over and over again forever:
void loop() {
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
  [-delay(1000);-]{+delay(3000);+}               // wait <span style="font-weight: bold">for</span> a second
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
  [-delay(1000);-]{+delay(3000);+}               // wait <span style="font-weight: bold">for</span> a second
}

$ git commit -a -m <span style="font-style: italic">&#39;three seconds is better&#39;</span> <i class="conum" data-value="5">⑤</i>
[master 5ca509d] three seconds is better
 1 file changed, 2 insertions(+), 2 deletions(-)

$ git push origin slow-blink <i class="conum" data-value="6">⑥</i>
Username <span style="font-weight: bold">for</span> <span style="font-style: italic">&#39;https://github.com&#39;</span>: tonychacon
Password <span style="font-weight: bold">for</span> <span style="font-style: italic">&#39;https://tonychacon@github.com&#39;</span>:
Counting objects: 5, <span style="font-weight: bold">done</span>.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), <span style="font-weight: bold">done</span>.
Writing objects: 100% (3/3), 340 bytes | 0 bytes/s, <span style="font-weight: bold">done</span>.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/tonychacon/blink
 * [new branch]      slow-blink -&gt; slow-blink</code></pre>
</figure>
<div class="callout-list">
<ol>
<li><i class="conum" data-value="1">①</i> Clone notre copie du projet localement</li>
<li><i class="conum" data-value="2">②</i> Crée un branche thématique avec un nom descriptif</li>
<li><i class="conum" data-value="3">③</i> Modifie le code</li>
<li><i class="conum" data-value="4">④</i> Vérifie si la modification est bonne</li>
<li><i class="conum" data-value="5">⑤</i> Valide les modifications dans la branche thématique</li>
<li><i class="conum" data-value="6">⑥</i> Pousse notre branche thématique sur notre dépôt dupliqué GitHub</li>
</ol>
</div>
<p>Maintenant, si nous allons sur notre projet dupliqué sur GitHub, nous pouvons voir que GitHub a remarqué que nous avons poussé une nouvelle branche thématique et affiche un gros bouton vert pour vérifier nos modifications et ouvrir une requête de tirage sur le projet original.</p>
<p>Vous pouvez aussi vous rendre à la page « Branches » à <code class="literal">https://github.com/&lt;utilisateur&gt;/&lt;projet&gt;/branches</code> pour trouver votre branche et ouvrir une requête de tirage à partir de là.</p>
<figure class="image">
<div class="content">
<img src="images/blink-02-pr.png" alt="Bouton Pull Request"/>
</div>
<figcaption>Figure 10. Le bouton Pull Request (requête de tirage)</figcaption>
</figure>
<p>
Si nous cliquons sur le bouton vert, une fenêtre nous permet de créer un titre et une description de la modification que nous souhaitons faire intégrer pour que le propriétaire du projet trouve une bonne raison de la prendre en considération.
C&#8217;est généralement une bonne idée de passer un peu de temps à écrire une description aussi argumentée que possible pour que le propriétaire sache pourquoi la modification est proposée et en quoi elle apporterait une amélioration au projet.</p>
<p>Nous voyons aussi une liste de soumissions (<em>commits</em>) dans notre branche thématique qui sont « en avance » (<em>ahead</em>) par rapport à la branche <code class="literal">master</code> (ici, un seul uniquement) et une visualisation unifiée de toutes les modifications (<em>unified diff</em>) qui seraient intégrées en cas de fusion.</p>
<figure class="image">
<div class="content">
<img src="images/blink-03-pull-request-open.png" alt="Création d'une requête de tirage"/>
</div>
<figcaption>Figure 11. Page de création d&#8217;une requête de tirage</figcaption>
</figure>
<p>Quand vous cliquez sur le bouton « Create pull request » sur cet écran, le propriétaire du projet que vous avez dupliqué reçoit une notification lui indiquant que quelqu&#8217;un suggère une modification et qui renvoie à la page contenant toutes les informations correspondantes.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Bien que les requêtes de tirage soient souvent utilisées de cette façon pour des projets publics quand un contributeur propose une modification complète, elles sont aussi souvent utilisées dans les projets internes <em>au début</em> d&#8217;un cycle de développement.
Comme on peut continuer à pousser sur la branche thématique même <strong>après</strong> l&#8217;ouverture de la requête de tirage, on ouvre une requête de tirage très tôt et cela permet de travailler en équipe dans un contexte, plutôt que de l&#8217;ouvrir à la toute fin du processus.</p>
</div>
</aside>
</section>
<section class="sect3" title="Itérations sur une requête de tirage">
<h4 id="_itérations_sur_une_requête_de_tirage">Itérations sur une requête de tirage</h4>
<p>À présent, le propriétaire du projet peut regarder les modifications suggérées et les fusionner ou les rejeter ou encore les commenter.
Supposons qu&#8217;il apprécie l&#8217;idée mais préférerait un temps d&#8217;extinction de la lumière légèrement plus long que le temps d&#8217;allumage.</p>
<p>Alors que cette conversation a lieu par échange de courriel dans les flux de travail présentés dans <a id="xref--ch05-distributed-git" href="ch05-distributed-git.xhtml" class="xref">Git distribué</a>, ici elle a lieu en ligne sur GitHub.
Le propriétaire du projet peut faire une revue des différences en vue unifiées et laisser un commentaire en cliquant sur une des lignes.</p>
<figure class="image">
<div class="content">
<img src="images/blink-04-pr-comment.png" alt="ligne commentée sur une requête de tirage"/>
</div>
<figcaption>Figure 12. Commentaire sur une ligne spécifique de code de la requête de tirage</figcaption>
</figure>
<p>Une fois que le mainteneur a commenté, la personne qui a ouvert la requête de tirage (et en fait toute personne surveillant le dépôt) recevra une notification.
Nous verrons comment personnaliser ce comportement plus tard, mais si la notification par courriel est activée, Tony recevra un courriel comme celui-ci :</p>
<figure id="s_email_notification" class="image">
<div class="content">
<img src="images/blink-04-email.png" alt="Notification par courriel"/>
</div>
<figcaption>Figure 13. Commentaires notifiés par courriel</figcaption>
</figure>
<p>N&#8217;importe qui peut aussi laisser un commentaire global sur la requête de tirage.
Sur <a id="xref-s_pr_discussion" href="#s_pr_discussion" class="xref">Page de discussion d&#8217;une requête de tirage</a>, nous pouvons voir un exemple où le propriétaire du projet commente une ligne de code puis laisse un commentaire général dans la section de discussion.
Vous pouvez voir que les commentaires de code sont aussi publiés dans la conversation.</p>
<figure id="s_pr_discussion" class="image">
<div class="content">
<img src="images/blink-05-general-comment.png" alt="Page de discussion du PR"/>
</div>
<figcaption>Figure 14. Page de discussion d&#8217;une requête de tirage</figcaption>
</figure>
<p>Maintenant, le contributeur sait ce qu&#8217;il doit faire pour que ses modifications soient intégrées.
Heureusement, ici c&#8217;est une chose facile à faire.
Alors que par courriel, il faudrait retravailler les séries de commit et les soumettre à nouveau à la liste de diffusion, avec GitHub il suffit de soumettre les correctifs sur la branche thématique et de la repousser.</p>
<p>Le propriétaire du projet sera notifié à nouveau des modifications du contributeur et pourra voir que les problèmes ont été réglés quand il visitera la page de la requête de tirage.
En fait, comme la ligne de code initialement commentée a été modifiée entre temps, GitHub le remarque et fait disparaître la différence obsolète.</p>
<figure id="s_pr_final" class="image">
<div class="content">
<img src="images/blink-06-final.png" alt="PR finale"/>
</div>
<figcaption>Figure 15. Requête de tirage finale</figcaption>
</figure>
<p>Un point intéressant à noter est que si vous cliquez sur l&#8217;onglet « Files Changed » (fichiers modifiés), vous obtenez la différence sous forme unifiée&#8201;&#8212;&#8201;c&#8217;est-à-dire la différence totalement agrégée qui serait introduite dans votre branche principale si cette branche thématique était fusionnée.
En équivalent <code class="literal">git diff</code>, cela montre automatiquement la même chose que la commande <code class="literal">git diff master...&lt;branche&gt;</code> pour la branche sur laquelle vous avez ouvert la requête de tirage.
Référez-vous à <a id="xref--ch05-distributed-git--s_what_is_introduced" href="ch05-distributed-git.xhtml#s_what_is_introduced" class="xref">Déterminer les modifications introduites</a> pour plus d&#8217;informations sur ce type de différence.</p>
<p>L&#8217;autre point à noter est que GitHub vérifie si la requête de tirage peut être fusionnée proprement et fournit un bouton pour réaliser la fusion sur le serveur.
Ce bouton n&#8217;apparaît que si vous avez accès en écriture au dépôt et si une fusion peut s&#8217;effectuer simplement.
Si vous cliquez dessus, GitHub réalise une fusion sans avance rapide (non-fast-forward), ce qui signifie que même si la fusion <em>pouvait</em> se faire en avance rapide (fast-forward), il va tout de même créer une soumission de fusion (merge <em>commit</em>).</p>
<p>Si vous préférez, vous pouvez simplement tirer la branche et la fusionner localement.
Si vous fusionnez cette branche dans <code class="literal">master</code> et poussez le tout sur GitHub, la requête de tirage sera fermée automatiquement.</p>
<p>C&#8217;est le processus de travail de base que la plupart des projets GitHub utilisent.
Des branches thématiques sont créées, des requêtes de tirage sont ouvertes dessus, une discussion s&#8217;engage, du travail additionnel peut être ajouté sur la branche et à la fin, la requête est soit fermée, soit fusionnée.</p>
<aside class="admonition note" title="Note: Pas seulement avec des dépôts dupliqués" epub:type="note">
<h2>Pas seulement avec des dépôts dupliqués</h2>
<div class="content">
<p>Il est important de noter que vous pouvez aussi ouvrir une requête de tirage entre deux branches du même dépôt.
Si vous travaillez sur une fonctionnalité avec quelqu&#8217;un et que vous avez tous deux accès en écriture au projet, vous pouvez pousser une branche thématique sur le dépôt et ouvrir une requête de tirage dessus vers la branche <code class="literal">master</code> de ce même projet pour démarrer une revue de code et une discussion.
Aucune duplication n&#8217;est nécessaire.</p>
</div>
</aside>
</section>
</section>
<section class="sect2" title="Requêtes de tirage avancées">
<h3 id="_requêtes_de_tirage_avancées">Requêtes de tirage avancées</h3>
<p>Après avoir présenté les bases de la contribution à un projet sur GitHub, voyons quelques trucs et astuces concernant les requêtes de tirage afin d&#8217;améliorer votre efficacité .</p>
<section class="sect3" title="Requêtes de tirage comme patchs">
<h4 id="_requêtes_de_tirage_comme_patchs">Requêtes de tirage comme patchs</h4>
<p>Il est important de comprendre que pour de nombreux projets, les requêtes de tirage ne sont pas vues comme des files d&#8217;attente de patchs parfaits qui doivent s&#8217;appliquer correctement dans l&#8217;ordre, comme le conçoivent la plupart des projets basés sur des listes de diffusion qui fonctionnent par série de patchs envoyés par courriel.
La plupart des projets GitHub voient les branches de requête de tirage comme des conversations itératives autour d&#8217;une modification proposée, aboutissant à une différence unifiée qui est appliquée par fusion.</p>
<p>C&#8217;est une distinction importante, car généralement la modification est soumise à revue avant que le code ne soit considéré comme parfait, ce qui est bien plus rare avec les contributions par série de patchs envoyées sur une liste de diffusion.
Cela permet une conversation précoce avec les mainteneurs de sorte que l&#8217;on atteint une solution correcte par un travail plus collectif.
Quand du code est proposé par requête de tirage et que les mainteneurs ou la communauté suggèrent une modification, la série de patchs n&#8217;est généralement pas régénérée mais la différence est poussée comme nouvelle soumission (<em>commit</em>) à la branche, permettant ainsi d&#8217;avancer dans la discussion, tout en conservant intact le contexte du travail passé.</p>
<p>Par exemple, si vous regardez à nouveau la figure <a id="xref-s_pr_final" href="#s_pr_final" class="xref">Requête de tirage finale</a>, vous noterez que le contributeur n&#8217;a pas rebasé sa soumission et envoyé une nouvelle requête de tirage.
Au lieu de cela, il a ajouté de nouvelles soumissions (<em>commit</em>) et les a poussé dans la branche existante.
De cette manière, si on examine cette requête de tirage dans le futur, on peut aisément retrouver la totalité du contexte qui a amené aux décisions prises.
L&#8217;utilisation du bouton « <em>Merge</em> » sur le site crée à dessein un « commit de fusion » (<em>merge</em>) qui référence la requête de tirage pour qu&#8217;il reste facile de revenir sur celle-ci et d&#8217;y rechercher la discussion originale si nécessaire.</p>
</section>
<section class="sect3" title="Se maintenir à jour avec le développement amont">
<h4 id="_se_maintenir_à_jour_avec_le_développement_amont">Se maintenir à jour avec le développement amont</h4>
<p>Si votre requête de tirage devient obsolète ou ne peut plus être fusionnée proprement, vous voudrez la corriger pour que le mainteneur puisse la fusionner facilement.
GitHub testera cela pour vous et vous indique à la fin de la requête de tirage si la fusion automatique est possible ou non.</p>
<figure id="s_pr_fail" class="image">
<div class="content">
<img src="images/pr-01-fail.png" alt="Échec de fusion de PR"/>
</div>
<figcaption>Figure 16. La requête de tirage ne peut pas être fusionnée proprement</figcaption>
</figure>
<p>Si vous voyez quelque chose comme sur la figure <a id="xref-s_pr_fail" href="#s_pr_fail" class="xref">La requête de tirage ne peut pas être fusionnée proprement</a>, vous voudrez corriger votre branche pour qu&#8217;elle ait un statut vert et que le mainteneur n&#8217;ait pas à fournir de travail supplémentaire.</p>
<p>Vous avez deux options. Vous pouvez soit rebaser votre branche sur le sommet de la branche cible (normalement, la branche <code class="literal">master</code> du dépôt que vous avez dupliqué), soit fusionner la branche cible dans votre branche.</p>
<p>La plupart des développeurs sur GitHub choisirons cette dernière option, pour la même raison que celle citée à la section précédente.
Ce qui importe est l&#8217;historique et la fusion finale, donc le rebasage n&#8217;apporte pas beaucoup plus qu&#8217;un historique légèrement plus propre avec en prime une plus grande difficulté d&#8217;application et l&#8217;introduction possible d&#8217;erreurs.</p>
<p>Si vous voulez fusionnez la branche cible pour rendre votre requête de tirage fusionnable, vous ajouterez le dépôt original comme nouveau dépôt distant, récupérerez la branche cible que vous fusionnerez dans votre branche thématique, corrigerez les erreurs et finalement pousserez la branche thématique sur la même branche thématique pour laquelle vous avez ouvert la requête de tirage.</p>
<p>Par exemple, considérons que dans l&#8217;exemple « tonychacon » que nous avons utilisé, l&#8217;auteur original a fait des modifications qui créent un conflit dans la requête de tirage.
Examinons ces étapes.</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ git remote add upstream https://github.com/schacon/blink <i class="conum" data-value="1">①</i>

$ git fetch upstream <i class="conum" data-value="2">②</i>
remote: Counting objects: 3, <span style="font-weight: bold">done</span>.
remote: Compressing objects: 100% (3/3), <span style="font-weight: bold">done</span>.
Unpacking objects: 100% (3/3), <span style="font-weight: bold">done</span>.
remote: Total 3 (delta 0), reused 0 (delta 0)
From https://github.com/schacon/blink
 * [new branch]      master     -&gt; upstream/master

$ git merge upstream/master <i class="conum" data-value="3">③</i>
Auto-merging blink.ino
CONFLICT (content): Merge conflict in blink.ino
Automatic merge failed; fix conflicts and <span style="font-weight: bold">then</span> commit the result.

$ vim blink.ino <i class="conum" data-value="4">④</i>
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch <span style="font-style: italic">&#39;upstream/master&#39;</span> <span style="font-weight: bold; font-style: italic">\</span>
    into slower-blink

$ git push origin slow-blink <i class="conum" data-value="5">⑤</i>
Counting objects: 6, <span style="font-weight: bold">done</span>.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), <span style="font-weight: bold">done</span>.
Writing objects: 100% (6/6), 682 bytes | 0 bytes/s, <span style="font-weight: bold">done</span>.
Total 6 (delta 2), reused 0 (delta 0)
To https://github.com/tonychacon/blink
   ef4725c..3c8d735  slower-blink -&gt; slow-blink</code></pre>
</figure>
<div class="callout-list">
<ol>
<li><i class="conum" data-value="1">①</i> Ajoute le dépôt original comme dépôt distant sous le nom « upstream ».</li>
<li><i class="conum" data-value="2">②</i> Récupère les derniers travaux depuis ce dépôt distant.</li>
<li><i class="conum" data-value="3">③</i> Fusionne la branche principale dans la branche thématique.</li>
<li><i class="conum" data-value="4">④</i> Corrige le conflit créé.</li>
<li><i class="conum" data-value="5">⑤</i> Pousse sur la même branche thématique.</li>
</ol>
</div>
<p>Quand vous faites cela, la requête de tirage est automatiquement mise à jour et un nouveau contrôle est effectué pour vérifier la possibilité de fusion.</p>
<figure id="s_pr_merge_fix" class="image">
<div class="content">
<img src="images/pr-02-merge-fix.png" alt="La requête de tirage a été corrigée"/>
</div>
<figcaption>Figure 17. La requête de tirage se fusionne proprement maintenant</figcaption>
</figure>
<p>Une des grandes forces de Git est que vous pouvez faire ceci régulièrement.
Si vous avez un projet à très long terme, vous pouvez facilement fusionner depuis la branche cible de nombreuses fois et n&#8217;avoir à gérer que les conflits apparus depuis la dernière fusion, rendant ainsi le processus réalisable.</p>
<p>Si vous souhaitez absolument rebaser la branche pour la nettoyer, vous pouvez toujours le faire, mais il vaut mieux ne pas pousser en forçant sur la branche sur laquelle la requête de tirage est déjà ouverte.
Si d&#8217;autres personnes l&#8217;ont déjà tirée et ont travaillé dessus, vous vous exposez aux problèmes décrits dans <a id="xref--ch03-git-branching--s_rebase_peril" href="ch03-git-branching.xhtml#s_rebase_peril" class="xref">Les dangers du rebasage</a>.
À la place, poussez cette branche rebasée vers une nouvelle branche sur GitHub et ouvrez une nouvelle requête de tirage qui référence l&#8217;ancienne requête, puis fermez l&#8217;originale.</p>
</section>
<section class="sect3" title="Références">
<h4 id="_références">Références</h4>
<p>Votre prochaine question pourrait être : « Comment faire pour référencer l&#8217;ancienne requête de tirage ? ».
En fait, il y a de très très nombreuses manières de faire référence à d&#8217;autres choses dans GitHub depuis à peu près toutes les zones textuelles.</p>
<p>Commençons par la manière de faire référence à une autre requête de tirage ou à une anomalie (Issue).
Toutes les requêtes de tirage et toutes les anomalies sont identifiées par des numéros qui sont uniques au sein d&#8217;un projet.
Par exemple, vous ne pouvez avoir une requête de tirage numéro 3 et une anomalie numéro 3.
Si vous voulez faire référence à n&#8217;importe quelle requête de tirage ou anomalie depuis l&#8217;une ou l&#8217;autre du même projet, il vous suffit d&#8217;insérer <code class="literal">#&lt;numéro&gt;</code> dans n&#8217;importe quel commentaire ou n&#8217;importe quelle description.
Vous pouvez aussi référencer une requête ou une anomalie d&#8217;un autre dépôt dupliqué du dépôt actuel en utilisant la syntaxe <code class="literal">&lt;utilisateur&gt;#&lt;numéro&gt;</code>, ou même un autre dépôt indépendant avec la syntaxe <code class="literal">&lt;utilisateur&gt;/&lt;dépôt&gt;#&lt;numéro&gt;</code>.</p>
<p>Voyons cela sur un exemple.
Disons que nous avons rebasé la branche de l&#8217;exemple précédent, créé une nouvelle requête de tirage et nous souhaitons maintenant faire référence à l&#8217;ancienne requête de tirage depuis la nouvelle.
Nous souhaitons aussi faire référence à une anomalie dans un dépôt dupliqué de celui-ci et à une anomalie soumise dans un projet complètement différent.
Nous pouvons saisir une description comme sur la figure <a id="xref-s_pr_references" href="#s_pr_references" class="xref">Références croisées dans une requête de tirage.</a>.</p>
<figure id="s_pr_references" class="image">
<div class="content">
<img src="images/mentions-01-syntax.png" alt="Références dans un PR"/>
</div>
<figcaption>Figure 18. Références croisées dans une requête de tirage.</figcaption>
</figure>
<p>Quand nous soumettons cette requête de tirage, nous voyons tout ceci mis en forme comme sur la figure <a id="xref-s_pr_references_render" href="#s_pr_references_render" class="xref">Références croisées mises en forme dans une requête de tirage.</a>.</p>
<figure id="s_pr_references_render" class="image">
<div class="content">
<img src="images/mentions-02-render.png" alt="Références mises en formes"/>
</div>
<figcaption>Figure 19. Références croisées mises en forme dans une requête de tirage.</figcaption>
</figure>
<p>Notez bien que l&#8217;URL GitHub complète que nous avons indiquée a été raccourcie pour ne contenir que l&#8217;information nécessaire.</p>
<p>À présent, si Tony retourne sur la requête de tirage originale et la ferme, nous pouvons voir que du fait de son référencement dans la nouvelle, GitHub a créé automatiquement un événement de suivi dans le journal de la nouvelle requête de tirage.
Cela signifie qu&#8217;une personne qui visitera cette requête de tirage et verra qu&#8217;elle est fermée, pourra facilement se rendre sur celle qui l&#8217;a remplacée.
Le lien ressemblera à quelque chose comme sur la figure <a id="xref-s_pr_closed" href="#s_pr_closed" class="xref">Références croisée dans une requête de tirage fermée.</a>.</p>
<figure id="s_pr_closed" class="image">
<div class="content">
<img src="images/mentions-03-closed.png" alt="PR fermée"/>
</div>
<figcaption>Figure 20. Références croisée dans une requête de tirage fermée.</figcaption>
</figure>
<p>En plus des numéros d&#8217;anomalies, vous pouvez aussi faire référence à une soumission (commit) spécifique par son SHA-1.
Vous devez spécifier la totalité des 40 caractères du SHA-1, mais si GitHub rencontre cette chaîne, il créera un lien direct vers la soumission.
Vous pouvez aussi faire référence à des soumissions dans des dépôts dupliqués ou d&#8217;autres dépôts de la même manière que nous l&#8217;avons fait pour les anomalies.</p>
</section>
</section>
<section class="sect2" title="Markdown">
<h3 id="_markdown">Markdown</h3>
<p>Faire des liens vers les autres anomalies n&#8217;est que le début des choses intéressantes que vous pouvez faire dans presque toutes les boîtes de saisie dans GitHub.
Dans les descriptions d&#8217;anomalies et de requêtes de tirage, les commentaires, les commentaires de code et plus, vous pouvez utiliser ce qu&#8217;on appelle le « Markdown, saveur GitHub » (<em>GitHub Flavored Markdown</em>).
Markdown, c&#8217;est comme écrire du texte simple mais celui-ci est rendu plus richement.</p>
<p>Référez-vous à l&#8217;exemple sur la figure <a id="xref-s_example_markdown" href="#s_example_markdown" class="xref">Un exemple de Markdown écrit et rendu.</a> pour savoir comment les commentaires ou le texte peuvent être écrits puis rendus en utilisant Markdown.</p>
<figure id="s_example_markdown" class="image">
<div class="content">
<img src="images/markdown-01-example.png" alt="Exemple de Markdown"/>
</div>
<figcaption>Figure 21. Un exemple de Markdown écrit et rendu.</figcaption>
</figure>
<section class="sect3" title="Markdown, saveur GitHub">
<h4 id="_markdown_saveur_github">Markdown, saveur GitHub</h4>
<p>La saveur GitHub de Markdown permet de réaliser encore plus de choses au-delà de la syntaxe Markdown basique.
Celles-ci peuvent être vraiment utiles pour la création de requêtes de tirage, de commentaires d&#8217;anomalies ou de descriptions.</p>
<section class="sect4" title="Listes de tâches">
<h5 id="_listes_de_tâches">Listes de tâches</h5>
<p>La première spécificité vraiment utile du Markdown de GitHub, particulièrement dans le cadre de requêtes de tirage, est la création de listes de tâches.
Une liste de tâches est une liste de cases à cocher pour chaque action à accomplir.
Dans une anomalie ou une requête de tirage, cela indique les choses qui doit être faites avant de pouvoir considérer l&#8217;élément comme fermé.</p>
<p>Vous pouvez créer une liste de tâches comme ceci :</p>
<figure class="listing">
<pre class="source language-"><code>- [X] Écrire le code
- [ ] Écrire tous les tests
- [ ] Documenter le code</code></pre>
</figure>
<p>Si nous incluons ceci dans la description de notre requête de tirage ou de notre anomalie, nous le verrons rendu comme sur la figure <a id="xref-s_task_lists" href="#s_task_lists" class="xref">Rendu d&#8217;une liste de tâches dans un commentaire Markdown.</a></p>
<figure id="s_task_lists" class="image">
<div class="content">
<img src="images/markdown-02-tasks.png" alt="Exemple de liste de tâches."/>
</div>
<figcaption>Figure 22. Rendu d&#8217;une liste de tâches dans un commentaire Markdown.</figcaption>
</figure>
<p>C&#8217;est très utilisé dans les requêtes de tirage pour indiquer tout ce que vous souhaitez voir accompli sur la branche avant que la requête de tirage ne soit prête à être fusionnée.
Le truc vraiment cool est que vous pouvez simplement cliquer sur les cases à cocher pour mettre à jour le commentaire&#8201;&#8212;&#8201;il est inutile de modifier directement le Markdown pour cocher les cases.</p>
<p>De plus, GitHub surveille la présence de listes de tâches dans vos anomalies et vos requêtes de tirage et les affiche comme métadonnées sur les pages qui en donnent la liste.
Par exemple, si vous avez une requête de tirage contenant des tâches et que vous regardez la page de résumé de toutes les requêtes de tirage, vous pouvez y voir l&#8217;état d&#8217;avancement.
Cela aide les gens à découper les requêtes de tirage en sous-tâches et aide les autres personnes à suivre le progrès sur la branche.
Vous pouvez voir un exemple de cette fonctionnalité sur la figure <a id="xref-s_task_list_progress" href="#s_task_list_progress" class="xref">Résumé de listes de tâches dans la liste des requêtes de tirage.</a>.</p>
<figure id="s_task_list_progress" class="image">
<div class="content">
<img src="images/markdown-03-task-summary.png" alt="Exemple de liste de tâches"/>
</div>
<figcaption>Figure 23. Résumé de listes de tâches dans la liste des requêtes de tirage.</figcaption>
</figure>
<p>C&#8217;est incroyablement utile quand vous ouvrez tôt une requête de tirage et les utilisez pour suivre votre progrès au cours du développement de la fonctionnalité.</p>
</section>
<section class="sect4" title="Extraits de code">
<h5 id="_extraits_de_code">Extraits de code</h5>
<p>Vous pouvez aussi ajouter des extraits de code dans les commentaires.
C&#8217;est particulièrement utile si vous souhaitez montrer quelque chose que vous <em>pourriez</em> essayer de faire avant de les développer réellement dans votre branche sous la forme d&#8217;une soumission.
C&#8217;est aussi souvent utilisé pour ajouter un exemple de code de ce qui ne fonctionne pas ou de ce que cette requête de tirage pourrait mettre en œuvre.</p>
<p>Pour ajouter un extrait de code, vous devez le délimiter par des guillemets simples inversés.</p>
<figure class="listing">
<pre class="source language-"><code>```java
for(int i=0 ; i &lt; 5 ; i++)
{
   System.out.println("i is : " + i);
}
```</code></pre>
</figure>
<p>Si de plus vous ajoutez un nom de langage comme nous l&#8217;avons fait avec <em>java</em>, GitHub essaye de colorer syntaxiquement l&#8217;extrait. Dans le cas ci-dessus, cela donnerait le rendu sur la figure  <a id="xref-s_md_code" href="#s_md_code" class="xref">Exemple de rendu d&#8217;un code délimité</a>.</p>
<figure id="s_md_code" class="image">
<div class="content">
<img src="images/markdown-04-fenced-code.png" alt="Rendu d'un code délimité"/>
</div>
<figcaption>Figure 24. Exemple de rendu d&#8217;un code délimité</figcaption>
</figure>
</section>
<section class="sect4" title="Citation">
<h5 id="_citation">Citation</h5>
<p>Si vous répondez à une petite partie d&#8217;un long commentaire, vous pouvez citer la partie concernée de l&#8217;autre commentaire de manière sélective en faisant précéder chaque ligne par le caractère <code class="literal">&gt;</code>.
En réalité, c&#8217;est même tellement courant et utile qu&#8217;il existe un raccourci clavier pour cela. Si vous sélectionnez un texte dans un commentaire auquel vous voulez directement répondre et que vous appuyez sur la touche <code class="literal">r</code>, ce texte sera automatiquement cité pour vous dans votre boîte de commentaire.</p>
<p>Les citations ressemblent à quelque chose comme ça :</p>
<figure class="listing">
<pre class="source language-"><code>&gt; Whether 'tis Nobler in the mind to suffer
&gt; The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?</code></pre>
</figure>
<p>Une fois rendu, le commentaire ressemble à quelque chose comme sur la figure <a id="xref-s_md_quote" href="#s_md_quote" class="xref">Exemple de rendu de citation.</a>.</p>
<figure id="s_md_quote" class="image">
<div class="content">
<img src="images/markdown-05-quote.png" alt="Rendu de citation"/>
</div>
<figcaption>Figure 25. Exemple de rendu de citation.</figcaption>
</figure>
</section>
<section class="sect4" title="Émoticône (Emoji)">
<h5 id="_émoticône_emoji">Émoticône (Emoji)</h5>
<p>Enfin, vous pouvez également utiliser des émoticônes dans vos commentaires. C&#8217;est en réalité utilisé assez largement dans les commentaires que vous pouvez voir pour de nombreuses anomalies et requêtes de tirage GitHub. Il existe même un assistant pour émoticônes dans GitHub. Lorsque vous saisissez un commentaire et que vous commencez à saisir le caractère <code class="literal">:</code>, un outil pour l&#8217;auto-complétion vous aide à trouver ce que vous recherchez.</p>
<figure id="s_md_emoji_auto" class="image">
<div class="content">
<img src="images/markdown-06-emoji-complete.png" alt="Auto-complétion d'émoticônes"/>
</div>
<figcaption>Figure 26. Auto-complétion d&#8217;émoticônes en action.</figcaption>
</figure>
<p>Les émoticônes apparaissent sous la forme <code class="literal">:&lt;nom&gt;:</code> n&#8217;importe où dans le commentaire. Par exemple, vous pourriez écrire quelque chose comme cela :</p>
<figure class="listing">
<pre class="source language-"><code>I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face:</code></pre>
</figure>
<p>Une fois rendu, cela ressemblerait à quelque chose comme sur la figure <a id="xref-s_md_emoji" href="#s_md_emoji" class="xref">Commentaire très chargé en émoticônes.</a>.</p>
<figure id="s_md_emoji" class="image">
<div class="content">
<img src="images/markdown-07-emoji.png" alt="Émoticônes"/>
</div>
<figcaption>Figure 27. Commentaire très chargé en émoticônes.</figcaption>
</figure>
<p>Bien que cela ne soit pas indispensable, cela ajoute une touche d&#8217;humour et d&#8217;émotion à un moyen de communication avec lequel il est difficile de transmettre des émotions.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Il y a en fait un assez grand nombre de services Web qui emploient maintenant des émoticônes. Un formidable aide mémoire de référence pour trouver des émoticônes qui expriment ce que vous souhaitez dire peut être trouvé ici :</p>
<p><a href="http://www.emoji-cheat-sheet.com" class="link">http://www.emoji-cheat-sheet.com</a></p>
</div>
</aside>
</section>
<section class="sect4" title="Images">
<h5 id="_images">Images</h5>
<p>Ce n&#8217;est pas à proprement parler du Markdown, saveur GitHub, mais c&#8217;est incroyablement utile. En plus de l&#8217;ajout de liens images aux commentaires (dont il peut être difficile de trouver et d&#8217;intégrer les URL), GitHub vous permet de faire un glisser-déposer de vos images sur les zones de texte pour les intégrer.</p>
<figure id="s_md_drag" class="image">
<div class="content">
<img src="images/markdown-08-drag-drop.png" alt="Glisser-déposer d'images"/>
</div>
<figcaption>Figure 28. Glisser-déposer d&#8217;images pour les télécharger et les intégrer.</figcaption>
</figure>
<p>Si vous regardez à nouveau l&#8217;image <a href="#s_pr_references" class="xref">Références croisées dans une requête de tirage.</a>, vous y verrez une petite indication “Parsed as Markdown” (Traitement Markdown) en haut de la zone de texte. En cliquant dessus, vous serez redirigé vers une page (en anglais) affichant un aide-mémoire de référence vous résumant tout ce que vous pouvez faire avec Markdown sur GitHub.</p>
</section>
</section>
</section>
</section>
<section class="sect1" title="Maintenance d&#8217;un projet">
<h2 id="s_maintaining_gh_project">Maintenance d&#8217;un projet</h2>
<p>Maintenant que vous êtes à l&#8217;aise sur les aspects contribution à un projet, regardons maintenant l&#8217;autre côté : la création, la maintenance et l&#8217;administration de vos propres projets.</p>
<section class="sect2" title="Création d&#8217;un nouveau dépôt">
<h3 id="_création_d_un_nouveau_dépôt">Création d&#8217;un nouveau dépôt</h3>
<p>Créons un nouveau dépôt pour permettre le partage du code de notre projet avec d&#8217;autres. Commencez par cliquer sur le bouton « New repository » (nouveau dépôt) sur le côté droit de votre tableau de bord ou sur le bouton <code class="literal">+</code> dans la barre d&#8217;outils du haut à côté de votre nom d&#8217;utilisateur comme sur la figure <a id="xref-s_new_repo_dropdown" href="#s_new_repo_dropdown" class="xref">La liste déroulante « New repository » (nouveau dépôt)</a>.</p>
<figure class="image">
<div class="content">
<img src="images/newrepo.png" alt="La zone « Your repositories » (vos dépôts)."/>
</div>
<figcaption>Figure 29. La zone « Your repositories » (vos dépôts)</figcaption>
</figure>
<figure id="s_new_repo_dropdown" class="image">
<div class="content">
<img src="images/new-repo.png" alt="La liste déroulante « New repository » (nouveau dépôt)."/>
</div>
<figcaption>Figure 30. La liste déroulante « New repository » (nouveau dépôt)</figcaption>
</figure>
<p>Vous êtes redirigé vers le formulaire pour la création de nouveau dépôt :</p>
<figure class="image">
<div class="content">
<img src="images/newrepoform.png" alt="Le formulaire « new repository » (nouveau dépôt)."/>
</div>
<figcaption>Figure 31. Le formulaire « new repository » (nouveau dépôt).</figcaption>
</figure>
<p>Tout ce que vous avez à faire, c&#8217;est de fournir un nom de projet, les autres champs sont facultatifs. Pour l&#8217;instant, cliquez juste sur le bouton « Create Repository » (créer un dépôt) et paf, vous obtenez un nouveau dépôt sur GitHub nommé <code class="literal">&lt;utilisateur&gt;/&lt;nom_du_projet&gt;</code>.</p>
<p>Puisque vous n&#8217;avez pas encore de code, GitHub vous affiche des instructions sur la façon de créer un tout nouveau dépôt Git ou de se connecter à un projet Git existant. Nous ne détaillerons pas cela ici ; si vous avez besoin d&#8217;un rappel, vérifiez <a id="xref--ch02-git-basics" href="ch02-git-basics.xhtml" class="xref">Les bases de Git</a>.</p>
<p>Maintenant que votre projet est hébergé sur GitHub, vous pouvez donner l&#8217;URL à toutes les personnes avec lesquelles vous voulez partager votre projet. Chaque projet est accessible via HTTP par <code class="literal">https://github.com/&lt;utilisateur&gt;/&lt;nom_du_projet&gt;</code> et via SSH par <code class="literal">git@github.com:&lt;utilisateur&gt;/&lt;nom_du_projet&gt;</code>. Git peut récupérer et pousser en utilisant les deux URL mais l&#8217;accès est contrôlé sur la base des paramètres d&#8217;authentification de l&#8217;utilisateur qui s&#8217;y connecte.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Il est souvent mieux de partager l&#8217;URL basé sur HTTP pour un projet public puisque l&#8217;utilisateur n&#8217;a pas besoin d&#8217;avoir un compte GitHub pour y accéder et pour le cloner. Les utilisateurs devront posséder un compte et avoir déposé une clé SSH pour accéder à votre projet si vous leur donnez l&#8217;URL SSH. L&#8217;URL HTTP est également exactement le même que celui que vous colleriez dans votre navigateur pour y afficher le projet.</p>
</div>
</aside>
</section>
<section class="sect2" title="Ajout de collaborateurs">
<h3 id="_ajout_de_collaborateurs">Ajout de collaborateurs</h3>
<p>Si vous travaillez avec d&#8217;autres personnes à qui vous voulez donner l&#8217;accès en poussée, vous devez les ajouter en tant que « collaborateurs ». Si Ben, Jeff et Louise possèdent tous un compte GitHub et que vous voulez qu&#8217;ils puissent pousser sur votre dépôt, vous pouvez les ajouter à votre projet. En faisant cela, vous leur donnez un accès en poussée ce qui signifie qu&#8217;ils possèdent un accès en lecture et en écriture au projet et au dépôt Git.</p>
<p>Cliquez sur le lien « Settings » (paramètres) en bas de la barre latérale de droite.</p>
<figure class="image">
<div class="content">
<img src="images/reposettingslink.png" alt="Le lien des paramètres du dépôt."/>
</div>
<figcaption>Figure 32. Le lien des paramètres (Settings) du dépôt.</figcaption>
</figure>
<p>Ensuite sélectionnez « Collaborators » dans le menu de gauche, saisissez un nom d&#8217;utilisateur dans la boîte et cliquez sur « Add collaborator » (ajouter un collaborateur). Vous pouvez répéter cette action autant de fois que vous le voulez pour permettre l&#8217;accès à toutes les personnes que vous souhaitez. Si vous devez révoquer leur accès, il suffit de cliquer sur le « X » à droite de leur nom.</p>
<figure class="image">
<div class="content">
<img src="images/collaborators.png" alt="La boîte des collaborateurs du dépôt."/>
</div>
<figcaption>Figure 33. Les collaborateurs du dépôt.</figcaption>
</figure>
</section>
<section class="sect2" title="Gestion des requêtes de tirage">
<h3 id="_gestion_des_requêtes_de_tirage">Gestion des requêtes de tirage</h3>
<p>Maintenant que vous possédez un projet contenant un peu de code et peut-être même quelques collaborateurs qui possèdent un accès en poussée, voyons ce que vous devez faire lorsque vous recevez vous-même une requête de tirage.</p>
<p>Les requêtes de tirage peuvent provenir soit d&#8217;une branche d&#8217;un clone de votre dépôt ou d&#8217;une autre branche du même dépôt. La seule différence est que celles d&#8217;un clone proviennent souvent de personnes vers lesquelles vous ne pouvez pas pousser sur leurs branches et qui ne peuvent pas pousser vers les vôtres alors qu&#8217;avec des requêtes de tirage internes, les deux parties peuvent généralement accéder à la branche.</p>
<p>Pour ces exemples, supposons que vous êtes « tonychacon » et que vous avez créé un nouveau projet de code Arduino qui s&#8217;appelle « fade ».</p>
<section class="sect3" title="Notifications par courriel">
<h4 id="s_email_notifications">Notifications par courriel</h4>
<p>Quelqu&#8217;un se connecte et fait une modification à votre programme et vous envoie une requête de tirage. Vous devriez recevoir un courriel vous informant de cette nouvelle requête de tirage et ressemblant à celui sur la figure <a id="xref-s_email_pr" href="#s_email_pr" class="xref">Notification par courriel d&#8217;une nouvelle requête de tirage.</a>.</p>
<figure id="s_email_pr" class="image">
<div class="content">
<img src="images/maint-01-email.png" alt="Notification par courriel d'une requête de tirage"/>
</div>
<figcaption>Figure 34. Notification par courriel d&#8217;une nouvelle requête de tirage.</figcaption>
</figure>
<p>Faisons quelques remarques à propos de ce courriel. Celui-ci vous fournit quelques statistiques : une liste de fichiers modifiés par la requête de tirage et le nombre de modifications. Il vous donne un lien vers la requête de tirage sur GitHub et il vous fournit également quelques URL que vous pouvez utiliser en ligne de commande.</p>
<p>Remarquez la ligne <code class="literal">git pull &lt;url&gt; patch-1</code>, il s&#8217;agit d&#8217;une manière simple de fusionner une branche distante sans avoir à ajouter un dépôt distant. Nous avons déjà vu rapidement cela dans <a id="xref--ch05-distributed-git--s_checking_out_remotes" href="ch05-distributed-git.xhtml#s_checking_out_remotes" class="xref">Vérification des branches distantes</a>. Si vous voulez, vous pouvez créer une branche thématique et basculer vers celle-ci puis lancer cette commande pour fusionner les modifications de cette requête de tirage.</p>
<p>Les autres URL intéressantes sont les URL <code class="literal">.diff</code> et <code class="literal">.patch</code>, qui, comme vous l&#8217;avez certainement deviné, vous fournissent des versions au format différence unifiée et patch de la requête de tirage. Vous pourriez techniquement fusionner le travail contenu dans la requête de tirage de la manière suivante :</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ curl http://github.com/tonychacon/fade/pull/1.patch | git am</code></pre>
</figure>
</section>
<section class="sect3" title="Collaboration à une requête de tirage">
<h4 id="_collaboration_à_une_requête_de_tirage">Collaboration à une requête de tirage</h4>
<p>Comme déjà traité dans la section <a id="xref-s_github_flow" href="#s_github_flow" class="xref">Processus GitHub</a>, vous pouvez maintenant commencer une conversation avec la personne qui a ouvert la requête de tirage. Vous pouvez commenter certaines lignes de code, commenter des soumissions complètes ou commenter la requête de tirage elle-même en utilisant les outils Markdown, saveur GitHub un peu partout.</p>
<p>À chaque fois que quelqu&#8217;un d&#8217;autre commente la requête de tirage, vous recevrez des notifications par courriel afin d&#8217;être au courant de chaque activité. Celles-ci possèdent un lien vers la requête de tirage dans laquelle l&#8217;activité s&#8217;est produite et vous pouvez également répondre directement au courriel pour commenter le fil de discussion de la requête de tirage.</p>
<figure class="image">
<div class="content">
<img src="images/maint-03-email-resp.png" alt="Réponse par courriel"/>
</div>
<figcaption>Figure 35. Les réponses aux courriels sont incorporées dans le fil de discussion.</figcaption>
</figure>
<p>Une fois que le code est dans un état satisfaisant et que vous voulez le fusionner, vous pouvez soit tirer le code et le fusionner localement, soit utiliser la syntaxe décrite précédemment <code class="literal">git pull &lt;url&gt; &lt;branch&gt;</code>, soit ajouter le clone comme dépôt distant, le récupérer et le fusionner.</p>
<p>Si la fusion est triviale, vous pouvez également cliquer sur le bouton « Merge » (fusionner) sur le site GitHub. Une fusion sans avance rapide (non-fast-forward) sera réalisée ce qui créera une soumission de fusion (<em>merge commit</em>) même si une fusion en avance rapide (fast-forward) était possible. Cela signifie que dans tous les cas, à chaque fois que vous cliquez sur le bouton « Merge », un commit de fusion est créé. Comme vous pouvez le voir sur <a id="xref-s_merge_button" href="#s_merge_button" class="xref">Bouton « Merge » et instructions pour la fusion manuelle d&#8217;une requête de tirage.</a>, GitHub vous donne toutes ces informations si vous cliquez sur le lien descriptif.</p>
<figure id="s_merge_button" class="image">
<div class="content">
<img src="images/maint-02-merge.png" alt="Bouton « Merge »"/>
</div>
<figcaption>Figure 36. Bouton « Merge » et instructions pour la fusion manuelle d&#8217;une requête de tirage.</figcaption>
</figure>
<p>Si vous décidez que vous ne voulez pas fusionner, vous pouvez tout simplement fermer la requête de tirage et la personne qui l&#8217;a créée en sera informée.</p>
</section>
<section class="sect3" title="Références aux requêtes de tirage">
<h4 id="s_pr_refs">Références aux requêtes de tirage</h4>
<p>Si vous gérez <strong>beaucoup</strong> de requêtes de tirage et que vous ne voulez pas ajouter une série de dépôts distants ou faire des tirages isolés à chaque fois, GitHub vous permet une astuce. C&#8217;est toutefois une astuce avancée et nous irons un peu plus dans les détails à la section <a id="xref--ch10-git-internals--s_refspec" href="ch10-git-internals.xhtml#s_refspec" class="xref">La <em>refspec</em></a> mais cela peut être assez utile dès maintenant.</p>
<p>GitHub traite en réalité les branches de requête de tirage d&#8217;un dépôt comme une sorte de pseudo-branches sur le serveur. Par défaut, vous ne les obtenez pas lorsque vous clonez mais elles sont présentes de façon cachée et vous pouvez y accéder assez facilement.</p>
<p>Pour le montrer, nous allons utiliser une commande bas niveau (souvent appelée commande de « plomberie » dont nous parlerons un peu plus dans la section <a id="xref--ch10-git-internals--s_plumbing_porcelain" href="ch10-git-internals.xhtml#s_plumbing_porcelain" class="xref">Plomberie et porcelaine</a>) qui s&#8217;appelle <code class="literal">ls-remote</code>. Cette commande n&#8217;est en général pas utilisée dans les opérations quotidiennes mais elle est utile pour afficher les références présentes sur le serveur.</p>
<p>Si nous lançons cette commande sur le dépôt « blink » que nous utilisions tout à l&#8217;heure, nous obtenons la liste de toutes les branches et étiquettes ainsi que d&#8217;autres références dans le dépôt.</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ git ls-remote https://github.com/schacon/blink
10d539600d86723087810ec636870a504f4fee4d	HEAD
10d539600d86723087810ec636870a504f4fee4d	refs/heads/master
6a83107c62950be9453aac297bb0193fd743cd6e	refs/pull/1/head
afe83c2d1a70674c9505cc1d8b7d380d5e076ed3	refs/pull/1/merge
3c8d735ee16296c242be7a9742ebfbc2665adec1	refs/pull/2/head
15c9f4f80973a2758462ab2066b6ad9fe8dcf03d	refs/pull/2/merge
a5a7751a33b7e86c5e9bb07b26001bb17d775d1a	refs/pull/4/head
31a45fc257e8433c8d8804e3e848cf61c9d3166c	refs/pull/4/merge</code></pre>
</figure>
<p>Bien sûr, si vous êtes dans votre dépôt et que vous lancez la commande <code class="literal">git ls-remote origin</code> (ou avec un autre dépôt distant), quelque chose de similaire s&#8217;affiche.</p>
<p>Si le dépôt se trouve sur GitHub et que des requêtes de tirage ont été ouvertes, vous obtiendrez leurs références préfixées par <code class="literal">refs/pull/</code>. Ce sont simplement des branches mais comme elles ne sont pas sous <code class="literal">refs/heads/</code>, vous ne les obtenez généralement pas lorsque vous clonez ou récupérez à partir d&#8217;un serveur&#8201;&#8212;&#8201;le processus de récupération les ignore normalement.</p>
<p>Il y a deux références par requête de tirage - l&#8217;une se termine par <code class="literal">/head</code> et pointe vers la même soumission que la dernière soumission dans la branche de requête de tirage. Donc si quelqu&#8217;un ouvre une requête de tirage sur notre dépôt, que leur branche s&#8217;appelle <code class="literal">bug-fix</code> et qu&#8217;elle pointe sur la soumission <code class="literal">a5a775</code>, alors dans <strong>notre</strong> dépôt nous n&#8217;aurons pas de branche <code class="literal">bug-fix</code> (puisqu&#8217;elle se trouve dans leur clone) mais nous <em>aurons</em> une référence <code class="literal">pull/&lt;pr#&gt;/head</code> qui pointe vers <code class="literal">a5a775</code>. Cela signifie que vous pouvez assez facilement tirer toute branche de requête de tirage d&#8217;un coup sans avoir à ajouter tout un tas de dépôts distants.</p>
<p>Vous pouvez désormais récupérer la référence directement.</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ git fetch origin refs/pull/958/head
From https://github.com/libgit2/libgit2
 * branch            refs/pull/958/head -&gt; FETCH_HEAD</code></pre>
</figure>
<p>Cela dit à Git, « Connecte-toi au dépôt distant <code class="literal">origin</code> et télécharge la référence appelée <code class="literal">refs/pull/958/head</code> ». Git obéit joyeusement et télécharge tout ce dont vous avez besoin pour construire cette référence et positionne un pointeur vers la soumission souhaitée sous <code class="literal">.git/FETCH_HEAD</code>.
Vous pouvez continuer en faisant <code class="literal">git merge FETCH_HEAD</code> dans une branche dans laquelle vous voulez la tester mais ce message de fusion (<em>merge commit</em>) semble un peu bizarre.
De plus, si vous passez en revue <strong>beaucoup</strong> de requêtes de tirage, cela devient fastidieux.</p>
<p>Il existe également une façon de récupérer <em>toutes</em> les requêtes de tirage et de les maintenir à jour à chaque fois que vous vous connectez au dépôt distant.
Ouvrez le fichier <code class="literal">.git/config</code> dans votre éditeur favori et cherchez le dépôt <code class="literal">origin</code>.
Cela devrait ressembler à cela :</p>
<figure class="listing">
<pre class="screen"><code>[remote "origin"]
    url = https://github.com/libgit2/libgit2
    fetch = +refs/heads/*:refs/remotes/origin/*</code></pre>
</figure>
<p>La ligne qui commence par <code class="literal">fetch =</code> est une spécification de références (refspec).
C&#8217;est une façon de faire correspondre des noms sur un dépôt distant à des noms dans votre dossier <code class="literal">.git</code> local.
Celle-ci en particulier dit à Git, « les choses sur le dépôt distant qui se trouvent sous <code class="literal">refs/heads</code> doivent aller dans mon dépôt local sous <code class="literal">refs/remotes/origin</code> ».
Vous pouvez modifier cette section pour ajouter une autre spécification de références :</p>
<figure class="listing">
<pre class="screen"><code>[remote "origin"]
    url = https://github.com/libgit2/libgit2.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/remotes/origin/pr/*</code></pre>
</figure>
<p>Cette dernière ligne dit à Git, « Toutes les références du type <code class="literal">refs/pull/123/head</code> doivent être enregistrées localement comme <code class="literal">refs/remotes/origin/pr/123</code> ».
Maintenant, si vous enregistrez ce fichier et faites une récupération (<code class="literal">git fetch</code>) :</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ git fetch
<span style="font-style: italic"># …</span>
 * [new ref]         refs/pull/1/head -&gt; origin/pr/1
 * [new ref]         refs/pull/2/head -&gt; origin/pr/2
 * [new ref]         refs/pull/4/head -&gt; origin/pr/4
<span style="font-style: italic"># …</span></code></pre>
</figure>
<p>Maintenant toutes les requêtes de tirage distantes sont représentées localement par des références qui agissent un peu comme des branches de suivi : elles sont en lecture seule et elles se mettent à jour lorsque vous faites un tirage.
Il est ainsi super facile d&#8217;essayer le code d&#8217;une requête de tirage localement :</p>
<figure class="listing">
<pre class="source language-shell"><code><span></span>$ git checkout pr/2
Checking out files: 100% (3769/3769), <span style="font-weight: bold">done</span>.
Branch pr/2 set up to track remote branch pr/2 from origin.
Switched to a new branch <span style="font-style: italic">&#39;pr/2&#39;</span></code></pre>
</figure>
<p>Les Sherlock Holmes en herbe parmi vous auront remarqué le terme <code class="literal">head</code> à la fin de la partie distante de la spécification de références.
Il y a également une référence <code class="literal">refs/pull/#/merge</code> du côté de GitHub qui représente la soumission qui serait obtenue si vous cliquiez sur le bouton « Fusionner » sur le site. Cela peut vous permettre de tester la fusion avant même de cliquer sur le bouton.</p>
</section>
<section class="sect3" title="Requêtes de tirage sur des requêtes de tirage">
<h4 id="_requêtes_de_tirage_sur_des_requêtes_de_tirage">Requêtes de tirage sur des requêtes de tirage</h4>
<p>Non seulement vous pouvez ouvrir des requêtes de tirage qui ciblent la branche principale ou <code class="literal">master</code>, mais vous pouvez en fait ouvrir une requête de tirage ciblant n&#8217;importe quelle branche du réseau. En réalité, vous pouvez même cibler une autre requête de tirage.</p>
<p>Si vous remarquez une requête de tirage qui va dans la bonne direction et que vous avez une idée de modifications qui dépendent de celle-ci, ou vous n&#8217;êtes pas sûr que c&#8217;est une bonne idée, ou vous n&#8217;avez tout simplement pas accès en poussée vers la branche cible, vous pouvez ouvrir une requête de tirage directement sur elle.</p>
<p>Lorsque vous ouvrez une requête de tirage, une boîte en haut de la page vous indique vers quelle branche vous voulez pousser et à partir de quelle branche vous allez tirer. Si vous cliquez sur le bouton « Edit » (modifier) à droite de cette boîte, vous pouvez modifier non seulement les branches mais aussi le clone.</p>
<figure id="s_pr_targets" class="image">
<div class="content">
<img src="images/maint-04-target.png" alt="Cibles d'une requête"/>
</div>
<figcaption>Figure 37. Modification manuelle du clone cible et de la branche de la requête de tirage.</figcaption>
</figure>
<p>Vous pouvez à cet instant très facilement indiquer de fusionner votre nouvelle branche sur une autre requête de tirage ou un autre clone du projet.</p>
</section>
</section>
<section class="sect2" title="Mentions et notifications">
<h3 id="_mentions_et_notifications">Mentions et notifications</h3>
<p>GitHub dispose également d&#8217;un système de notifications intégré assez sympa qui peut devenir utile lorsque vous avez des questions et besoin du retour de certaines personnes ou d&#8217;équipes.</p>
<p>Dans tous les commentaires, si vous saisissez le caractère <code class="literal">@</code>, cela commence à proposer des noms et des noms d&#8217;utilisateur de personnes qui collaborent ou contribuent au projet.</p>
<figure class="image">
<div class="content">
<img src="images/maint-05-mentions.png" alt="Mentions"/>
</div>
<figcaption>Figure 38. Saisissez @ pour faire référence à quelqu&#8217;un.</figcaption>
</figure>
<p>Vous pouvez aussi faire référence à un utilisateur qui n&#8217;apparaît pas dans cette liste, mais souvent l&#8217;auto-complétion accélère les choses.</p>
<p>Une fois que vous avez posté un commentaire contenant une référence à un utilisateur, ce dernier reçoit une notification. Cela signifie que c&#8217;est une manière très pratique de faire entrer des gens dans une conversation plutôt que de leur demander. Très souvent dans des requêtes de tirage sur GitHub, les gens vont attirer d&#8217;autres personnes dans leurs équipes ou dans leur société pour vérifier une anomalie ou une requête de tirage.</p>
<p>Si quelqu&#8217;un est cité dans une requête de tirage ou une anomalie, il est « inscrit » à celle-ci et continue à recevoir des notifications dès qu&#8217;une activité se produit. Vous êtes également inscrit à quelque chose si vous l&#8217;ouvrez, si vous observez (<em>watch</em>) un dépôt ou si vous faites un commentaire sur quelque chose. Si vous ne souhaitez plus recevoir de notifications, cliquez sur le bouton « Unsubscribe » (se désinscrire) de la page pour arrêter de recevoir les mises à jour.</p>
<figure class="image">
<div class="content">
<img src="images/maint-06-unsubscribe.png" alt="Désinscription"/>
</div>
<figcaption>Figure 39. Désinscription d&#8217;une anomalie ou d&#8217;une requête de tirage.</figcaption>
</figure>
<section class="sect3" title="La page des notifications">
<h4 id="_la_page_des_notifications">La page des notifications</h4>
<p>Lorsque nous parlons de « notifications » ici, par rapport à GitHub, nous voulons parler de la manière spécifique par laquelle GitHub essaye de vous joindre lorsque des événements se produisent et il existe différentes façons de la configurer.
Si vous allez dans l&#8217;onglet « Notification center » (centre de notification) dans la page des paramètres, vous pouvez voir les différentes options disponibles.</p>
<figure class="image">
<div class="content">
<img src="images/maint-07-notifications.png" alt="Centre de notification"/>
</div>
<figcaption>Figure 40. Options du centre de notification.</figcaption>
</figure>
<p>Vous pouvez recevoir des notifications soit par « courriel », soit par le « Web » et vous pouvez sélectionner une, aucune ou les deux méthodes si vous voulez participer de manière très active ou pour une activité particulière dans les dépôts que vous surveillez.</p>
<section class="sect4" title="Notifications Web">
<h5 id="_notifications_web">Notifications Web</h5>
<p>Les notifications Web n&#8217;existent que sur GitHub et vous ne pouvez les visionner que sur GitHub. Si vous avez sélectionné cette option dans vos préférences et qu&#8217;une notification vous est envoyée, un petit point bleu apparaît sur votre icône des notifications en haut de l&#8217;écran comme sur la figure <a id="xref-s_not_center" href="#s_not_center" class="xref">Centre de notification.</a>.</p>
<figure id="s_not_center" class="image">
<div class="content">
<img src="images/maint-08-notifications-page.png" alt="Centre de notification"/>
</div>
<figcaption>Figure 41. Centre de notification.</figcaption>
</figure>
<p>Si vous cliquez dessus, la liste de tous les éléments pour lesquels vous avez été notifié apparaît, regroupés par projet. Vous pouvez filtrer les notifications d&#8217;un projet particulier en cliquant sur son nom dans la barre latérale gauche. Vous pouvez aussi accepter la notification en cochant l&#8217;icône à côté de celle-ci ou accepter
<em>toutes</em> les notifications d&#8217;un projet en cochant la case en haut du groupe. Il y a aussi un bouton « muet » à côté de chaque case que vous pouvez cliquer afin de ne plus recevoir de notifications sur cet élément.</p>
<p>Tous ces outils sont très utiles pour gérer un grand nombre de notifications. Beaucoup d&#8217;utilisateurs de GitHub très actifs arrêtent tout simplement complètement les notifications par courriel et gèrent toutes leurs notifications à partir de cette fenêtre.</p>
</section>
<section class="sect4" title="Notifications par courriel">
<h5 id="_notifications_par_courriel">Notifications par courriel</h5>
<p>Les notifications par courriel sont l&#8217;autre façon de gérer les notifications provenant de GitHub. Si vous les avez activées, vous recevrez des courriels pour chaque notification. Nous avons vu des exemples concernant cela sur les figures <a id="xref-s_email_notification" href="#s_email_notification" class="xref">Commentaires notifiés par courriel</a> et <a href="#s_email_pr" class="xref">Notification par courriel d&#8217;une nouvelle requête de tirage.</a>. Ces courriels peuvent être également suivis correctement ce qui est bien agréable si vous utilisez un client de messagerie qui suit les fils de discussion.</p>
<p>Un assez grand nombre de métadonnées sont incluses dans les entêtes des courriels que GitHub vous envoie ce qui peut vraiment vous aider à configurer des filtres et des règles personnalisés.</p>
<p>Par exemple si nous observons les entêtes complets du courriel envoyé à Tony dans le courriel de la figure <a href="#s_email_pr" class="xref">Notification par courriel d&#8217;une nouvelle requête de tirage.</a>, nous voyons que les informations suivantes sont envoyées :</p>
<figure class="listing">
<pre class="source language-mbox"><code><span></span>To: tonychacon/fade &lt;fade@noreply.github.com&gt;
Message-ID: &lt;tonychacon/fade/pull/1@github.com&gt;
Subject: [fade] Wait longer to see the dimming effect better (#1)
X-GitHub-Recipient: tonychacon
List-ID: tonychacon/fade &lt;fade.tonychacon.github.com&gt;
List-Archive: https://github.com/tonychacon/fade
List-Post: &lt;mailto:reply+i-4XXX@reply.github.com&gt;
List-Unsubscribe: &lt;mailto:unsub+i-XXX@reply.github.com&gt;,...
X-GitHub-Recipient-Address: tchacon@example.com</code></pre>
</figure>
<p>Il y a quelques petites choses intéressantes ici. Si vous voulez mettre en valeur ou rediriger les courriels de ce projet ou d&#8217;une requête en tirage en particulier, l&#8217;information du champ <code class="literal">Message-ID</code> vous fournit toutes les données au format <code class="literal">&lt;utilisateur&gt;/&lt;projet&gt;/&lt;type&gt;/&lt;id&gt;</code>. Si c&#8217;était une anomalie, le champ <code class="literal">&lt;type&gt;</code> aurait été « issues » à la place de « pull ».</p>
<p>Les champs <code class="literal">List-Post</code> et <code class="literal">List-Unsubscribe</code> signifient que si votre client de messagerie les prend en compte, vous pouvez facilement écrire (<em>post</em>) à la liste ou vous désinscrire (<em>unsubscribe</em>) du fil de discussion. Cela correspond à cliquer sur la case « muet » sur la version Web de la notification ou sur « Unsubscribe » sur la page personnelle de l&#8217;anomalie ou de la requête de tirage.</p>
<p>Il est aussi intéressant de noter que si les notifications par courriel et par Web sont toutes deux activées et que vous lisez la version courriel de la notification, la version Web sera également marquée comme lue si vous avez autorisé l&#8217;affichage des images dans votre client de messagerie.</p>
</section>
</section>
</section>
<section class="sect2" title="Fichiers spéciaux">
<h3 id="_fichiers_spéciaux">Fichiers spéciaux</h3>
<p>Quelques fichiers spéciaux attirent l&#8217;attention de GitHub s&#8217;ils existent dans votre dépôt.</p>
</section>
<section class="sect2" title="README">
<h3 id="_readme">README</h3>
<p>Le premier est le fichier <code class="literal">README</code> (LISEZ-MOI) qui peut être écrit sous n&#8217;importe quel format textuel reconnu par GitHub. Par exemple, cela pourrait être <code class="literal">README</code>, <code class="literal">README.md</code>, <code class="literal">README.asciidoc</code>, etc. Si GitHub trouve un fichier README dans vos sources, celui-ci sera rendu sur la page d&#8217;accueil du projet.</p>
<p>Pour beaucoup d&#8217;équipes, ce fichier contient toutes les informations importantes du projet pour quelqu&#8217;un qui serait nouveau dans le dépôt ou le projet. Il contient habituellement des choses comme :</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">À quoi sert le projet.</span>
</li>
<li>
<span class="principal">Comment le configurer et l&#8217;installer.</span>
</li>
<li>
<span class="principal">Un exemple d&#8217;utilisation et comment le lancer.</span>
</li>
<li>
<span class="principal">La licence sous laquelle le projet est proposé.</span>
</li>
<li>
<span class="principal">Comment y contribuer.</span>
</li>
</ul>
</div>
<p>Puisque GitHub va afficher à l&#8217;écran ce fichier, vous pouvez y incorporer des images ou des liens pour faciliter la compréhension.</p>
</section>
<section class="sect2" title="CONTRIBUTING">
<h3 id="_contributing">CONTRIBUTING</h3>
<p>L&#8217;autre fichier spécial que GitHub reconnaît est le fichier <code class="literal">CONTRIBUTING</code>. Si vous possédez un fichier nommé <code class="literal">CONTRIBUTING</code>, peu importe son extension, GitHub affichera la figure <a id="xref-s_contrib_file" href="#s_contrib_file" class="xref">Ouverture d&#8217;une requête de tirage si un fichier CONTRIBUTING existe.</a> lorsque quelqu&#8217;un commence à ouvrir une requête de tirage.</p>
<figure id="s_contrib_file" class="image">
<div class="content">
<img src="images/maint-09-contrib.png" alt="Notification du fichier CONTRIBUTING"/>
</div>
<figcaption>Figure 42. Ouverture d&#8217;une requête de tirage si un fichier CONTRIBUTING existe.</figcaption>
</figure>
<p>L&#8217;idée ici est d&#8217;expliquer les choses particulières que vous voulez ou ne voulez pas voir soumises dans une requête de tirage envoyée vers votre projet. De cette façon, les gens peuvent vraiment lire les recommandations avant d&#8217;ouvrir la requête de tirage.</p>
</section>
<section class="sect2" title="Administration du projet">
<h3 id="_administration_du_projet">Administration du projet</h3>
<p>Il n&#8217;y a généralement pas beaucoup de tâches administratives à faire si vous avez un seul projet, mais ces quelques points peuvent vous intéresser.</p>
<section class="sect3" title="Modification de la branche par défaut">
<h4 id="_modification_de_la_branche_par_défaut">Modification de la branche par défaut</h4>
<p>Si vous utilisez une autre branche que « master » comme branche par défaut et que vous voulez que les gens ouvrent les requêtes de tirage dessus ou la voient par défaut, vous pouvez modifier cela dans la page des paramètres de votre dépôt dans l&#8217;onglet « Options ».</p>
<figure id="s_default_branch" class="image">
<div class="content">
<img src="images/maint-10-default-branch.png" alt="Branche par défaut"/>
</div>
<figcaption>Figure 43. Modification de la branche par défaut pour un projet.</figcaption>
</figure>
<p>Modifiez tout simplement la branche par défaut dans la liste déroulante et celle-ci sera la branche par défaut pour toutes les opérations principales à partir de maintenant, y compris la branche qui sera extraite par défaut lorsque quelqu&#8217;un clone le dépôt.</p>
</section>
<section class="sect3" title="Transfert de projet">
<h4 id="_transfert_de_projet">Transfert de projet</h4>
<p>Si vous voulez transférer un projet à un autre utilisateur ou une organisation dans GitHub, une option « Transfer ownership » (transférer la propriété) en bas du même onglet « Options » de la page des paramètres de votre dépôt vous permet cela.</p>
<figure id="s_transfer_project" class="image">
<div class="content">
<img src="images/maint-11-transfer.png" alt="Transfert"/>
</div>
<figcaption>Figure 44. Transfert d&#8217;un projet vers un autre utilisateur GitHub ou une organisation.</figcaption>
</figure>
<p>C&#8217;est bien pratique si vous abandonnez un projet et que quelqu&#8217;un souhaite le récupérer ou si votre projet devient plus gros et que vous voulez le déplacer vers une organisation.</p>
<p>Non seulement, cela déplace le dépôt ainsi que tous ses observateurs et étoiles vers un autre endroit, mais cela met également en place une redirection de votre URL vers le nouvel emplacement. Cela redirige également les clones et les tirages à partir de Git et pas seulement les requêtes Web.</p>
</section>
</section>
</section>
<section class="sect1" title="Gestion d&#8217;un regroupement">
<h2 id="s_github_orgs">Gestion d&#8217;un regroupement</h2>
<p>
En plus d&#8217;avoir des comptes par utilisateur, GitHub propose également ce qui s&#8217;appelle des « Organizations » (regroupements).
Tout comme les comptes personnels, les comptes de regroupements possèdent un espace nommé où se trouvent tous les projets mais de nombreuses autres choses sont différentes.
Ces comptes représentent un groupe de personnes qui partagent la propriété de projets et de nombreux outils de gestion de sous-groupes parmi ces personnes sont proposés.
Normalement ces comptes sont utilisés pour des groupes open-source (tels que « perl » ou « rail ») ou des sociétés (comme « google » ou « twitter »).</p>
<section class="sect2" title="Les bases d&#8217;un regroupement">
<h3 id="_les_bases_d_un_regroupement">Les bases d&#8217;un regroupement</h3>
<p>Un regroupement est très facile à créer, il suffit de cliquer sur l&#8217;icône « + » située dans le coin supérieur droit de n&#8217;importe quelle page GitHub et de sélectionner « <em>New Organization</em> » (nouveau regroupement) dans le menu.</p>
<figure class="image">
<div class="content">
<img src="images/neworg.png" alt="L'élément de menu « New organization »."/>
</div>
<figcaption>Figure 45. L&#8217;élément de menu « New organization ».</figcaption>
</figure>
<p>Vous devrez d&#8217;abord donner un nom à votre regroupement et fournir une adresse électronique comme principal point de contact du groupe.
Ensuite vous pouvez, si vous voulez, inviter d&#8217;autres utilisateurs à devenir co-propriétaires du compte.</p>
<p>En suivant ces étapes, vous devenez le propriétaire d&#8217;un tout nouveau regroupement.
Tout comme les comptes personnels, les regroupements sont gratuits si tout ce que vous envisagez d&#8217;enregistrer est open source.</p>
<p>En tant que propriétaire d&#8217;un regroupement, lorsque vous dupliquez un dépôt, vous aurez la possibilité de le dupliquer vers l&#8217;espace de nom de votre regroupement.
Lorsque vous créez un dépôt, vous pouvez le faire soit dans votre compte personnel, soit dans l&#8217;un des regroupements dont vous êtes propriétaire.
Vous pouvez aussi automatiquement suivre (<em>watch</em>) n&#8217;importe quel nouveau dépôt créé sous ce regroupement.</p>
<p>Tout comme dans <a id="xref-s_personal_avatar" href="#s_personal_avatar" class="xref">Votre Avatar</a>, vous pouvez télécharger un avatar pour votre regroupement pour le personnaliser un peu.
Et tout comme pour les comptes personnels, vous possédez une page d&#8217;accueil pour le regroupement qui énumère tous vos dépôts et qui peut être vue par tout le monde.</p>
<p>Maintenant, passons aux éléments qui sont un peu différents pour un compte de regroupement.</p>
</section>
<section class="sect2" title="Équipes">
<h3 id="_équipes">Équipes</h3>
<p>Les regroupements sont associés à des individus au travers d&#8217;équipes (<em>teams</em>) qui sont tout simplement un groupe de comptes utilisateur individuels et de dépôts au sein du regroupement et qui définissent le type d&#8217;accès que possèdent ces personnes vers ces dépôts.</p>
<p>Par exemple, supposons que votre société possède trois dépôts : <code class="literal">frontend</code>, <code class="literal">backend</code> et <code class="literal">deployscripts</code>.
Vous aimeriez que vos développeurs HTML/CSS/Javascript aient accès à <code class="literal">frontend</code> et peut-être <code class="literal">backend</code> et que les responsables opérationnels aient accès à <code class="literal">backend</code> et <code class="literal">deployscripts</code>.
Les équipes vous facilitent la vie, sans avoir à gérer les collaborateurs pour chaque dépôt spécifiquement.</p>
<p>La page du regroupement vous affiche un tableau de bord très simple de tous les dépôts, utilisateurs et équipes dans ce regroupement.</p>
<figure id="s_org_page" class="image">
<div class="content">
<img src="images/orgs-01-page.png" alt="orgs 01 page"/>
</div>
<figcaption>Figure 46. La page du regroupement.</figcaption>
</figure>
<p>Pour gérer vos équipes, vous pouvez cliquer sur la barre latérale « Teams » sur le côté droit de la page sur la figure <a id="xref-s_org_page" href="#s_org_page" class="xref">La page du regroupement.</a>.
Cela vous redirige vers une page qui vous permet d&#8217;ajouter des membres ou des dépôts dans l&#8217;équipe et de gérer les paramètres et les niveaux de contrôle pour l&#8217;équipe.
Chaque équipe peut avoir un accès en lecture seule, en lecture/écriture ou en administration (<em>administrative</em>) aux dépôts.
Vous pouvez modifier ce niveau en cliquant sur le bouton « <em>Settings</em> » de la figure <a id="xref-s_team_page" href="#s_team_page" class="xref">La page équipe.</a>.</p>
<figure id="s_team_page" class="image">
<div class="content">
<img src="images/orgs-02-teams.png" alt="orgs 02 teams"/>
</div>
<figcaption>Figure 47. La page équipe.</figcaption>
</figure>
<p>Lorsque vous invitez quelqu&#8217;un dans une équipe, celui-ci reçoit un courriel lui indiquant qu&#8217;il a été invité.</p>
<p>De plus, les <code class="literal">@mentions</code> d&#8217;équipes (telle que <code class="literal">@acmecorp/frontend</code>) fonctionnent de la même façon que pour les utilisateurs individuels sauf que <strong>tous</strong> les membres de l&#8217;équipe sont alors inscrits pour suivre le fil de discussion.
C&#8217;est utile si vous voulez attirer l&#8217;attention de quelqu&#8217;un dans une équipe mais vous ne savez pas exactement à qui vous adresser.</p>
<p>Un utilisateur peut appartenir à un grand nombre d&#8217;équipes donc ne vous limitez pas seulement à voir les équipes comme des groupes de contrôle d&#8217;accès.
Des équipes par centre d&#8217;intérêt comme <code class="literal">ux</code>, <code class="literal">css</code> ou <code class="literal">refactoring</code> sont utiles pour certains types de points et d&#8217;autres comme <code class="literal">legal</code> et <code class="literal">colorblind</code> pour tout autre chose.</p>
</section>
<section class="sect2" title="Journal d&#8217;audit">
<h3 id="_journal_d_audit">Journal d&#8217;audit</h3>
<p>Les regroupements donnent aussi accès aux propriétaires à toute information concernant les activités au sein du regroupement.
Dans l&#8217;onglet « Audit Log » (journal d&#8217;audit), vous pouvez voir les événements qui ont eu lieu d&#8217;un point de vue organisationnel, qui y a participé et où elles ont eu lieu dans le monde.</p>
<figure id="s_audit_log" class="image">
<div class="content">
<img src="images/orgs-03-audit.png" alt="orgs 03 audit"/>
</div>
<figcaption>Figure 48. Journal d&#8217;audit.</figcaption>
</figure>
<p>Vous pouvez aussi filtrer par type d&#8217;événement, par lieu ou par personne.</p>
</section>
</section>
<section class="sect1" title="Écriture de scripts pour GitHub">
<h2 id="_écriture_de_scripts_pour_github">Écriture de scripts pour GitHub</h2>
<p>Nous avons pour l&#8217;instant traité de toutes les principales fonctionnalités et des cycles de travail de GitHub mais tous les grands groupes ou projets ont des personnalisations qu&#8217;ils souhaiteront intégrer ou des services externes qu&#8217;ils voudront intégrer.</p>
<p>Heureusement pour nous, il est facile de « bidouiller » GitHub de différentes façons.
Dans cette section nous traiterons de la façon d&#8217;utiliser le système de crochets (<em>hooks</em>) de GitHub et son interface de programmation (<em>API</em>) afin que GitHub fonctionne de la façon que nous souhaitons.</p>
<section class="sect2" title="Crochets (Hooks)">
<h3 id="_crochets_em_hooks_em">Crochets (<em>Hooks</em>)</h3>
<p>La section « Hooks &amp; Services » (crochets et services) de l&#8217;administration de dépôt GitHub est la façon la plus facile de faire interagir GitHub avec des systèmes externes.</p>
<section class="sect3" title="Services">
<h4 id="_services">Services</h4>
<p>Intéressons-nous d&#8217;abord aux services.
Les intégrations de services et de crochets se trouvent tous les deux dans la section Settings (paramètres) de votre dépôt où nous avions précédemment ajouté des collaborateurs et modifié la branche par défaut de votre projet.
La figure <a id="xref-s_services_hooks" href="#s_services_hooks" class="xref">Section configuration des crochets et services.</a> vous montre ce que vous verrez en cliquant sur l&#8217;onglet « Webhooks and Services ».</p>
<figure id="s_services_hooks" class="image">
<div class="content">
<img src="images/scripting-01-services.png" alt="Services et crochets"/>
</div>
<figcaption>Figure 49. Section configuration des crochets et services.</figcaption>
</figure>
<p>Vous pouvez choisir parmi des dizaines de services, la plupart sont des intégrations vers d&#8217;autres systèmes commerciaux et open source.
Certains sont des services d&#8217;intégration continue, des analyseurs de bogues et d&#8217;anomalies, des systèmes de salon de discussion et des systèmes de documentation.
Nous examinerons le paramétrage de l&#8217;un d&#8217;eux, le crochet Email (courriel).
Si vous sélectionnez « email » dans la liste déroulante « Add Service », vous verrez un écran de configuration comme <a id="xref-s_service_config" href="#s_service_config" class="xref">Configuration du service Email.</a>.</p>
<figure id="s_service_config" class="image">
<div class="content">
<img src="images/scripting-02-email-service.png" alt="Service Email"/>
</div>
<figcaption>Figure 50. Configuration du service Email.</figcaption>
</figure>
<p>Dans ce cas, si vous cliquez sur le bouton « Add service » (Ajouter le service), un courriel est envoyé à l&#8217;adresse électronique que vous avez indiquée à chaque fois que quelqu&#8217;un pousse vers le dépôt.
Les services peuvent écouter un grand nombre d&#8217;événements de différents types mais la plupart n&#8217;écoutent que les événements de poussée puis font quelque chose avec ces données.</p>
<p>Si vous utilisez un système et souhaitez l&#8217;intégrer avec GitHub, vous devriez vérifier ici s&#8217;il existe déjà un service d&#8217;intégration disponible.
Par exemple, si vous utilisez Jenkins pour lancer des tests sur votre code, vous pouvez activer l&#8217;intégration du service intégré Jenkins pour lancer une série de tests à chaque fois que quelqu&#8217;un pousse vers votre dépôt.</p>
</section>
<section class="sect3" title="Crochets (Hooks)">
<h4 id="_crochets_em_hooks_em_2">Crochets (<em>Hooks</em>)</h4>
<p>Si vous avez besoin de quelque chose de plus spécifique ou que vous voulez intégrer un service ou un site qui n&#8217;est pas dans la liste, vous pouvez utiliser à la place le système plus général des crochets.
Les crochets de dépôt GitHub sont assez simples.
Vous indiquez un URL et GitHub envoie (<em>post</em>) des informations par HTTP (<em>payload</em>) vers cet URL pour n&#8217;importe quel événement que vous souhaitez.</p>
<p>En général, la façon dont cela fonctionne est que vous configurez un petit service Web qui écoute des informations de crochet GitHub puis font quelque chose avec les données reçues.</p>
<p>Pour activer un crochet, vous cliquez sur le bouton « Add webhook » (Ajouter un crochet Web) de la figure <a href="#s_services_hooks" class="xref">Section configuration des crochets et services.</a>.
Cela vous redirige vers une page qui ressemble à <a id="xref-s_web_hook" href="#s_web_hook" class="xref">Configuration d&#8217;un crochet Web.</a>.</p>
<figure id="s_web_hook" class="image">
<div class="content">
<img src="images/scripting-03-webhook.png" alt="Crochet Web"/>
</div>
<figcaption>Figure 51. Configuration d&#8217;un crochet Web.</figcaption>
</figure>
<p>La configuration d&#8217;un crochet Web est assez simple.
Dans la plupart des cas, vous saisissez simplement un URL et une clé secrète puis cliquez sur « Add webhook ».
Il existe quelques options pour choisir l&#8217;événement pour lequel GitHub envoie des informations&#8201;&#8212;&#8201;par défaut seul l&#8217;événement <code class="literal">push</code> envoie des informations lorsque quelqu&#8217;un pousse un nouveau code vers une branche de votre dépôt.</p>
<p>Examinons un petit exemple de service Web que vous pourriez configurer pour gérer un crochet Web.
Nous utiliserons l&#8217;architecture Web Ruby appelée Sinatra car c&#8217;est assez concis et vous devriez être capable de voir facilement ce que nous faisons.</p>
<p>Disons que vous voulez recevoir un courriel si une personne précise pousse vers une branche spécifique de notre projet un fichier particulier.
Nous pourrions faire facilement cela avec le code suivant :</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>require <span style="font-style: italic">&#39;sinatra&#39;</span>
require <span style="font-style: italic">&#39;json&#39;</span>
require <span style="font-style: italic">&#39;mail&#39;</span>

post <span style="font-style: italic">&#39;/payload&#39;</span> <span style="font-weight: bold">do</span>
  push = JSON.parse(request.body.read) <span style="font-style: italic"># parse the JSON</span>

  <span style="font-style: italic"># gather the data we&#39;re looking for</span>
  pusher = push[<span style="font-style: italic">&quot;pusher&quot;</span>][<span style="font-style: italic">&quot;name&quot;</span>]
  branch = push[<span style="font-style: italic">&quot;ref&quot;</span>]

  <span style="font-style: italic"># get a list of all the files touched</span>
  files = push[<span style="font-style: italic">&quot;commits&quot;</span>].map <span style="font-weight: bold">do</span> |commit|
    commit[<span style="font-style: italic">&#39;added&#39;</span>] + commit[<span style="font-style: italic">&#39;modified&#39;</span>] + commit[<span style="font-style: italic">&#39;removed&#39;</span>]
  <span style="font-weight: bold">end</span>
  files = files.flatten.uniq

  <span style="font-style: italic"># check for our criteria</span>
  <span style="font-weight: bold">if</span> pusher == <span style="font-style: italic">&#39;schacon&#39;</span> &amp;&amp;
     branch == <span style="font-style: italic">&#39;ref/heads/special-branch&#39;</span> &amp;&amp;
     files.include?(<span style="font-style: italic">&#39;special-file.txt&#39;</span>)

    Mail.deliver <span style="font-weight: bold">do</span>
      from     <span style="font-style: italic">&#39;tchacon@example.com&#39;</span>
      to       <span style="font-style: italic">&#39;tchacon@example.com&#39;</span>
      subject  <span style="font-style: italic">&#39;Scott Changed the File&#39;</span>
      body     <span style="font-style: italic">&quot;ALARM&quot;</span>
    <span style="font-weight: bold">end</span>
  <span style="font-weight: bold">end</span>
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>Ici nous récupérons les informations JSON que GitHub nous délivre et cherchons qui les a poussées, vers quelle branche et quels fichiers ont été touchés dans tous les <em>commits</em> qui ont été poussés.
Puis nous comparons cela à nos critères et envoyons un courriel si cela correspond.</p>
<p>Afin de développer et tester quelque chose comme cela, il existe une console développeur sympa sur la même fenêtre que celle où vous avez activé le crochet.
Vous pouvez afficher les quelques dernières livraisons que GitHub a essayé de faire pour ce crochet Web.
Pour chaque crochet, vous pouvez afficher plus d&#8217;informations pour savoir quand il s&#8217;est exécuté, s&#8217;il a réussi et pour connaître les en-têtes et le corps de la requête et de la réponse.
Ceci rend incroyablement facile de tester et débugger vos crochets.</p>
<figure id="s_web_hook_debug" class="image">
<div class="content">
<img src="images/scripting-04-webhook-debug.png" alt="Webhook debug"/>
</div>
<figcaption>Figure 52. informations de debuggage du crochet web</figcaption>
</figure>
<p>L&#8217;autre fonctionnalité intéressante est que vous pouvez redéclencher la livraison de n&#8217;importe quel message pour tester votre service.</p>
<p>Pour plus d&#8217;information sur l&#8217;écriture de crochets web et tous les différents types d&#8217;événement que vous pouvez écouter, rendez-vous à la documentation du Developpeur GitHub à l&#8217;adresse <a href="https://developer.github.com/webhooks/" class="link">https://developer.github.com/webhooks/</a>.</p>
</section>
</section>
<section class="sect2" title="L&#8217;interface de programmation (API) GitHub">
<h3 id="_l_interface_de_programmation_em_api_em_github">L&#8217;interface de programmation (<em>API</em>) GitHub</h3>
<p>
Les services et les crochets vous fournissent un moyen de recevoir des notifications de poussée sur des événements qui arrivent sur vos dépôts, mais que faire si vous avez besoin de plus d&#8217;informations sur ces événements ?
Que faire si vous avez besoin d&#8217;automatiser quelque chose comme ajouter des collaborateurs ou étiqueter des problèmes (<em>issues</em>) ?</p>
<p>C&#8217;est là que l&#8217;Interface de Programmation (<em>API</em>) GitHub s&#8217;avère utile.
GitHub a des tas de points d&#8217;entrée sur l&#8217;interface d&#8217;application pour faire presque tout ce que vous pouvez faire sur le site web de façon automatisée.
Dans cette section, nous apprendrons comment s&#8217;authentifier et se connecter à l&#8217;interface de programmation, comment commenter un problème et comment changer le statut d&#8217;une requête de tirage (<em>pull request</em>) à travers l&#8217;interface de programmation.</p>
</section>
<section class="sect2" title="Utilisation Basique">
<h3 id="_utilisation_basique">Utilisation Basique</h3>
<p>La chose la plus basique que vous pouvez faire est une simple requête GET sur une entrée qui ne requiert pas d&#8217;authentification.
Cela peut être un utilisateur ou une information en lecture seule sur un projet open source.
Par exemple, si nous voulons en savoir plus sur un utilisateur appelé « schacon », nous pouvons lancer quelque chose comme ceci :</p>
<figure class="listing">
<pre class="source language-javascript"><code><span></span>$ curl https:<span style="font-style: italic">//api.github.com/users/schacon</span>
{
  <span style="font-style: italic">&quot;login&quot;</span>: <span style="font-style: italic">&quot;schacon&quot;</span>,
  <span style="font-style: italic">&quot;id&quot;</span>: 70,
  <span style="font-style: italic">&quot;avatar_url&quot;</span>: <span style="font-style: italic">&quot;https://avatars.githubusercontent.com/u/70&quot;</span>,
<span style="border: 1px solid #FF0000">#</span> <span style="border: 1px solid #FF0000">…</span>
  <span style="font-style: italic">&quot;name&quot;</span>: <span style="font-style: italic">&quot;Scott Chacon&quot;</span>,
  <span style="font-style: italic">&quot;company&quot;</span>: <span style="font-style: italic">&quot;GitHub&quot;</span>,
  <span style="font-style: italic">&quot;following&quot;</span>: 19,
  <span style="font-style: italic">&quot;created_at&quot;</span>: <span style="font-style: italic">&quot;2008-01-27T17:19:28Z&quot;</span>,
  <span style="font-style: italic">&quot;updated_at&quot;</span>: <span style="font-style: italic">&quot;2014-06-10T02:37:23Z&quot;</span>
}</code></pre>
</figure>
<p>Il y a des tas de points d&#8217;entrée comme celui-ci pour obtenir des informations sur des regroupements, projets, problèmes, <em>commits</em>&#8201;&#8212;&#8201;en fait tout ce que vous pouvez voir sur le site de GitHub.
Vous pouvez même utiliser l&#8217;interface de programmation pour écrire du texte en Markdown ou trouver un modèle <code class="literal">.gitignore</code>.</p>
<figure class="listing">
<pre class="source language-javascript"><code><span></span>$ curl https:<span style="font-style: italic">//api.github.com/gitignore/templates/Java</span>
{
  <span style="font-style: italic">&quot;name&quot;</span>: <span style="font-style: italic">&quot;Java&quot;</span>,
  <span style="font-style: italic">&quot;source&quot;</span>: <span style="font-style: italic">&quot;*.class</span>

<span style="font-style: italic"># Mobile Tools for Java (J2ME)</span>
<span style="font-style: italic">.mtj.tmp/</span>

<span style="font-style: italic"># Package Files #</span>
<span style="font-style: italic">*.jar</span>
<span style="font-style: italic">*.war</span>
<span style="font-style: italic">*.ear</span>

<span style="font-style: italic"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span>
<span style="font-style: italic">hs_err_pid*</span>
<span style="font-style: italic">&quot;</span>
}</code></pre>
</figure>
</section>
<section class="sect2" title="Commenter un problème">
<h3 id="_commenter_un_problème">Commenter un problème</h3>
<p>Cependant, si vous voulez faire une action sur le site web comme commenter un problème ou une requête de tirage ou si vous voulez voir ou interagir avec du contenu privé, vous aurez besoin de vous authentifier.</p>
<p>Il y a plusieurs moyens de s&#8217;authentifier.
Vous pouvez utiliser l&#8217;authentification basique avec seulement votre nom d&#8217;utilisateur et votre mot de passe, mais en général c&#8217;est mieux d&#8217;utiliser un jeton d&#8217;accès personnel.
Vous pouvez en générer depuis l&#8217;onglet « Applications » de votre page de paramètres.</p>
<figure id="s_access_token" class="image">
<div class="content">
<img src="images/scripting-05-access-token.png" alt="Access Token"/>
</div>
<figcaption>Figure 53. Générez votre jeton d&#8217;accès depuis l&#8217;onglet « Applications » de votre page de paramètres.</figcaption>
</figure>
<p>On vous demandera le périmètre applicatif que vous voulez pour ce jeton ainsi qu&#8217;une description.
Assurez-vous d&#8217;utiliser une bonne description pour être certain de supprimer le bon jeton quand votre script ou application ne sera plus utilisé.</p>
<p>GitHub ne vous montrera le jeton qu&#8217;une seule fois, alors assurez-vous de le copier.
Vous pouvez maintenant l&#8217;utiliser pour vous authentifier dans votre script au lieu d&#8217;utiliser un nom d&#8217;utilisateur et un mot de passe.
C&#8217;est agréable parce que vous pouvez limiter la portée de ce que vous voulez faire et le jeton est révocable.</p>
<p>Ceci a l&#8217;avantage supplémentaire d&#8217;augmenter votre limite horaire du nombre d&#8217;accès.
Sans authentification, vous serez limité à 60 requêtes par heure.
Avec authentification, vous pouvez faire jusqu&#8217;à 5 000 requêtes par heure.</p>
<p>Maintenant utilisons-le pour faire un commentaire sur un de nos problèmes.
Disons que nous voulons laisser un commentaire sur un problème en particulier, le problème n°6.
Pour faire cela, nous devons faire une requête HTTP POST à <code class="literal">repos/&lt;utilisateur&gt;/&lt;dépôt&gt;/issues/&lt;num&gt;/comments</code> avec le jeton que nous venons de générer en tant qu&#8217;en-tête "Authorization".</p>
<figure class="listing">
<pre class="source language-javascript"><code><span></span>$ curl -H <span style="font-style: italic">&quot;Content-Type: application/json&quot;</span> \
       -H <span style="font-style: italic">&quot;Authorization: token TOKEN&quot;</span> \
       --data <span style="font-style: italic">&#39;{&quot;body&quot;:&quot;A new comment, :+1:&quot;}&#39;</span> \
       https:<span style="font-style: italic">//api.github.com/repos/schacon/blink/issues/6/comments</span>
{
  <span style="font-style: italic">&quot;id&quot;</span>: 58322100,
  <span style="font-style: italic">&quot;html_url&quot;</span>: <span style="font-style: italic">&quot;https://github.com/schacon/blink/issues/6#issuecomment-58322100&quot;</span>,
  ...
  <span style="font-style: italic">&quot;user&quot;</span>: {
    <span style="font-style: italic">&quot;login&quot;</span>: <span style="font-style: italic">&quot;tonychacon&quot;</span>,
    <span style="font-style: italic">&quot;id&quot;</span>: 7874698,
    <span style="font-style: italic">&quot;avatar_url&quot;</span>: <span style="font-style: italic">&quot;https://avatars.githubusercontent.com/u/7874698?v=2&quot;</span>,
    <span style="font-style: italic">&quot;type&quot;</span>: <span style="font-style: italic">&quot;User&quot;</span>,
  },
  <span style="font-style: italic">&quot;created_at&quot;</span>: <span style="font-style: italic">&quot;2014-10-08T07:48:19Z&quot;</span>,
  <span style="font-style: italic">&quot;updated_at&quot;</span>: <span style="font-style: italic">&quot;2014-10-08T07:48:19Z&quot;</span>,
  <span style="font-style: italic">&quot;body&quot;</span>: <span style="font-style: italic">&quot;A new comment, :+1:&quot;</span>
}</code></pre>
</figure>
<p>Maintenant si vous allez à ce problème, vous pouvez voir le commentaire que nous avons posté avec succès comme dans <a id="xref-s_api_comment" href="#s_api_comment" class="xref">Un commentaire posté depuis l&#8217;interface de programmation GitHub</a>.</p>
<figure id="s_api_comment" class="image">
<div class="content">
<img src="images/scripting-06-comment.png" alt="API Comment"/>
</div>
<figcaption>Figure 54. Un commentaire posté depuis l&#8217;interface de programmation GitHub</figcaption>
</figure>
<p>Vous pouvez utiliser l&#8217;interface de programmation pour faire à peu près tout ce que vous pouvez faire sur le site web&#8201;&#8212;&#8201;créer et définir des jalons, assigner des gens à des problèmes ou à des requêtes de tirage, créer et changer des étiquettes, accéder à des données de <em>commit</em>, créer de nouveaux <em>commits</em> et des branches, ouvrir, fermer ou fusionner des requêtes de tirage, créer et éditer des équipes, commenter des lignes de code dans une requête de tirage, chercher dans le site et bien plus encore.</p>
</section>
<section class="sect2" title="Changer le statut d&#8217;une requête de tirage">
<h3 id="_changer_le_statut_d_une_requête_de_tirage">Changer le statut d&#8217;une requête de tirage</h3>
<p>Nous allons voir un dernier exemple très utile si vous travaillez avec des requêtes de tirage.
Chaque <em>commit</em> peut avoir un ou plusieurs statuts associés et il y a une interface de programmation pour ajouter et demander ce statut.</p>
<p>La plupart des services d&#8217;Intégration Continue et de test utilisent cette interface de programmation pour réagir aux poussées en testant le code qui a été poussé, et en signalant si ce commit a passé tous les tests.
Vous pourriez aussi utiliser ceci pour vérifier que le message de validation est formaté proprement, si l&#8217;auteur a suivi les recommandations de contribution, si la signature du <em>commit</em> est valide&#8201;&#8212;&#8201;vous pouvez faire autant de choses que vous le souhaitez.</p>
<p>Supposons que vous souhaitez définir un crochet web sur votre dépôt qui atteint un petit service web qui vérifie que le message de validation contient la chaîne <code class="literal">Signed-off-by</code>.</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>require <span style="font-style: italic">&#39;httparty&#39;</span>
require <span style="font-style: italic">&#39;sinatra&#39;</span>
require <span style="font-style: italic">&#39;json&#39;</span>

post <span style="font-style: italic">&#39;/payload&#39;</span> <span style="font-weight: bold">do</span>
  push = JSON.parse(request.body.read) <span style="font-style: italic"># parse the JSON</span>
  repo_name = push[<span style="font-style: italic">&#39;repository&#39;</span>][<span style="font-style: italic">&#39;full_name&#39;</span>]

  <span style="font-style: italic"># examine chaque message de validation</span>
  push[<span style="font-style: italic">&quot;commits&quot;</span>].each <span style="font-weight: bold">do</span> |commit|

    <span style="font-style: italic"># cherche la chaîne &quot;Signed-off-by&quot;</span>
    <span style="font-weight: bold">if</span> <span style="font-style: italic">/Signed-off-by/</span>.match commit[<span style="font-style: italic">&#39;message&#39;</span>]
      state = <span style="font-style: italic">&#39;success&#39;</span>
      description = <span style="font-style: italic">&#39;Successfully signed off!&#39;</span>
    <span style="font-weight: bold">else</span>
      state = <span style="font-style: italic">&#39;failure&#39;</span>
      description = <span style="font-style: italic">&#39;No signoff found.&#39;</span>
    <span style="font-weight: bold">end</span>

    <span style="font-style: italic"># envoie le statut à GitHub</span>
    sha = commit[<span style="font-style: italic">&quot;id&quot;</span>]
    status_url = <span style="font-style: italic">&quot;https://api.github.com/repos/</span><span style="font-weight: bold; font-style: italic">#{</span>repo_name<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">/statuses/</span><span style="font-weight: bold; font-style: italic">#{</span>sha<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span>

    status = {
      <span style="font-style: italic">&quot;state&quot;</span>       =&gt; state,
      <span style="font-style: italic">&quot;description&quot;</span> =&gt; description,
      <span style="font-style: italic">&quot;target_url&quot;</span>  =&gt; <span style="font-style: italic">&quot;http://example.com/how-to-signoff&quot;</span>,
      <span style="font-style: italic">&quot;context&quot;</span>     =&gt; <span style="font-style: italic">&quot;validate/signoff&quot;</span>
    }
    HTTParty.post(status_url,
      <span style="font-style: italic">:body</span> =&gt; status.to_json,
      <span style="font-style: italic">:headers</span> =&gt; {
        <span style="font-style: italic">&#39;Content-Type&#39;</span>  =&gt; <span style="font-style: italic">&#39;application/json&#39;</span>,
        <span style="font-style: italic">&#39;User-Agent&#39;</span>    =&gt; <span style="font-style: italic">&#39;tonychacon/signoff&#39;</span>,
        <span style="font-style: italic">&#39;Authorization&#39;</span> =&gt; <span style="font-style: italic">&quot;token </span><span style="font-weight: bold; font-style: italic">#{</span>ENV[<span style="font-style: italic">&#39;TOKEN&#39;</span>]<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&quot;</span> }
    )
  <span style="font-weight: bold">end</span>
<span style="font-weight: bold">end</span></code></pre>
</figure>
<p>Ça devrait être simple à suivre.
Dans ce crochet web, nous examinons chaque <em>commit</em> qui vient d&#8217;être poussé, nous cherchons la chaîne "Signed-off-by" dans le message de validation et enfin nous faisons un POST via HTTP au point d&#8217;entrée applicatif <code class="literal">/repos/&lt;utilisateur&gt;/&lt;dépôt&gt;/statuses/&lt;commit_sha&gt;</code> avec le statut.</p>
<p>Dans ce cas, vous pouvez envoyer un état ("success", "failure", "error"), une description de ce qui s&#8217;est passé, un URL cible où l&#8217;utilisateur peut aller pour plus d&#8217;informations et un « contexte » dans le cas où il y a de multiples statuts pour un seul <em>commit</em>.
Par exemple, un service de test peut fournir un statut et un service de validation comme celui-ci peut aussi fournir un statut&#8201;&#8212;&#8201;le champ « contexte » permet de les différencier.</p>
<p>Si quelqu&#8217;un ouvre une nouvelle requête de tirage sur GitHub et que ce crochet est opérationnel, vous pouvez voir quelque chose comme <a id="xref-s_commit_status" href="#s_commit_status" class="xref">Statut de <em>commit</em> via l&#8217;interface de programmation.</a>.</p>
<figure id="s_commit_status" class="image">
<div class="content">
<img src="images/scripting-07-status.png" alt="Commit status"/>
</div>
<figcaption>Figure 55. Statut de <em>commit</em> via l&#8217;interface de programmation.</figcaption>
</figure>
<p>Vous pouvez voir maintenant une petite coche verte près du <em>commit</em> qui contient la chaîne « Signed-off-by » dans le message et une croix rouge pour celui que l&#8217;auteur à oublié de signer.
Vous pouvez aussi voir que la requête de tirage prend le statut du dernier <em>commit</em> de la branche et avertit si c&#8217;est un échec.
C&#8217;est très utile si vous utilisez cette interface de programmation pour des résultats de test pour que vous ne fusionniez pas accidentellement quelque chose où le dernier <em>commit</em> échoue aux tests.</p>
</section>
<section class="sect2" title="Octokit">
<h3 id="_octokit">Octokit</h3>
<p>Bien que nous ayons presque tout fait à travers <code class="literal">curl</code> et de simples requêtes HTTP dans ces exemples, il existe plusieurs bibliothèques open source qui rendent cette interface de programmation plus idiomatique.
Au moment de la rédaction de ce document, les langages supportés incluent Python, Go, Objective-C, Ruby et .NET.
Consultez <a href="http://github.com/octokit" class="link">http://github.com/octokit</a> pour plus d&#8217;informations à ce propos, puisqu&#8217;ils gèrent une bonne partie de HTTP pour vous.</p>
<p>Heureusement ces outils devraient vous aider à personnaliser et modifier GitHub pour travailler mieux suivant vos méthodes de travail spécifiques.
Pour une documentation complète de l&#8217;ensemble de l&#8217;interface de programmation ainsi que pour des guides pour les tâches habituelles, consultez <a href="https://developer.github.com" class="link">https://developer.github.com</a>.</p>
</section>
</section>
<section class="sect1" title="Résumé">
<h2 id="_résumé">Résumé</h2>
<p>Vous êtes maintenant un utilisateur de GitHub.
Vous savez comment créer un compte, gérer une organisation, créer des dépôts et pousser dessus, contribuer aux projets d&#8217;autres utilisateurs et accepter les contributions sur les vôtres.
Dans le chapitre suivant, vous découvrirez d&#8217;autres puissants outils et des astuces pour faire face à des situations complexes.
Vous deviendrez un expert en Git.</p>
</section>
</section>
</body>
</html>