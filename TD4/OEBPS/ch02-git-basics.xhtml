<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="fr" lang="fr">
<head>
<meta charset="UTF-8"/>
<title>Les bases de Git</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Les bases de Git" epub:type="chapter" id="ch02-git-basics">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Les</b> <b>bases</b> <b>de</b> <b>Git</b></small></h1>
</div>
</header>
<div class="abstract" epub:type="preamble">
<p>Si vous ne deviez lire qu&#8217;un chapitre avant de commencer à utiliser Git, c&#8217;est celui-ci.
Ce chapitre couvre les commandes de base nécessaires pour réaliser la vaste majorité des activités avec Git.
À la fin de ce chapitre, vous devriez être capable de configurer et initialiser un dépôt, commencer et arrêter le suivi de version de fichiers, d&#8217;indexer et valider des modifications.
Nous vous montrerons aussi comment paramétrer Git pour qu&#8217;il ignore certains fichiers ou patrons de fichiers, comment revenir sur les erreurs rapidement et facilement, comment parcourir l&#8217;historique de votre projet et voir les modifications entre deux validations, et comment pousser et tirer les modifications avec des dépôts distants.</p>
</div>
<section class="sect1" title="Démarrer un dépôt Git">
<h2 id="s_getting_a_repo">Démarrer un dépôt Git</h2>
<p>Vous pouvez principalement démarrer un dépôt Git de deux manières.
La première consiste à prendre un projet ou un répertoire existant et à l&#8217;importer dans Git.
La seconde consiste à cloner un dépôt Git existant sur un autre serveur.</p>
<section class="sect2" title="Initialisation d&#8217;un dépôt Git dans un répertoire existant">
<h3 id="_initialisation_d_un_dépôt_git_dans_un_répertoire_existant">Initialisation d&#8217;un dépôt Git dans un répertoire existant</h3>
<p>Si vous commencez à suivre un projet existant dans Git, vous n&#8217;avez qu&#8217;à vous positionner dans le répertoire du projet et saisir :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git init</code></pre>
</figure>
<p>Cela crée un nouveau sous-répertoire nommé <code class="literal">.git</code> qui contient tous les fichiers nécessaires au dépôt — un squelette de dépôt Git.
Pour l&#8217;instant, aucun fichier n&#8217;est encore versionné.
(Cf. <a id="xref--ch10-git-internals" href="ch10-git-internals.xhtml" class="xref">Les tripes de Git</a> pour plus d&#8217;information sur les fichiers contenus dans le répertoire <code class="literal">.git</code> que vous venez de créer.)</p>
<p>Si vous souhaitez démarrer le contrôle de version sur des fichiers existants (par opposition à un répertoire vide), vous devrez probablement suivre ces fichiers et faire un commit initial.
Vous pouvez le réaliser avec quelques commandes <code class="literal">add</code> qui spécifient les fichiers que vous souhaitez suivre, suivies par un <code class="literal">git commit</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git add *.c
<span style="font-weight: bold">$</span> git add LICENSE
<span style="font-weight: bold">$</span> git commit -m <span style="font-style: italic">&#39;initial project version&#39;</span></code></pre>
</figure>
</section>
<section class="sect2" title="Cloner un dépôt existant">
<h3 id="s_git_cloning">Cloner un dépôt existant</h3>
<p>Si vous souhaitez obtenir une copie d&#8217;un dépôt Git existant — par exemple, un projet auquel vous aimeriez contribuer — la commande dont vous avez besoin s&#8217;appelle <code class="literal">git clone</code>.
Si vous êtes familier avec d&#8217;autres systèmes de gestion de version tels que Subversion, vous noterez que la commande est <code class="literal">clone</code> et non <code class="literal">checkout</code>.
C&#8217;est une distinction importante — Git reçoit une copie de quasiment toutes les données dont le serveur dispose.
Toutes les versions de tous les fichiers pour l&#8217;historique du projet sont téléchargées quand vous lancez <code class="literal">git clone</code>.
En fait, si le disque du serveur se corrompt, vous pouvez utiliser n&#8217;importe quel clone pour remettre le serveur dans l&#8217;état où il était au moment du clonage (vous pourriez perdre quelques paramètres du serveur, mais toutes les données sous gestion de version seraient récupérées — cf. <a id="xref--ch04-git-server--s_git_on_the_server" href="ch04-git-server.xhtml#s_git_on_the_server" class="xref">Installation de Git sur un serveur</a> pour de plus amples détails).</p>
<p>Vous clonez un dépôt avec <code class="literal">git clone [url]</code>.
Par exemple, si vous voulez cloner la bibliothèque logicielle Git appelée libgit2, vous pouvez le faire de la manière suivante :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://github.com/libgit2/libgit2</code></pre>
</figure>
<p>Ceci crée un répertoire nommé “libgit2”, initialise un répertoire <code class="literal">.git</code> à l&#8217;intérieur, récupère toutes les données de ce dépôt, et extrait une copie de travail de la dernière version.
Si vous examinez le nouveau répertoire <code class="literal">libgit2</code>, vous y verrez les fichiers du projet, prêts à être modifiés ou utilisés.
Si vous souhaitez cloner le dépôt dans un répertoire nommé différemment, vous pouvez spécifier le nom dans une option supplémentaire de la ligne de commande :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://github.com/libgit2/libgit2 monlibgit2</code></pre>
</figure>
<p>Cette commande réalise la même chose que la précédente, mais le répertoire cible s&#8217;appelle <code class="literal">monlibgit2</code>.</p>
<p>Git dispose de différents protocoles de transfert que vous pouvez utiliser.
L&#8217;exemple précédent utilise le protocole <code class="literal">https://</code>, mais vous pouvez aussi voir <code class="literal">git://</code> ou <code class="literal">utilisateur@serveur:/chemin.git</code>, qui utilise le protocole de transfert SSH.
<a href="ch04-git-server.xhtml#s_git_on_the_server" class="xref">Installation de Git sur un serveur</a> introduit toutes les options disponibles pour mettre en place un serveur Git, ainsi que leurs avantages et inconvénients.</p>
</section>
</section>
<section class="sect1" title="Enregistrer des modifications dans le dépôt">
<h2 id="_enregistrer_des_modifications_dans_le_dépôt">Enregistrer des modifications dans le dépôt</h2>
<p>Vous avez à présent un dépôt Git valide et une extraction ou copie de travail du projet.
Vous devez faire quelques modifications et valider des instantanés de ces modifications dans votre dépôt chaque fois que votre projet atteint un état que vous souhaitez enregistrer.</p>
<p>Souvenez-vous que chaque fichier de votre copie de travail peut avoir deux états : sous suivi de version ou non suivi.
Les fichiers suivis sont les fichiers qui appartenaient déjà au dernier instantané ; ils peuvent être inchangés, modifiés ou indexés.
Tous les autres fichiers sont non suivis — tout fichier de votre copie de travail qui n&#8217;appartenait pas à votre dernier instantané et n&#8217;a pas été indexé.
Quand vous clonez un dépôt pour la première fois, tous les fichiers seront sous suivi de version et inchangés car Git vient tout juste de les extraire et vous ne les avez pas encore édités.</p>
<p>Au fur et à mesure que vous éditez des fichiers, Git les considère comme modifiés, car vous les avez modifiés depuis le dernier instantané.
Vous <strong>indexez</strong> ces fichiers modifiés et vous enregistrez toutes les modifications indexées, puis ce cycle se répète.</p>
<figure class="image">
<div class="content">
<img src="images/lifecycle.png" alt="Le cycle de vie des états des fichiers."/>
</div>
<figcaption>Figure 1. Le cycle de vie des états des fichiers.</figcaption>
</figure>
<section class="sect2" title="Vérifier l&#8217;état des fichiers">
<h3 id="s_checking_status">Vérifier l&#8217;état des fichiers</h3>
<p>L&#8217;outil principal pour déterminer quels fichiers sont dans quel état est la commande <code class="literal">git status</code>.
Si vous lancez cette commande juste après un clonage, vous devriez voir ce qui suit :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
rien à valider, la copie de travail est propre</code></pre>
</figure>
<p>Ce message signifie que votre copie de travail est propre, en d&#8217;autres termes, aucun fichier suivi n&#8217;a été modifié.
Git ne voit pas non plus de fichiers non-suivis, sinon ils seraient listés ici.
Enfin, la commande vous indique sur quelle branche vous êtes.
Pour l&#8217;instant, c&#8217;est toujours “master”, qui correspond à la valeur par défaut ; nous ne nous en soucierons pas maintenant.
Dans <a id="xref--ch03-git-branching" href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a>, nous parlerons plus en détail des branches et des références.</p>
<p>Supposons que vous souhaitez ajouter un nouveau fichier au projet, un simple fichier LISEZMOI.
Si le fichier n&#8217;existait pas auparavant, et si vous lancez <code class="literal">git status</code>, vous voyez votre fichier non suivi comme suit :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> echo <span style="font-style: italic">&#39;Mon Projet&#39;</span> &gt; LISEZMOI
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Fichiers non suivis:
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour inclure dans ce qui sera validé)

        LISEZMOI

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez &quot;git add&quot; pour les suivre)</code></pre>
</figure>
<p>Vous pouvez constater que votre nouveau fichier <code class="literal">LISEZMOI</code> n&#8217;est pas en suivi de version, car il apparaît dans la section « Fichiers non suivis » de l&#8217;état de la copie de travail.
« non suivi » signifie simplement que Git détecte un fichier qui n&#8217;était pas présent dans le dernier instantané ; Git ne le placera sous suivi de version que quand vous lui indiquerez de le faire.
Ce comportement permet de ne pas placer accidentellement sous suivi de version des fichiers binaires générés ou d&#8217;autres fichiers que vous ne voulez pas inclure.
Mais vous voulez inclure le fichier <code class="literal">LISEZMOI</code> dans l&#8217;instantané, alors commençons à suivre ce fichier.</p>
</section>
<section class="sect2" title="Placer de nouveaux fichiers sous suivi de version">
<h3 id="s_tracking_files">Placer de nouveaux fichiers sous suivi de version</h3>
<p>Pour commencer à suivre un nouveau fichier, vous utilisez la commande <code class="literal">git add</code>.
Pour commencer à suivre le fichier <code class="literal">LISEZMOI</code>, vous pouvez entrer ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git add LISEZMOI</code></pre>
</figure>
<p>Si vous lancez à nouveau la commande <code class="literal">git status</code>, vous pouvez constater que votre fichier <code class="literal">LISEZMOI</code> est maintenant suivi et indexé :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : LISEZMOI</code></pre>
</figure>
<p>Vous pouvez affirmer qu&#8217;il est indexé car il apparaît dans la section « Modifications qui seront validées ».
Si vous validez à ce moment, la version du fichier à l&#8217;instant où vous lancez <code class="literal">git add</code> est celle qui sera dans l&#8217;historique des instantanés.
Vous pouvez vous souvenir que lorsque vous avez précédemment lancé <code class="literal">git init</code>, vous avez ensuite lancé <code class="literal">git add (fichiers)</code> — c&#8217;était bien sûr pour commencer à placer sous suivi de version les fichiers de votre répertoire de travail.
La commande <code class="literal">git add</code> accepte en paramètre un chemin qui correspond à un fichier ou un répertoire ; dans le cas d&#8217;un répertoire, la commande ajoute récursivement tous les fichiers de ce répertoire.</p>
</section>
<section class="sect2" title="Indexer des fichiers modifiés">
<h3 id="_indexer_des_fichiers_modifiés">Indexer des fichiers modifiés</h3>
<p>Maintenant, modifions un fichier qui est déjà sous suivi de version.
Si vous modifiez le fichier sous suivi de version appelé <code class="literal">CONTRIBUTING.md</code> et que vous lancez à nouveau votre commande <code class="literal">git status</code>, vous verrez ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : LISEZMOI

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>Le fichier <code class="literal">CONTRIBUTING.md</code> apparaît sous la section nommée « Modifications qui ne seront pas validées » ce qui signifie que le fichier sous suivi de version a été modifié dans la copie de travail mais n&#8217;est pas encore indexé.
Pour l&#8217;indexer, il faut lancer la commande <code class="literal">git add</code>. <code class="literal">git add</code> est une commande multi-usage — elle peut être utilisée pour placer un fichier sous suivi de version, pour indexer un fichier ou pour d&#8217;autres actions telles que marquer comme résolus des conflits de fusion de fichiers.
Sa signification s&#8217;approche plus de « ajouter ce contenu pour la prochaine validation » que de « ajouter ce contenu au projet ».
Lançons maintenant <code class="literal">git add</code> pour indexer le fichier <code class="literal">CONTRIBUTING.md</code>, et relançons la commande <code class="literal">git status</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : LISEZMOI
        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>À présent, les deux fichiers sont indexés et feront partie de la prochaine validation.
Mais supposons que vous souhaitiez apporter encore une petite modification au fichier <code class="literal">CONTRIBUTING.md</code> avant de réellement valider la nouvelle version.
Vous l&#8217;ouvrez à nouveau, réalisez la petite modification et vous voilà prêt à valider.
Néanmoins, vous lancez <code class="literal">git status</code> une dernière fois :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> vim CONTRIBUTING.md
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : LISEZMOI
        modifié :         CONTRIBUTING.md

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>Que s&#8217;est-il donc passé ?
À présent, <code class="literal">CONTRIBUTING.md</code> apparaît à la fois comme indexé et non indexé.
En fait, Git indexe un fichier dans son état au moment où la commande <code class="literal">git add</code> est lancée.
Si on valide les modifications maintenant, la version de <code class="literal">CONTRIBUTING.md</code> qui fera partie de l&#8217;instantané est celle correspondant au moment où la commande <code class="literal">git add CONTRIBUTING.md</code> a été lancée, et non la version actuellement présente dans la copie de travail au moment où la commande <code class="literal">git commit</code> est lancée.
Si le fichier est modifié après un <code class="literal">git add</code>, il faut relancer <code class="literal">git add</code> pour prendre en compte l&#8217;état actuel de la copie de travail :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git add CONTRIBUTING.md
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : LISEZMOI
        modifié :         CONTRIBUTING.md</code></pre>
</figure>
</section>
<section class="sect2" title="Statut court">
<h3 id="_statut_court">Statut court</h3>
<p>Bien que <code class="literal">git status</code> soit informatif, il est aussi plutôt verbeux.
Git a aussi une option de status court qui permet de voir les modifications de façon plus compacte.
Si vous lancez <code class="literal">git status -s</code> ou <code class="literal">git status --short</code>, vous obtenez une information bien plus simple.</p>
<figure class="listing">
<pre class="screen"><code>$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt</code></pre>
</figure>
<p>Les nouveaux fichiers qui ne sont pas suivis sont précédés de <code class="literal">??</code>, les fichiers nouveaux et indexés sont précédés de <code class="literal">A</code>, les fichiers modifiés de <code class="literal">M</code> et ainsi de suite.
Il y a deux colonnes d&#8217;état - celle de gauche indique l&#8217;état de l&#8217;index et celle de droite l&#8217;état du dossier de travail.
Donc l&#8217;exemple ci-dessus indique que le fichier <code class="literal">README</code> est modifié dans le répertoire de travail mais n&#8217;est pas encore indexé, tandis que le fichier <code class="literal">lib/simplegit.rb</code> est modifié et indexé.
Le fichier <code class="literal">Rakefile</code> a été modifié, indexé puis modifié à nouveau, de sorte qu&#8217;il a des modifications à la fois indexées et non-indexées.</p>
</section>
<section class="sect2" title="Ignorer des fichiers">
<h3 id="s_ignoring">Ignorer des fichiers</h3>
<p>Il apparaît souvent qu&#8217;un type de fichiers présent dans la copie de travail ne doit pas être ajouté automatiquement ou même ne doit pas apparaître comme fichier potentiel pour le suivi de version.
Ce sont par exemple des fichiers générés automatiquement tels que les fichiers de journaux ou de sauvegardes produits par l&#8217;outil que vous utilisez.
Dans un tel cas, on peut énumérer les patrons de noms de fichiers à ignorer dans un fichier <code class="literal">.gitignore</code>.
Voici ci-dessous un exemple de fichier <code class="literal">.gitignore</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cat .gitignore
*.[oa]
*~</code></pre>
</figure>
<p>La première ligne ordonne à Git d&#8217;ignorer tout fichier se terminant en <code class="literal">.o</code> ou <code class="literal">.a</code> — des fichiers objet ou archive qui sont généralement produits par la compilation d&#8217;un programme.
La seconde ligne indique à Git d&#8217;ignorer tous les fichiers se terminant par un tilde (<code class="literal">~</code>), ce qui est le cas des noms des fichiers temporaires pour de nombreux éditeurs de texte tels qu&#8217;Emacs.
On peut aussi inclure un répertoire <code class="literal">log</code>, <code class="literal">tmp</code> ou <code class="literal">pid</code>, ou le répertoire de documentation générée automatiquement, ou tout autre fichier.
Renseigner un fichier <code class="literal">.gitignore</code> avant de commencer à travailler est généralement une bonne idée qui évitera de valider par inadvertance des fichiers qui ne doivent pas apparaître dans le dépôt Git.</p>
<p>Les règles de construction des patrons à placer dans le fichier <code class="literal">.gitignore</code> sont les suivantes :</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">les lignes vides ou commençant par <code class="literal">#</code> sont ignorées ;</span>
</li>
<li>
<span class="principal">les patrons standards de fichiers sont utilisables ;</span>
</li>
<li>
<span class="principal">si le patron se termine par une barre oblique (<code class="literal">/</code>), il indique un répertoire ;</span>
</li>
<li>
<span class="principal">un patron commençant par un point d&#8217;exclamation (<code class="literal">!</code>) indique des fichiers à inclure malgré les autres règles.</span>
</li>
</ul>
</div>
<p>Les patrons standards de fichiers sont des expressions régulières simplifiées utilisées par les shells.
Un astérisque (<code class="literal">*</code>) correspond à un ou plusieurs caractères ; <code class="literal">[abc]</code> correspond à un des trois caractères listés dans les crochets, donc a ou b ou c ; un point d&#8217;interrogation (<code class="literal">?</code>) correspond à un unique caractère ; des crochets entourant des caractères séparés par un tiret (<code class="literal">[0-9]</code>) correspond à un caractère dans l&#8217;intervalle des deux caractères indiqués, donc ici de 0 à 9.
Vous pouvez aussi utiliser deux astérisques pour indiquer une série de répertoires inclus ; <code class="literal">a/**/z</code> correspond donc à <code class="literal">a/z</code>, <code class="literal">a/b/z</code>, <code class="literal">a/b/c/z</code> et ainsi de suite.</p>
<p>Voici un autre exemple de fichier <code class="literal">.gitignore</code> :</p>
<figure class="listing">
<pre class="source language-"><code># pas de fichier .a
*.a

# mais suivre lib.a malgré la règle précédente
!lib.a

# ignorer uniquement le fichier TODO à la racine du projet
/TODO

# ignorer tous les fichiers dans le répertoire build
build/

# ignorer doc/notes.txt, mais pas doc/server/arch.txt
doc/*.txt

# ignorer tous les fichiers .txt sous le répertoire doc/
doc/**/*.txt</code></pre>
</figure>
<aside class="admonition tip" title="Tip" epub:type="help">
<div class="content">
<p>GitHub maintient une liste assez complète d&#8217;exemples de fichiers <code class="literal">.gitignore</code> correspondant à de nombreux types de projets et langages. Voir <a href="https://github.com/github/gitignore" class="link">https://github.com/github/gitignore</a> pour obtenir un point de départ pour votre projet.</p>
</div>
</aside>
</section>
<section class="sect2" title="Inspecter les modifications indexées et non indexées">
<h3 id="s_git_diff_staged">Inspecter les modifications indexées et non indexées</h3>
<p>Si le résultat de la commande <code class="literal">git status</code> est encore trop vague — lorsqu&#8217;on désire savoir non seulement quels fichiers ont changé mais aussi ce qui a changé dans ces fichiers — on peut utiliser la commande <code class="literal">git diff</code>.
Cette commande sera traitée en détail plus loin ; mais elle sera vraisemblablement utilisée le plus souvent pour répondre aux questions suivantes : qu&#8217;est-ce qui a été modifié mais pas encore indexé ? Quelle modification a été indexée et est prête pour la validation ? Là où <code class="literal">git status</code> répond de manière générale à ces questions, <code class="literal">git diff</code> montre les lignes exactes qui ont été ajoutées, modifiées ou effacées — le patch en somme.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : LISEZMOI

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>Pour visualiser ce qui a été modifié mais pas encore indexé, tapez <code class="literal">git diff</code> sans autre argument :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you&#39;re contributing
 in the first place, you&#39;re less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it&#39;s</code></pre>
</figure>
<p>Cette commande compare le contenu du répertoire de travail avec la zone d&#8217;index.
Le résultat vous indique les modifications réalisées mais non indexées.</p>
<p>Si vous souhaitez visualiser les modifications indexées qui feront partie de la prochaine validation, vous pouvez utiliser <code class="literal">git diff --cached</code> (avec les versions 1.6.1 et supérieures de Git, vous pouvez aussi utiliser <code class="literal">git diff --staged</code>, qui est plus mnémotechnique).
Cette commande compare les fichiers indexés et le dernier instantané :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git diff --staged
diff --git a/LISEZMOI b/LISEZMOI
new file mode 100644
index 0000000..1e17b0c
--- /dev/null
+++ b/LISEZMOI
@@ -0,0 +1 @@
+Mon Projet</code></pre>
</figure>
<p>Il est important de noter que <code class="literal">git diff</code> ne montre pas les modifications réalisées depuis la dernière validation — seulement les modifications qui sont non indexées.
Cela peut introduire une confusion car si tous les fichiers modifiés ont été indexés, <code class="literal">git diff</code> n&#8217;indiquera aucun changement.</p>
<p>Par exemple, si vous indexez le fichier <code class="literal">CONTRIBUTING.md</code> et l&#8217;éditez ensuite, vous pouvez utiliser <code class="literal">git diff</code> pour visualiser les modifications indexées et non indexées de ce fichier. Si l&#8217;état est le suivant :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git add CONTRIBUTING.md
<span style="font-weight: bold">$</span> echo <span style="font-style: italic">&#39;ligne de test&#39;</span> &gt;&gt; CONTRIBUTING.md
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        nouveau fichier : CONTRIBUTING.md

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>À présent, vous pouvez utiliser <code class="literal">git diff</code> pour visualiser les modifications non indexées :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
<span style="font-weight: bold"> #</span><span style="font-style: italic"># Starter Projects</span>

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+ligne de test</code></pre>
</figure>
<p>et <code class="literal">git diff --cached</code> pour visualiser ce qui a été indexé jusqu&#8217;à maintenant :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you&#39;re contributing
 in the first place, you&#39;re less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it&#39;s</code></pre>
</figure>
<aside id="s_git_difftool" class="admonition note" title="Note: Git Diff dans un outil externe" epub:type="note">
<h2>Git Diff dans un outil externe</h2>
<div class="content">
<p>Nous allons continuer à utiliser la commande <code class="literal">git diff</code> de différentes manières par la suite.
Il existe une autre manière de visualiser les différences si vous préférez un outil graphique ou externe.
Si vous lancez <code class="literal">git difftool</code> au lieu de <code class="literal">git diff</code>, vous pourrez visualiser les différences grâce à une application telle que Araxis, emerge, vimdiff ou autre.
Lancez <code class="literal">git difftool --tool-help</code> pour connaître les applications disponibles sur votre système.</p>
</div>
</aside>
</section>
<section class="sect2" title="Valider vos modifications">
<h3 id="s_committing_changes">Valider vos modifications</h3>
<p>Maintenant que votre zone d&#8217;index est dans l&#8217;état désiré, vous pouvez valider vos modifications.
Souvenez-vous que tout ce qui est encore non indexé — tous les fichiers qui ont été créés ou modifiés mais n&#8217;ont pas subi de <code class="literal">git add</code> depuis que vous les avez modifiés — ne feront pas partie de la prochaine validation.
Ils resteront en tant que fichiers modifiés sur votre disque.</p>
<p>Dans notre cas, la dernière fois que vous avez lancé <code class="literal">git status</code>, vous avez vérifié que tout était indexé, et vous êtes donc prêt à valider vos modifications.
La manière la plus simple de valider est de taper <code class="literal">git commit</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git commit</code></pre>
</figure>
<p>Cette action lance votre éditeur par défaut (qui est paramétré par la variable d&#8217;environnement <code class="literal">$EDITOR</code> de votre shell — habituellement vim ou Emacs, mais vous pouvez le paramétrer spécifiquement pour Git en utilisant la commande <code class="literal">git config --global core.editor</code> comme nous l&#8217;avons vu au <a id="xref--ch01-introduction" href="ch01-introduction.xhtml" class="xref">Démarrage rapide</a>).</p>
<p>L&#8217;éditeur affiche le texte suivant :</p>
<figure class="listing">
<pre class="source language-"><code># Veuillez saisir le message de validation pour vos modifications. Les lignes
# commençant par '#' seront ignorées, et un message vide abandonne la validation.
# Sur la branche master
# Votre branche est à jour avec 'origin/master'.
#
# Modifications qui seront validées :
#       nouveau fichier : LISEZMOI
#       modifié :         CONTRIBUTING.md
#</code></pre>
</figure>
<p>Vous constatez que le message de validation par défaut contient une ligne vide suivie en commentaire par le résultat de la commande <code class="literal">git status</code>.
Vous pouvez effacer ces lignes de commentaire et saisir votre propre message de validation, ou vous pouvez les laisser en place pour vous aider à vous rappeler ce que vous êtes en train de valider (pour un rappel plus explicite de ce que vous avez modifié, vous pouvez aussi passer l&#8217;option <code class="literal">-v</code> à la commande <code class="literal">git commit</code>.
Cette option place le résultat du diff en commentaire dans l&#8217;éditeur pour vous permettre de visualiser exactement ce que vous avez modifié.
Quand vous quittez l&#8217;éditeur (après avoir sauvegardé le message), Git crée votre <em>commit</em> avec ce message de validation (après avoir retiré les commentaires et le diff).</p>
<p>Autrement, vous pouvez spécifier votre message de validation en ligne avec la commande <code class="literal">git commit</code> en le saisissant après l&#8217;option <code class="literal">-m</code>, comme ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git commit -m <span style="font-style: italic">&quot;Story 182: Fix benchmarks for speed&quot;</span>
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 LISEZMOI</code></pre>
</figure>
<p>À présent, vous avez créé votre premier <em>commit</em> ! Vous pouvez constater que le <em>commit</em> vous fournit quelques informations sur lui-même : sur quelle branche vous avez validé (<code class="literal">master</code>), quelle est sa somme de contrôle SHA-1 (<code class="literal">463dc4f</code>), combien de fichiers ont été modifiés, et quelques statistiques sur les lignes ajoutées et effacées dans ce <em>commit</em>.</p>
<p>Souvenez-vous que la validation enregistre l&#8217;instantané que vous avez préparé dans la zone d&#8217;index.
Tout ce que vous n&#8217;avez pas indexé est toujours en état modifié ; vous pouvez réaliser une nouvelle validation pour l&#8217;ajouter à l&#8217;historique.
À chaque validation, vous enregistrez un instantané du projet en forme de jalon auquel vous pourrez revenir ou avec lequel comparer votre travail ultérieur.</p>
</section>
<section class="sect2" title="Passer l&#8217;étape de mise en index">
<h3 id="_passer_l_étape_de_mise_en_index">Passer l&#8217;étape de mise en index</h3>
<p>
Bien qu&#8217;il soit incroyablement utile de pouvoir organiser les <em>commits</em> exactement comme on l&#8217;entend, la gestion de la zone d&#8217;index est parfois plus complexe que nécessaire dans le cadre d&#8217;une utilisation normale.
Si vous souhaitez éviter la phase de placement des fichiers dans la zone d&#8217;index, Git fournit un raccourci très simple.
L&#8217;ajout de l&#8217;option <code class="literal">-a</code> à la commande <code class="literal">git commit</code> ordonne à Git de placer automatiquement tout fichier déjà en suivi de version dans la zone d&#8217;index avant de réaliser la validation, évitant ainsi d&#8217;avoir à taper les commandes <code class="literal">git add</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md

aucune modification n&#39;a été ajoutée à la validation (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)
<span style="font-weight: bold">$</span> git commit -a -m <span style="font-style: italic">&#39;added new benchmarks&#39;</span>
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)</code></pre>
</figure>
<p>Notez bien que vous n&#8217;avez pas eu à lancer <code class="literal">git add</code> sur le fichier <code class="literal">CONTRIBUTING.md</code> avant de valider.</p>
</section>
<section class="sect2" title="Effacer des fichiers">
<h3 id="s_removing_files">Effacer des fichiers</h3>
<p>
Pour effacer un fichier de Git, vous devez l&#8217;éliminer des fichiers en suivi de version (plus précisément, l&#8217;effacer dans la zone d&#8217;index) puis valider.
La commande <code class="literal">git rm</code> réalise cette action mais efface aussi ce fichier de votre copie de travail de telle sorte que vous ne le verrez pas réapparaître comme fichier non suivi en version à la prochaine validation.</p>
<p>Si vous effacez simplement le fichier dans votre copie de travail, il apparaît sous la section « Modifications qui ne seront pas validées » (c&#8217;est-à-dire, <em>non indexé</em>) dans le résultat de <code class="literal">git status</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> rm PROJECTS.md
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui ne seront pas validées :
  (utilisez &quot;git add/rm &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        supprimé :        PROJECTS.md

aucune modification n&#39;a été ajoutée à la validation (utilisez &quot;git add&quot; ou &quot;git commit -a&quot;)</code></pre>
</figure>
<p>Ensuite, si vous lancez <code class="literal">git rm</code>, l&#8217;effacement du fichier est indexé :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git rm PROJECTS.md
rm &#39;PROJECTS.md&#39;
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        supprimé :        PROJECTS.md</code></pre>
</figure>
<p>Lors de la prochaine validation, le fichier sera absent et non-suivi en version.
Si vous avez auparavant modifié et indexé le fichier, son élimination doit être forcée avec l&#8217;option <code class="literal">-f</code>.
C&#8217;est une mesure de sécurité pour empêcher un effacement accidentel de données qui n&#8217;ont pas encore été enregistrées dans un instantané et qui seraient définitivement perdues.</p>
<p>Un autre scénario serait de vouloir abandonner le suivi de version d&#8217;un fichier tout en le conservant dans la copie de travail.
Ceci est particulièrement utile lorsqu&#8217;on a oublié de spécifier un patron dans le fichier <code class="literal">.gitignore</code> et on a accidentellement indexé un fichier, tel qu&#8217;un gros fichier de journal ou une série d&#8217;archives de compilation <code class="literal">.a</code>.
Pour réaliser ce scénario, utilisez l&#8217;option <code class="literal">--cached</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git rm --cached LISEZMOI</code></pre>
</figure>
<p>Vous pouvez spécifier des noms de fichiers ou de répertoires, ou des patrons de fichiers à la commande <code class="literal">git rm</code>.
Cela signifie que vous pouvez lancer des commandes telles que :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git rm log/<span style="font-weight: bold; font-style: italic">\*</span>.log</code></pre>
</figure>
<p>Notez bien la barre oblique inverse (<code class="literal">\</code>) devant <code class="literal">*</code>.
Il est nécessaire d&#8217;échapper le caractère <code class="literal">*</code> car Git utilise sa propre expansion de nom de fichier en addition de l&#8217;expansion du shell. Ce caractère d&#8217;échappement doit être omis sous Windows si vous utilisez le terminal système.
Cette commande efface tous les fichiers avec l&#8217;extension <code class="literal">.log</code> présents dans le répertoire <code class="literal">log/</code>.
Vous pouvez aussi lancer une commande telle que :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git rm <span style="font-weight: bold; font-style: italic">\*</span>~</code></pre>
</figure>
<p>Cette commande élimine tous les fichiers se terminant par <code class="literal">~</code>.</p>
</section>
<section class="sect2" title="Déplacer des fichiers">
<h3 id="s_git_mv">Déplacer des fichiers</h3>
<p>
À la différence des autres VCS, Git ne suit pas explicitement les mouvements des fichiers.
Si vous renommez un fichier suivi par Git, aucune méta-donnée indiquant le renommage n&#8217;est stockée par Git.
Néanmoins, Git est assez malin pour s&#8217;en apercevoir après coup — la détection de mouvement de fichier sera traitée plus loin.</p>
<p>De ce fait, que Git ait une commande <code class="literal">mv</code> peut paraître trompeur.
Si vous souhaitez renommer un fichier dans Git, vous pouvez lancer quelque chose comme :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git mv nom_origine nom_cible</code></pre>
</figure>
<p>et cela fonctionne.
En fait, si vous lancez quelque chose comme ceci et inspectez le résultat d&#8217;une commande <code class="literal">git status</code>, vous constaterez que Git gère le renommage de fichier :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git mv LISEZMOI.txt LISEZMOI
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        renommé :         LISEZMOI.txt -&gt; LISEZMOI</code></pre>
</figure>
<p>Néanmoins, cela revient à lancer les commandes suivantes :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> mv LISEZMOI.txt LISEZMOI
<span style="font-weight: bold">$</span> git rm LISEZMOI.txt
<span style="font-weight: bold">$</span> git add LISEZMOI</code></pre>
</figure>
<p>Git trouve implicitement que c&#8217;est un renommage, donc cela importe peu si vous renommez un fichier de cette manière ou avec la commande <code class="literal">mv</code>.
La seule différence réelle est que <code class="literal">git mv</code> ne fait qu&#8217;une commande à taper au lieu de trois — c&#8217;est une commande de convenance.
Le point principal est que vous pouvez utiliser n&#8217;importe quel outil pour renommer un fichier, et traiter les commandes <code class="literal">add</code>/<code class="literal">rm</code> plus tard, avant de valider la modification.</p>
</section>
</section>
<section class="sect1" title="Visualiser l&#8217;historique des validations">
<h2 id="s_viewing_history">Visualiser l&#8217;historique des validations</h2>
<p>Après avoir créé plusieurs <em>commits</em> ou si vous avez cloné un dépôt ayant un historique de <em>commits</em>, vous souhaitez probablement revoir le fil des évènements.
Pour ce faire, la commande <code class="literal">git log</code> est l&#8217;outil le plus basique et le plus puissant.</p>
<p>Les exemples qui suivent utilisent un projet très simple nommé <code class="literal">simplegit</code> utilisé pour les démonstrations.
Pour récupérer le projet, lancez :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>git clone https://github.com/schacon/simplegit-progit</code></pre>
</figure>
<p>Lorsque vous lancez <code class="literal">git log</code> dans le répertoire de ce projet, vous devriez obtenir un résultat qui ressemble à ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit</code></pre>
</figure>
<p>Par défaut, <code class="literal">git log</code> invoqué sans argument énumère en ordre chronologique inversé les <em>commits</em> réalisés.
Cela signifie que les <em>commits</em> les plus récents apparaissent en premier.
Comme vous le remarquez, cette commande indique chaque <em>commit</em> avec sa somme de contrôle SHA-1, le nom et l&#8217;e-mail de l&#8217;auteur, la date et le message du <em>commit</em>.</p>
<p><code class="literal">git log</code> dispose d&#8217;un très grand nombre d&#8217;options permettant de paramétrer exactement ce que l&#8217;on cherche à voir.
Nous allons détailler quelques-unes des plus utilisées.</p>
<p>Une des options les plus utiles est <code class="literal">-p</code>, qui montre les différences introduites entre chaque validation.
Vous pouvez aussi utiliser <code class="literal">-2</code> qui limite la sortie de la commande aux deux entrées les plus récentes :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require &#39;rake/gempackagetask&#39;
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   &quot;simplegit&quot;
-    s.version   =   &quot;0.1.0&quot;
+    s.version   =   &quot;0.1.1&quot;
     s.author    =   &quot;Scott Chacon&quot;
     s.email     =   &quot;schacon@gee-mail.com&quot;
     s.summary   =   &quot;A simple gem for using Git in Ruby code.&quot;

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file</code></pre>
</figure>
<p>Cette option affiche la même information mais avec un diff suivant directement chaque entrée.
C&#8217;est très utile pour des revues de code ou pour naviguer rapidement à travers l&#8217;historique des modifications qu&#8217;un collaborateur a apportées.</p>
<p>Vous pouvez aussi utiliser une liste d&#8217;options de résumé avec <code class="literal">git log</code>.
Par exemple, si vous souhaitez visualiser des statistiques résumées pour chaque <em>commit</em>, vous pouvez utiliser l&#8217;option <code class="literal">--stat</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)</code></pre>
</figure>
<p>Comme vous pouvez le voir, l&#8217;option <code class="literal">--stat</code> affiche sous chaque entrée de validation une liste des fichiers modifiés, combien de fichiers ont été changés et combien de lignes ont été ajoutées ou retirées dans ces fichiers.
Elle ajoute un résumé des informations en fin de sortie.
Une autre option utile est <code class="literal">--pretty</code>.
Cette option modifie le journal vers un format différent.
Quelques options incluses sont disponibles.
L&#8217;option <code class="literal">oneline</code> affiche chaque <em>commit</em> sur une seule ligne, ce qui peut s&#8217;avérer utile lors de la revue d&#8217;un long journal.
En complément, les options <code class="literal">short</code> (court), <code class="literal">full</code> (complet) et <code class="literal">fuller</code> (plus complet) montrent le résultat à peu de choses près dans le même format mais avec plus ou moins d&#8217;informations :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit</code></pre>
</figure>
<p>L&#8217;option la plus intéressante est <code class="literal">format</code> qui permet de décrire précisément le format de sortie.
C&#8217;est spécialement utile pour générer des sorties dans un format facile à analyser par une machine — lorsqu&#8217;on spécifie intégralement et explicitement le format, on s&#8217;assure qu&#8217;il ne changera pas au gré des mises à jour de Git :
</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --pretty=format:<span style="font-style: italic">&quot;%h - %an, %ar : %s&quot;</span>
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit</code></pre>
</figure>
<p><a id="xref-pretty_format" href="#pretty_format" class="xref">Options utiles pour <code class="literal">git log --pretty=format</code></a> liste les options de formatage les plus utiles.</p>
<div class="table">
<div class="content">
<table id="pretty_format" class="table table-framed-topbot table-grid-rows" style="width: 100%">
<caption>Table 1. Options utiles pour <code class="literal">git log --pretty=format</code></caption>
<colgroup>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Option</th>
<th>Description du formatage</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code class="literal">%H</code></p></td>
<td><p>Somme de contrôle du commit</p></td>
</tr>
<tr>
<td><p><code class="literal">%h</code></p></td>
<td><p>Somme de contrôle abrégée du commit</p></td>
</tr>
<tr>
<td><p><code class="literal">%T</code></p></td>
<td><p>Somme de contrôle de l&#8217;arborescence</p></td>
</tr>
<tr>
<td><p><code class="literal">%t</code></p></td>
<td><p>Somme de contrôle abrégée de l&#8217;arborescence</p></td>
</tr>
<tr>
<td><p><code class="literal">%P</code></p></td>
<td><p>Sommes de contrôle des parents</p></td>
</tr>
<tr>
<td><p><code class="literal">%p</code></p></td>
<td><p>Sommes de contrôle abrégées des parents</p></td>
</tr>
<tr>
<td><p><code class="literal">%an</code></p></td>
<td><p>Nom de l&#8217;auteur</p></td>
</tr>
<tr>
<td><p><code class="literal">%ae</code></p></td>
<td><p>E-mail de l&#8217;auteur</p></td>
</tr>
<tr>
<td><p><code class="literal">%ad</code></p></td>
<td><p>Date de l&#8217;auteur (au format de l&#8217;option -date=)</p></td>
</tr>
<tr>
<td><p><code class="literal">%ar</code></p></td>
<td><p>Date relative de l&#8217;auteur</p></td>
</tr>
<tr>
<td><p><code class="literal">%cn</code></p></td>
<td><p>Nom du validateur</p></td>
</tr>
<tr>
<td><p><code class="literal">%ce</code></p></td>
<td><p>E-mail du validateur</p></td>
</tr>
<tr>
<td><p><code class="literal">%cd</code></p></td>
<td><p>Date du validateur</p></td>
</tr>
<tr>
<td><p><code class="literal">%cr</code></p></td>
<td><p>Date relative du validateur</p></td>
</tr>
<tr>
<td><p><code class="literal">%s</code></p></td>
<td><p>Sujet</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Vous pourriez vous demander quelle est la différence entre <em>auteur</em>  et <em>validateur</em>.
L'<em>auteur</em> est la personne qui a réalisé initialement le travail, alors que le <em>validateur</em> est la personne qui a effectivement validé ce travail en gestion de version.
Donc, si quelqu&#8217;un envoie un patch à un projet et un des membres du projet l&#8217;applique, les deux personnes reçoivent le crédit — l&#8217;écrivain en tant qu&#8217;auteur, et le membre du projet en tant que validateur.
Nous traiterons plus avant de cette distinction dans le <a id="xref--ch05-distributed-git" href="ch05-distributed-git.xhtml" class="xref">Git distribué</a>.</p>
<p>Les options <code class="literal">oneline</code> et <code class="literal">format</code> sont encore plus utiles avec une autre option <code class="literal">log</code> appelée <code class="literal">--graph</code>.
Cette option ajoute un joli graphe en caractères ASCII pour décrire l&#8217;historique des branches et fusions :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --pretty=format:<span style="font-style: italic">&quot;%h %s&quot;</span> --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch &#39;master&#39; of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch &#39;defunkt&#39; into local</code></pre>
</figure>
<p>Ces options deviendront plus intéressantes quand nous aborderons les branches et les fusions dans le prochain chapitre.</p>
<p>Les options ci-dessus ne sont que des options simples de format de sortie de <code class="literal">git log</code> — il y en a de nombreuses autres.
<a id="xref-s_log_options" href="#s_log_options" class="xref">Options usuelles de <code class="literal">git log</code></a> donne une liste des options que nous avons traitées ainsi que d&#8217;autres options communément utilisées accompagnées de la manière dont elles modifient le résultat de la commande <code class="literal">log</code>.</p>
<div class="table">
<div class="content">
<table id="s_log_options" class="table table-framed-topbot table-grid-rows" style="width: 100%">
<caption>Table 2. Options usuelles de <code class="literal">git log</code></caption>
<colgroup>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code class="literal">-p</code></p></td>
<td><p>Affiche le patch appliqué par chaque commit</p></td>
</tr>
<tr>
<td><p><code class="literal">--stat</code></p></td>
<td><p>Affiche les statistiques de chaque fichier pour chaque commit</p></td>
</tr>
<tr>
<td><p><code class="literal">--shortstat</code></p></td>
<td><p>N&#8217;affiche que les ligne modifiées/insérées/effacées de l&#8217;option --stat</p></td>
</tr>
<tr>
<td><p><code class="literal">--name-only</code></p></td>
<td><p>Affiche la liste des fichiers modifiés après les informations du commit</p></td>
</tr>
<tr>
<td><p><code class="literal">--name-status</code></p></td>
<td><p>Affiche la liste des fichiers affectés accompagnés des informations d&#8217;ajout/modification/suppression</p></td>
</tr>
<tr>
<td><p><code class="literal">--abbrev-commit</code></p></td>
<td><p>N&#8217;affiche que les premiers caractères de la somme de contrôle SHA-1</p></td>
</tr>
<tr>
<td><p><code class="literal">--relative-date</code></p></td>
<td><p>Affiche la date en format relatif (par exemple "2 weeks ago" : il y a deux semaines) au lieu du format de date complet</p></td>
</tr>
<tr>
<td><p><code class="literal">--graph</code></p></td>
<td><p>Affiche en caractères ASCII le graphe de branches et fusions en vis-à-vis de l&#8217;historique</p></td>
</tr>
<tr>
<td><p><code class="literal">--pretty</code></p></td>
<td><p>Affiche les <em>commits</em> dans un format alternatif. Les formats incluent <code class="literal">oneline</code>, <code class="literal">short</code>, <code class="literal">full</code>, <code class="literal">fuller</code>, et <code class="literal">format</code> (où on peut spécifier son propre format)</p></td>
</tr>
<tr>
<td><p><code class="literal">--oneline</code></p></td>
<td><p>Option de convenance correspondant à <code class="literal">--pretty=oneline --abbrev-commit</code></p></td>
</tr>
</tbody>
</table>
</div>
</div>
<section class="sect2" title="Limiter la longueur de l&#8217;historique">
<h3 id="_limiter_la_longueur_de_l_historique">Limiter la longueur de l&#8217;historique</h3>
<p>En complément des options de formatage de sortie, <code class="literal">git log</code> est pourvu de certaines options de limitation utiles — des options qui permettent de restreindre la liste à un sous-ensemble de <em>commits</em>.
Vous avez déjà vu une de ces options — l&#8217;option <code class="literal">-2</code> qui ne montre que les deux derniers <em>commits</em>.
En fait, on peut utiliser <code class="literal">-&lt;n&gt;</code>, où <code class="literal">n</code> correspond au nombre de <em>commits</em> que l&#8217;on cherche à visualiser en partant des plus récents.
En vérité, il est peu probable que vous utilisiez cette option, parce que Git injecte par défaut sa sortie dans un outil de pagination qui permet de la visualiser page à page.</p>
<p>Cependant, les options de limitation portant sur le temps, telles que <code class="literal">--since</code> (depuis) et <code class="literal">--until</code> (jusqu&#8217;à) sont très utiles.
Par exemple, la commande suivante affiche la liste des <em>commits</em> des deux dernières semaines :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --since=2.weeks</code></pre>
</figure>
<p>Cette commande fonctionne avec de nombreux formats — vous pouvez indiquer une date spécifique (2008-01-05) ou une date relative au présent telle que "2 years 1 day 3 minutes ago".</p>
<p>Vous pouvez aussi restreindre la liste aux <em>commits</em> vérifiant certains critères de recherche.
L&#8217;option <code class="literal">--author</code> permet de filtrer sur un auteur spécifique, et l&#8217;option <code class="literal">--grep</code> permet de chercher des mots clés dans les messages de validation.
Notez que si vous spécifiez à la fois <code class="literal">--author</code> et <code class="literal">--grep</code>, la commande retournera seulement des <em>commits</em> correspondant simultanément aux deux critères.</p>
<p>Si vous souhaitez spécifier plusieurs options <code class="literal">--grep</code>,  vous devez ajouter l&#8217;option <code class="literal">--all-match</code>, car par défaut ces commandes retournent les <em>commits</em> vérifiant au moins un critère de recherche.</p>
<p>Un autre filtre vraiment utile est l&#8217;option <code class="literal">-S</code> qui prend une chaîne de caractères et ne retourne que les <em>commits</em> qui introduisent des modifications qui ajoutent ou retirent du texte comportant cette chaîne.
Par exemple, si vous voulez trouver la dernière validation qui a ajouté ou retiré une référence à une fonction spécifique, vous pouvez lancer :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log -Snom_de_fonction</code></pre>
</figure>
<p>La dernière option vraiment utile à <code class="literal">git log</code> est la spécification d&#8217;un chemin.
Si un répertoire ou un nom de fichier est spécifié, le journal est limité aux <em>commits</em> qui ont introduit des modifications aux fichiers concernés.
C&#8217;est toujours la dernière option de la commande, souvent précédée de deux tirets (<code class="literal">--</code>) pour séparer les chemins des options précédentes.</p>
<p>Le tableau <a id="xref-limit_options" href="#limit_options" class="xref">Options pour limiter la sortie de <code class="literal">git log</code></a> récapitule les options que nous venons de voir ainsi que quelques autres pour référence.</p>
<div class="table">
<div class="content">
<table id="limit_options" class="table table-framed-topbot table-grid-rows" style="width: 100%">
<caption>Table 3. Options pour limiter la sortie de <code class="literal">git log</code></caption>
<colgroup>
<col/>
<col/>
</colgroup>
<thead>
<tr>
<th>Option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><p><code class="literal">-(n)</code></p></td>
<td><p>N&#8217;affiche que les n derniers <em>commits</em></p></td>
</tr>
<tr>
<td><p><code class="literal">--since</code>, <code class="literal">--after</code></p></td>
<td><p>Limite l&#8217;affichage aux <em>commits</em> réalisés après la date spécifiée</p></td>
</tr>
<tr>
<td><p><code class="literal">--until</code>, <code class="literal">--before</code></p></td>
<td><p>Limite l&#8217;affichage aux <em>commits</em> réalisés avant la date spécifiée</p></td>
</tr>
<tr>
<td><p><code class="literal">--author</code></p></td>
<td><p>Ne montre que les <em>commits</em> dont le champ auteur correspond à la chaîne passée en argument</p></td>
</tr>
<tr>
<td><p><code class="literal">--committer</code></p></td>
<td><p>Ne montre que les <em>commits</em> dont le champ validateur correspond à la chaîne passée en argument</p></td>
</tr>
<tr>
<td><p><code class="literal">--grep</code></p></td>
<td><p>Ne montre que les <em>commits</em> dont le message de validation contient la chaîne de caractères</p></td>
</tr>
<tr>
<td><p><code class="literal">-S</code></p></td>
<td><p>Ne montre que les <em>commits</em> dont les ajouts ou retraits contient la chaîne de caractères</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Par exemple, si vous souhaitez visualiser quels <em>commits</em> modifiant les fichiers de test dans l&#8217;historique du code source de Git ont été validés par Junio Hamano et n&#8217;étaient pas des fusions durant le mois d&#8217;octobre 2008, vous pouvez lancer ce qui suit :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --pretty=<span style="font-style: italic">&quot;%h - %s&quot;</span> --author=gitster --since=<span style="font-style: italic">&quot;2008-10-01&quot;</span> <span style="font-weight: bold; font-style: italic">\</span>
   --before=<span style="font-style: italic">&quot;2008-11-01&quot;</span> --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix &quot;checkout --track -b newbranch&quot; on detached HEAD
b0ad11e - pull: allow &quot;git pull origin $something:$current_branch&quot; into an unborn branch</code></pre>
</figure>
<p>À partir des 40 000 <em>commits</em> constituant l&#8217;historique des sources de Git, cette commande extrait les 6 qui correspondent aux critères.</p>
</section>
</section>
<section class="sect1" title="Annuler des actions">
<h2 id="s_undoing">Annuler des actions</h2>
<p>À tout moment, vous pouvez désirer annuler une de vos dernières actions.
Dans cette section, nous allons passer en revue quelques outils de base permettant d&#8217;annuler des modifications.
Il faut être très attentif car certaines de ces annulations sont définitives (elles ne peuvent pas être elles-mêmes annulées).
C&#8217;est donc un des rares cas d&#8217;utilisation de Git où des erreurs de manipulation peuvent entraîner des pertes définitives de données.</p>
<p>Une des annulations les plus communes apparaît lorsqu&#8217;on valide une modification trop tôt en oubliant d&#8217;ajouter certains fichiers, ou si on se trompe dans le message de validation.
Si vous souhaitez rectifier cette erreur, vous pouvez valider le complément de modification avec l&#8217;option <code class="literal">--amend</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git commit --amend</code></pre>
</figure>
<p>Cette commande prend en compte la zone d&#8217;index et l&#8217;utilise pour le <em>commit</em>.
Si aucune modification n&#8217;a été réalisée depuis la dernière validation (par exemple en lançant cette commande immédiatement après la dernière validation), alors l&#8217;instantané sera identique et la seule modification à introduire sera le message de validation.</p>
<p>L&#8217;éditeur de message de validation démarre, mais il contient déjà le message de la validation précédente.
Vous pouvez éditer ce message normalement, mais il écrasera le message de la validation précédente.</p>
<p>Par exemple, si vous validez une version puis réalisez que vous avez oublié d&#8217;indexer les modifications d&#8217;un fichier que vous vouliez ajouter à ce <em>commit</em>, vous pouvez faire quelque chose comme ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git commit -m <span style="font-style: italic">&#39;validation initiale&#39;</span>
<span style="font-weight: bold">$</span> git add fichier_oublie
<span style="font-weight: bold">$</span> git commit --amend</code></pre>
</figure>
<p>Vous n&#8217;aurez au final qu&#8217;un unique <em>commit</em> — la seconde validation remplace le résultat de la première.</p>
<section class="sect2" title="Désindexer un fichier déjà indexé">
<h3 id="s_unstaging">Désindexer un fichier déjà indexé</h3>
<p>Les deux sections suivantes démontrent comment bricoler les modifications dans votre zone d&#8217;index et votre zone de travail.
Un point sympathique est que la commande permettant de connaître l&#8217;état de ces deux zones vous rappelle aussi comment annuler les modifications.
Par exemple, supposons que vous avez modifié deux fichiers et voulez les valider comme deux modifications indépendantes, mais que vous avez tapé accidentellement <code class="literal">git add *</code> et donc indexé les deux.
Comment annuler l&#8217;indexation d&#8217;un des fichiers ? La commande <code class="literal">git status</code> vous le rappelle :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git add .
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

    renommé :   README.md -&gt; README
    modifié :   CONTRIBUTING.md</code></pre>
</figure>
<p>Juste sous le texte « Modifications qui seront validées », elle vous indique d&#8217;utiliser <code class="literal">git reset HEAD &lt;fichier&gt;...</code> pour désindexer un fichier.
Utilisons donc ce conseil pour désindexer le fichier <code class="literal">CONTRIBUTING.md</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git reset HEAD CONTRIBUTING.md
Modifications non indexées après reset :
M       CONTRIBUTING.md
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        renommé :         README.md -&gt; README

Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>La commande à taper peut sembler étrange mais elle fonctionne.
Le fichier <code class="literal">CONTRIBUTING.md</code> est modifié mais de retour à l&#8217;état non indexé.</p>
<aside class="admonition note" title="Note" epub:type="note">
<div class="content">
<p>Bien que <code class="literal">git reset</code> <em>puisse</em> être une commande dangereuse conjuguée avec l&#8217;option <code class="literal">--hard</code>, dans le cas présent, le fichier dans la copie de travail n&#8217;a pas été touché.
Appeler <code class="literal">git reset</code> sans option n&#8217;est pas dangereux - cela ne touche qu&#8217;à la zone d&#8217;index.</p>
</div>
</aside>
<p>Pour l&#8217;instant, cette invocation magique est la seule à connaître pour la commande <code class="literal">git reset</code>.
Nous entrerons plus en détail sur ce que <code class="literal">reset</code> réalise et comment le maîtriser pour faire des choses intéressantes dans <a id="xref--ch07-git-tools--s_git_reset" href="ch07-git-tools.xhtml#s_git_reset" class="xref">Reset démystifié</a></p>
</section>
<section class="sect2" title="Réinitialiser un fichier modifié">
<h3 id="_réinitialiser_un_fichier_modifié">Réinitialiser un fichier modifié</h3>
<p>Que faire si vous réalisez que vous ne souhaitez pas conserver les modifications du fichier <code class="literal">CONTRIBUTING.md</code> ?
Comment le réinitialiser facilement, le ramener à son état du dernier instantané (ou lors du clonage, ou dans l&#8217;état dans lequel vous l&#8217;avez obtenu dans votre copie de travail) ?
Heureusement, <code class="literal">git status</code> vous indique comment procéder.
Dans le résultat de la dernière commande, la zone de travail ressemble à ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>Modifications qui ne seront pas validées :
  (utilisez &quot;git add &lt;fichier&gt;...&quot; pour mettre à jour ce qui sera validé)
  (utilisez &quot;git checkout -- &lt;fichier&gt;...&quot; pour annuler les modifications dans la copie de travail)

        modifié :         CONTRIBUTING.md</code></pre>
</figure>
<p>Ce qui vous indique de façon explicite comment annuler des modifications que vous avez faites.
Faisons comme indiqué :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git checkout -- CONTRIBUTING.md
<span style="font-weight: bold">$</span> git status
Sur la branche master
Votre branche est à jour avec &#39;origin/master&#39;.
Modifications qui seront validées :
  (utilisez &quot;git reset HEAD &lt;fichier&gt;...&quot; pour désindexer)

        renommé :         README.md -&gt; README</code></pre>
</figure>
<p>Vous pouvez constater que les modifications ont été annulées.</p>
<aside class="admonition important" title="Important" epub:type="warning">
<div class="content">
<p>Vous devriez aussi vous apercevoir que c&#8217;est une commande dangereuse : toutes les modifications que vous auriez réalisées sur ce fichier ont disparu — vous venez tout juste de l&#8217;écraser avec un autre fichier.
N&#8217;utilisez jamais cette commande à moins d&#8217;être vraiment sûr de ne pas vouloir de ces modifications.</p>
</div>
</aside>
<p>Si vous souhaitez seulement écarter momentanément cette modification, nous verrons comment mettre de côté et créer des branches dans le chapitre <a href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a> ; ce sont de meilleures façons de procéder.</p>
<p>Souvenez-vous, tout ce qui a été <em>validé</em> dans Git peut quasiment toujours être récupéré.
Y compris des <em>commits</em> sur des branches qui ont été effacées ou des <em>commits</em> qui ont été écrasés par une validation avec l&#8217;option <code class="literal">--amend</code> (se référer au chapitre <a id="xref--ch10-git-internals--s_data_recovery" href="ch10-git-internals.xhtml#s_data_recovery" class="xref">Récupération de données</a> pour la récupération de données).
Cependant, tout ce que vous perdez avant de l&#8217;avoir validé n&#8217;a aucune chance d&#8217;être récupérable via Git.</p>
</section>
</section>
<section class="sect1" title="Travailler avec des dépôts distants">
<h2 id="s_remote_repos">Travailler avec des dépôts distants</h2>
<p>Pour pouvoir collaborer sur un projet Git, il est nécessaire de savoir comment gérer les dépôts distants.
Les dépôts distants sont des versions de votre projet qui sont hébergées sur Internet ou le réseau d&#8217;entreprise.
Vous pouvez en avoir plusieurs, pour lesquels vous pouvez avoir des droits soit en lecture seule, soit en lecture/écriture.
Collaborer avec d&#8217;autres personnes consiste à gérer ces dépôts distants, en poussant ou tirant des données depuis et vers ces dépôts quand vous souhaitez partager votre travail.
Gérer des dépôts distants inclut savoir comment ajouter des dépôts distants, effacer des dépôts distants qui ne sont plus valides, gérer des branches distantes et les définir comme suivies ou non, et plus encore.
Dans cette section, nous traiterons des commandes de gestion distante.</p>
<section class="sect2" title="Afficher les dépôts distants">
<h3 id="_afficher_les_dépôts_distants">Afficher les dépôts distants</h3>
<p>Pour visualiser les serveurs distants que vous avez enregistrés, vous pouvez lancer la commande <code class="literal">git remote</code>.
Elle liste les noms des différentes références distantes que vous avez spécifiées.
Si vous avez cloné un dépôt, vous devriez au moins voir l&#8217;origine <code class="literal">origin</code> — c&#8217;est-à-dire le nom par défaut que Git donne au serveur à partir duquel vous avez cloné :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git clone https://github.com/schacon/ticgit
Clonage dans &#39;ticgit&#39;...
remote: Counting objects: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Réception d&#39;objets: 100% (1857/1857), 374.35 KiB | 243.00 KiB/s, fait.
Résolution des deltas: 100% (772/772), fait.
Vérification de la connectivité... fait.
<span style="font-weight: bold">$</span> cd ticgit
<span style="font-weight: bold">$</span> git remote
origin</code></pre>
</figure>
<p>Vous pouvez aussi spécifier <code class="literal">-v</code>, qui vous montre l&#8217;URL que Git a stockée pour chaque nom court :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)</code></pre>
</figure>
<p>Si vous avez plus d&#8217;un dépôt distant, la commande précédente les liste tous.
Par exemple, un dépôt avec plusieurs dépôts distants permettant de travailler avec quelques collaborateurs pourrait ressembler à ceci.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> cd grit
<span style="font-weight: bold">$</span> git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)</code></pre>
</figure>
<p>Notez que ces dépôts distants sont accessibles au moyen de différents protocoles ; nous traiterons des protocoles au chapitre <a href="ch04-git-server.xhtml#s_git_on_the_server" class="xref">Installation de Git sur un serveur</a>.</p>
</section>
<section class="sect2" title="Ajouter des dépôts distants">
<h3 id="_ajouter_des_dépôts_distants">Ajouter des dépôts distants</h3>
<p>J&#8217;ai expliqué et donné des exemples d&#8217;ajout de dépôts distants dans les chapitres précédents, mais voici spécifiquement comment faire.
Pour ajouter un nouveau dépôt distant Git comme nom court auquel il est facile de faire référence, lancez <code class="literal">git remote add [nomcourt] [url]</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote
origin
<span style="font-weight: bold">$</span> git remote add pb https://github.com/paulboone/ticgit
<span style="font-weight: bold">$</span> git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)</code></pre>
</figure>
<p>Maintenant, vous pouvez utiliser le mot-clé <code class="literal">pb</code> sur la ligne de commande au lieu de l&#8217;URL complète.
Par exemple, si vous voulez récupérer toute l&#8217;information que Paul a mais que vous ne souhaitez pas l&#8217;avoir encore dans votre branche, vous pouvez lancer <code class="literal">git fetch pb</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Dépaquetage des objets: 100% (43/43), fait.
Depuis https://github.com/paulboone/ticgit
 * [nouvelle branche] master     -&gt; pb/master
 * [nouvelle branche] ticgit     -&gt; pb/ticgit</code></pre>
</figure>
<p>La branche <code class="literal">master</code> de Paul est accessible localement en tant que <code class="literal">pb/master</code> — vous pouvez la fusionner dans une de vos propres branches, ou vous pouvez extraire une branche localement si vous souhaitez l&#8217;inspecter. Nous traiterons plus en détail de la nature des branches et de leur utilisation au chapitre <a href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a>.</p>
</section>
<section class="sect2" title="Récupérer et tirer depuis des dépôts distants">
<h3 id="s_fetching_and_pulling">Récupérer et tirer depuis des dépôts distants</h3>
<p>Comme vous venez tout juste de le voir, pour obtenir les données des dépôts distants, vous pouvez lancer :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git fetch [remote-name]</code></pre>
</figure>
<p>Cette commande s&#8217;adresse au dépôt distant et récupère toutes les données de ce projet que vous ne possédez pas déjà.
Après cette action, vous possédez toutes les références à toutes les branches contenues dans ce dépôt, que vous pouvez fusionner ou inspecter à tout moment.</p>
<p>Si vous clonez un dépôt, le dépôt distant est automatiquement ajouté sous le nom « origin ».
Donc, <code class="literal">git fetch origin</code> récupère tout ajout qui a été poussé vers ce dépôt depuis que vous l&#8217;avez cloné ou la dernière fois que vous avez récupéré les ajouts.
Il faut noter que la commande <code class="literal">fetch</code> tire les données dans votre dépôt local mais sous sa propre branche — elle ne les fusionne pas automatiquement avec aucun de vos travaux ni ne modifie votre copie de travail.
Vous devez volontairement fusionner ses modifications distantes dans votre travail lorsque vous le souhaitez.</p>
<p>Si vous avez créé une branche pour suivre l&#8217;évolution d&#8217;une branche distante (cf.
la section suivante et le chapitre <a href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a> pour plus d&#8217;information), vous pouvez utiliser la commande <code class="literal">git pull</code> qui récupère et fusionne automatiquement une branche distante dans votre branche locale.
Ce comportement peut correspondre à une méthode de travail plus confortable, sachant que par défaut la commande <code class="literal">git clone</code> paramètre votre branche locale pour qu&#8217;elle suive la branche <code class="literal">master</code> du dépôt que vous avez cloné (en supposant que le dépôt distant ait une branche <code class="literal">master</code>).
Lancer <code class="literal">git pull</code> récupère généralement les données depuis le serveur qui a été initialement cloné et essaie de les fusionner dans votre branche de travail actuel.</p>
</section>
<section class="sect2" title="Pousser son travail sur un dépôt distant">
<h3 id="s_pushing_remotes">Pousser son travail sur un dépôt distant</h3>
<p>Lorsque votre dépôt vous semble prêt à être partagé, il faut le pousser en amont.
La commande pour le faire est simple : <code class="literal">git push [nom-distant] [nom-de-branche]</code>.
Si vous souhaitez pousser votre branche <code class="literal">master</code> vers le serveur <code class="literal">origin</code> (pour rappel, cloner un dépôt définit automatiquement ces noms pour vous), alors vous pouvez lancer ceci pour pousser votre travail vers le serveur amont :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git push origin master</code></pre>
</figure>
<p>Cette commande ne fonctionne que si vous avez cloné depuis un serveur sur lequel vous avez des droits d&#8217;accès en écriture et si personne n&#8217;a poussé dans l&#8217;intervalle.
Si vous et quelqu&#8217;un d&#8217;autre clonez un dépôt au même moment et que cette autre personne pousse ses modifications et qu&#8217;après vous tentez de pousser les vôtres, votre poussée sera rejetée à juste titre.
Vous devrez tout d&#8217;abord tirer les modifications de l&#8217;autre personne et les fusionner avec les vôtres avant de pouvoir pousser.
Référez-vous au chapitre <a href="ch03-git-branching.xhtml" class="xref">Les branches avec Git</a> pour de plus amples informations sur les techniques pour pousser vers un serveur distant.</p>
</section>
<section class="sect2" title="Inspecter un dépôt distant">
<h3 id="s_inspecting_remote">Inspecter un dépôt distant</h3>
<p>Si vous souhaitez visualiser plus d&#8217;informations à propos d&#8217;un dépôt distant particulier, vous pouvez utiliser la commande <code class="literal">git remote show [nom-distant]</code>.
Si vous lancez cette commande avec un nom court particulier, tel que <code class="literal">origin</code>, vous obtenez quelque chose comme :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote show origin
* distante origin
  URL de rapatriement : https://github.com/schacon/ticgit
  URL push : https://github.com/schacon/ticgit
  Branche HEAD : master
  Branches distantes :
    master suivi
    ticgit suivi
  Branche locale configurée pour &#39;git pull&#39; :
    master fusionne avec la distante master
  Référence locale configurée pour &#39;git push&#39; :
    master pousse vers master (à jour)</code></pre>
</figure>
<p>Cela donne la liste des URL pour le dépôt distant ainsi que la liste des branches distantes suivies.
Cette commande vous informe que si vous êtes sur la branche <code class="literal">master</code> et si vous lancez <code class="literal">git pull</code>, il va automatiquement fusionner la branche <code class="literal">master</code> du dépôt distant après avoir récupéré toutes les références sur le serveur distant.
Cela donne aussi la liste des autres références qu&#8217;il aura tirées.</p>
<p>Le résultat ci-dessus est un exemple simple mais réaliste de dépôt distant.
Lors d&#8217;une utilisation plus intense de Git, la commande <code class="literal">git remote show</code> fournira beaucoup d&#8217;information :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote show origin
* distante origin
  URL: https://github.com/my-org/complex-project
  URL de rapatriement : https://github.com/my-org/complex-project
  URL push : https://github.com/my-org/complex-project
  Branche HEAD : master
  Branches distantes :
    master                           suivi
    dev-branch                       suivi
    markdown-strip                   suivi
    issue-43                         nouveau (le prochain rapatriement (fetch) stockera dans remotes/origin)
    issue-45                         nouveau (le prochain rapatriement (fetch) stockera dans remotes/origin)
    refs/remotes/origin/issue-11     dépassé (utilisez &#39;git remote prune&#39; pour supprimer)
  Branches locales configurées pour &#39;git pull&#39; :
    dev-branch fusionne avec la distante dev-branch
    master     fusionne avec la distante master
  Références locales configurées pour &#39;git push&#39; :
    dev-branch                     pousse vers dev-branch        (à jour)
    markdown-strip                 pousse vers markdown-strip    (à jour)
    master                         pousse vers master            (à jour)</code></pre>
</figure>
<p>Cette commande affiche les branches poussées automatiquement lorsqu&#8217;on lance <code class="literal">git push</code> dessus.
Elle montre aussi les branches distantes qui n&#8217;ont pas encore été rapatriées, les branches distantes présentes localement mais effacées sur le serveur, et toutes les branches qui seront fusionnées quand on lancera <code class="literal">git pull</code>.</p>
</section>
<section class="sect2" title="Retirer et renommer des dépôts distants">
<h3 id="_retirer_et_renommer_des_dépôts_distants">Retirer et renommer des dépôts distants</h3>
<p>Si vous souhaitez renommer une référence, vous pouvez lancer <code class="literal">git remote rename</code> pour modifier le nom court d&#8217;un dépôt distant.
Par exemple, si vous souhaitez renommer <code class="literal">pb</code> en <code class="literal">paul</code>, vous pouvez le faire avec <code class="literal">git remote rename</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote rename pb paul
<span style="font-weight: bold">$</span> git remote
origin
paul</code></pre>
</figure>
<p>Il faut mentionner que ceci modifie aussi les noms de branches distantes.
Celle qui était référencée sous <code class="literal">pb/master</code> l&#8217;est maintenant sous <code class="literal">paul/master</code>.</p>
<p>Si vous souhaitez retirer un dépôt distant pour certaines raisons — vous avez changé de serveur ou vous n&#8217;utilisez plus ce serveur particulier, ou peut-être un contributeur a cessé de contribuer — vous pouvez utiliser <code class="literal">git remote rm</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git remote rm paul
<span style="font-weight: bold">$</span> git remote
origin</code></pre>
</figure>
</section>
</section>
<section class="sect1" title="Étiquetage">
<h2 id="s_git_tagging">Étiquetage</h2>
<p>
À l&#8217;instar de la plupart des VCS, Git donne la possibilité d&#8217;étiqueter un certain état dans l&#8217;historique comme important.
Généralement, les gens utilisent cette fonctionnalité pour marquer les états de publication (<code class="literal">v1.0</code> et ainsi de suite).
Dans cette section, nous apprendrons comment lister les différentes étiquettes (<em>tag</em> en anglais), comment créer de nouvelles étiquettes et les différents types d&#8217;étiquettes.</p>
<section class="sect2" title="Lister vos étiquettes">
<h3 id="_lister_vos_étiquettes">Lister vos étiquettes</h3>
<p>Lister les étiquettes existantes dans Git est très simple.
Tapez juste <code class="literal">git tag</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tag
v0.1
v1.3</code></pre>
</figure>
<p>Cette commande liste les étiquettes dans l&#8217;ordre alphabétique.
L&#8217;ordre dans lequel elles apparaissent n&#8217;a aucun rapport avec l&#8217;historique.</p>
<p>Vous pouvez aussi rechercher les étiquettes correspondant à un motif particulier.
Par exemple, le dépôt des sources de Git contient plus de 500 étiquettes.
Si vous souhaitez ne visualiser que les séries 1.8.5, vous pouvez lancer ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tag -l <span style="font-style: italic">&#39;v1.8.5*&#39;</span>
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5</code></pre>
</figure>
</section>
<section class="sect2" title="Créer des étiquettes">
<h3 id="_créer_des_étiquettes">Créer des étiquettes</h3>
<p>Git utilise deux types principaux d&#8217;étiquettes : légères et annotées.</p>
<p>Une étiquette légère ressemble beaucoup à une branche qui ne change pas, c&#8217;est juste un pointeur sur un <em>commit</em> spécifique.</p>
<p>Les étiquettes annotées, par contre, sont stockées en tant qu&#8217;objets à part entière dans la base de données de Git.
Elles ont une somme de contrôle, contiennent le nom et l&#8217;adresse e-mail du créateur, la date, un message d&#8217;étiquetage et peuvent être signées et vérifiées avec GNU Privacy Guard (GPG).
Il est généralement recommandé de créer des étiquettes annotées pour générer toute cette information mais si l&#8217;étiquette doit rester temporaire ou l&#8217;information supplémentaire n&#8217;est pas désirée, les étiquettes légères peuvent suffire.</p>
</section>
<section class="sect2" title="Les étiquettes annotées">
<h3 id="s_annotated_tags">Les étiquettes annotées</h3>
<p>
Créer des étiquettes annotées est simple avec Git.
Le plus simple est de spécifier l&#8217;option <code class="literal">-a</code> à la commande <code class="literal">tag</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tag -a v1.4 -m <span style="font-style: italic">&#39;ma version 1.4&#39;</span>
<span style="font-weight: bold">$</span> git tag
v0.1
v1.3
v1.4</code></pre>
</figure>
<p>L&#8217;option <code class="literal">-m</code> permet de spécifier le message d&#8217;étiquetage qui sera stocké avec l&#8217;étiquette.
Si vous ne spécifiez pas de message en ligne pour une étiquette annotée, Git lance votre éditeur pour pouvoir le saisir.</p>
<p>Vous pouvez visualiser les données de l&#8217;étiquette à côté du <em>commit</em> qui a été marqué en utilisant la commande <code class="literal">git show</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git show v1.4
tag v1.4
Tagger: Ben Straub &lt;ben@straub.cc&gt;
Date:   Sat May 3 20:19:12 2014 -0700

ma version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number</code></pre>
</figure>
<p>Cette commande affiche le nom du créateur, la date de création de l&#8217;étiquette et le message d&#8217;annotation avant de montrer effectivement l&#8217;information de validation.</p>
</section>
<section class="sect2" title="Les étiquettes légères">
<h3 id="_les_étiquettes_légères">Les étiquettes légères</h3>
<p>
Une autre manière d&#8217;étiqueter les <em>commits</em> est d&#8217;utiliser les étiquettes légères.
Celles-ci se réduisent à stocker la somme de contrôle d&#8217;un <em>commit</em> dans un fichier, aucune autre information n&#8217;est conservée.
Pour créer une étiquette légère, il suffit de n&#8217;utiliser aucune des options <code class="literal">-a</code>, <code class="literal">-s</code> ou <code class="literal">-m</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tag v1.4-lg
<span style="font-weight: bold">$</span> git tag
v0.1
v1.3
v1.4
v1.4-lg
v1.5</code></pre>
</figure>
<p>Cette fois-ci, en lançant <code class="literal">git show</code> sur l&#8217;étiquette, on ne voit plus aucune information complémentaire.
La commande ne montre que l&#8217;information de validation :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git show v1.4-lg
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number</code></pre>
</figure>
</section>
<section class="sect2" title="Étiqueter après coup">
<h3 id="_étiqueter_après_coup">Étiqueter après coup</h3>
<p>Vous pouvez aussi étiqueter des <em>commits</em> plus anciens.
Supposons que l&#8217;historique des <em>commits</em> ressemble à ceci :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Fusion branche &#39;experimental&#39;
a6b4c97498bd301d84096da251c98a07c7723e65 Début de l&#39;écriture support
0d52aaab4479697da7686c15f77a3d64d9165190 Un truc de plus
6d52a271eda8725415634dd79daabbc4d9b6008e Fusion branche &#39;experimental&#39;
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc ajout d&#39;une fonction de validatn
4682c3261057305bdd616e23b64b0857d832627b ajout fichier afaire
166ae0c4d3f420721acbb115cc33848dfcc2121a début de l&#39;ecriture support
9fceb02d0ae598e95dc970b74767f19372d61af8 mise à jour rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc validation afaire
8a5cbc430f1a9c3d00faaeffd07798508422908a mise à jour lisezmoi</code></pre>
</figure>
<p>Maintenant, supposons que vous avez oublié d&#8217;étiqueter le projet à la version <code class="literal">v1.2</code> qui correspondait au <em>commit</em> « mise à jour rakefile ».
Vous pouvez toujours le faire après l&#8217;évènement.
Pour étiqueter ce <em>commit</em>, vous spécifiez la somme de contrôle du <em>commit</em> (ou une partie) en fin de commande :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tag -a v1.2 9fceb02</code></pre>
</figure>
<p>Le <em>commit</em> a été étiqueté :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lg
v1.5

<span style="font-weight: bold">$</span> git show v1.2
tag v1.2
Tagger: Scott Chacon &lt;schacon@gee-mail.com&gt;
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon &lt;mchacon@gee-mail.com&gt;
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...</code></pre>
</figure>
</section>
<section class="sect2" title="Partager les étiquettes">
<h3 id="s_sharing_tags">Partager les étiquettes</h3>
<p>Par défaut, la commande <code class="literal">git push</code> ne transfère pas les étiquettes vers les serveurs distants.
Il faut explicitement pousser les étiquettes après les avoir créées localement.
Ce processus s&#8217;apparente à pousser des branches distantes — vous pouvez lancer <code class="literal">git push origin [nom-du-tag]</code>.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git push origin v1.5
Décompte des objets: 14, fait.
Delta compression using up to 8 threads.
Compression des objets: 100% (12/12), fait.
Écriture des objets: 100% (14/14), 2.05KiB | 0 bytes/s, fait.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -&gt; v1.5</code></pre>
</figure>
<p>Si vous avez de nombreuses étiquettes que vous souhaitez pousser en une fois, vous pouvez aussi utiliser l&#8217;option <code class="literal">--tags</code> avec la commande <code class="literal">git push</code>.
Ceci transférera toutes les nouvelles étiquettes vers le serveur distant.</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git push origin --tags
Décompte des objets: 1, fait.
Écriture des objets: 100% (1/1), 160 bytes | 0 bytes/s, fait.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -&gt; v1.4
 * [new tag]         v1.4-lg -&gt; v1.4-lg</code></pre>
</figure>
<p>À présent, lorsqu&#8217;une autre personne clone ou tire depuis votre dépôt, elle obtient aussi les étiquettes.</p>
</section>
<section class="sect2" title="Extraire une étiquette">
<h3 id="_extraire_une_étiquette">Extraire une étiquette</h3>
<p>Il n&#8217;est pas vraiment possible d&#8217;extraire une étiquette avec Git, puisque les étiquettes ne peuvent pas être modifiées.
Si vous souhaitez ressortir dans votre copie de travail une version de votre dépôt correspondant à une étiquette spécifique, le plus simple consiste à créer une branche à partir de cette étiquette :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git checkout -b version2 v2.0.0
Extraction des fichiers: 100% (602/602), fait.
Basculement sur la nouvelle branche &#39;version2&#39;</code></pre>
</figure>
<p>Bien sûr, toute validation modifiera la branche <code class="literal">version2</code> par rapport à l&#8217;étiquette <code class="literal">v2.0.0</code> puisqu&#8217;elle avancera avec les nouvelles modifications. Soyez donc prudent sur l&#8217;identification de cette branche.</p>
</section>
</section>
<section class="sect1" title="Les alias Git">
<h2 id="s_git_aliases">Les alias Git</h2>
<p>
Avant de clore ce chapitre sur les bases de Git, il reste une astuce qui peut rendre votre apprentissage de Git plus simple, facile ou familier : les alias.
Nous n&#8217;y ferons pas référence ni ne les considèrerons utilisés dans la suite du livre, mais c&#8217;est un moyen de facilité qui mérite d&#8217;être connu.</p>
<p>Git ne complète pas votre commande si vous ne la tapez que partiellement.
Si vous ne voulez pas avoir à taper l&#8217;intégralité du texte de chaque commande, vous pouvez facilement définir un alias pour chaque commande en utilisant <code class="literal">git config</code>.
Voici quelques exemples qui pourraient vous intéresser :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global alias.co checkout
<span style="font-weight: bold">$</span> git config --global alias.br branch
<span style="font-weight: bold">$</span> git config --global alias.ci commit
<span style="font-weight: bold">$</span> git config --global alias.st status</code></pre>
</figure>
<p>Ceci signifie que, par exemple, au lieu de taper <code class="literal">git commit</code>, vous n&#8217;avez plus qu&#8217;à taper <code class="literal">git ci</code>.
Au fur et à mesure de votre utilisation de Git, vous utiliserez probablement d&#8217;autres commandes plus fréquemment.
Dans ce cas, n&#8217;hésitez pas à créer de nouveaux alias.</p>
<p>Cette technique peut aussi être utile pour créer des commandes qui vous manquent.
Par exemple, pour corriger le problème d&#8217;ergonomie que vous avez rencontré lors de la désindexation d&#8217;un fichier, vous pourriez créer un alias pour désindexer :</p>
<figure class="listing">
<pre class="screen"><code>$ git config --global alias.unstage 'reset HEAD --'</code></pre>
</figure>
<p>Cela rend les deux commandes suivantes équivalentes :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git unstage fileA
<span style="font-weight: bold">$</span> git reset HEAD fileA</code></pre>
</figure>
<p>Cela rend les choses plus claires.
Il est aussi commun d&#8217;ajouter un alias <code class="literal">last</code>, de la manière suivante :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global alias.last <span style="font-style: italic">&#39;log -1 HEAD&#39;</span></code></pre>
</figure>
<p>Ainsi, vous pouvez visualiser plus facilement le dernier <em>commit</em> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel &lt;dreamer3@example.com&gt;
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon &lt;schacon@example.com&gt;</code></pre>
</figure>
<p>Pour explication, Git remplace simplement la nouvelle commande par tout ce que vous lui aurez demandé d&#8217;aliaser.
Si par contre vous souhaitez lancer une commande externe plutôt qu&#8217;une sous-commande Git, vous pouvez commencer votre commande par un caractère <code class="literal">!</code>.
C&#8217;est utile si vous écrivez vos propres outils pour travailler dans un dépôt Git.
On peut par exemple aliaser <code class="literal">git visual</code> pour lancer <code class="literal">gitk</code> :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span><span style="font-weight: bold">$</span> git config --global alias.visual <span style="font-style: italic">&quot;!gitk&quot;</span></code></pre>
</figure>
</section>
<section class="sect1" title="Résumé">
<h2 id="_résumé">Résumé</h2>
<p>À présent, vous pouvez réaliser toutes les opérations locales de base de Git — créer et cloner un dépôt, faire des modifications, les indexer et les valider, visualiser l&#8217;historique de ces modifications.
Au prochain chapitre, nous traiterons de la fonctionnalité unique de Git : son modèle de branches.</p>
</section>
</section>
</body>
</html>