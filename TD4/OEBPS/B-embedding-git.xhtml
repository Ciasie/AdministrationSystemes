<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="fr" lang="fr">
<head>
<meta charset="UTF-8"/>
<title>Embarquer Git dans vos applications</title>
<link rel="stylesheet" type="text/css" href="styles/epub3.css"/>
<link rel="stylesheet" type="text/css" href="styles/epub3-css3-only.css" media="(min-device-width: 0px)"/>
<script type="text/javascript">
document.addEventListener('DOMContentLoaded', function(event, reader) {
  if (!(reader = navigator.epubReadingSystem)) {
    if (navigator.userAgent.indexOf(' calibre/') >= 0) reader = { name: 'calibre-desktop' };
    else if (window.parent == window || !(reader = window.parent.navigator.epubReadingSystem)) return;
  }
  document.body.setAttribute('class', reader.name.toLowerCase().replace(/ /g, '-'));
});
</script>
</head>
<body>
<section class="chapter" title="Embarquer Git dans vos applications" epub:type="chapter" id="B-embedding-git">
<header>
<div class="chapter-header">
<h1 class="chapter-title"><small class="subtitle"><b>Embarquer</b> <b>Git</b> <b>dans</b> <b>vos</b> <b>applications</b></small></h1>
</div>
</header>
<p>Si votre application est destinée aux développeurs, il y a de grandes chances qu&#8217;elle bénéficierait de l&#8217;intégration avec une gestion de source.
Même des applications pour non-développeurs, tels que les éditeurs de document, pourraient potentiellement bénéficier d&#8217;une fonctionnalité de gestion de version et le modèle de Git fonctionne très bien dans de nombreux scénarios.</p>
<p>Si vous devez intégrer Git avec votre application, vous avez essentiellement trois choix : démarrer une invite et utiliser la ligne de commande Git, Libgit2 et JGit.</p>
<section class="sect1" title="Git en ligne de commande">
<h2 id="_git_en_ligne_de_commande">Git en ligne de commande</h2>
<p>Une possibilité consiste à démarrer un processus d&#8217;invite de commande et à utiliser la ligne de commande Git pour agir.
Cette méthode a le bénéfice d&#8217;être canonique et toutes les fonctionnalités de Git sont supportées.
Cela s&#8217;avère aussi assez facile, du fait que la plupart des environnements d’exécution disposent d&#8217;une interface relativement simple permettant d&#8217;invoquer un processus avec des arguments en ligne de commande.
Cependant, cette approche a quelques inconvénients.</p>
<p>L&#8217;un est que toutes les sorties sont en pur texte.
Cela signifie que vous aurez à analyser le format de sortie de Git qui peut occasionnellement changer pour lire l&#8217;information d&#8217;avancée et de résultat, ce qui peut être inefficace et introduire des erreurs.</p>
<p>Un autre est l&#8217;absence de récupération sur erreur.
Si le dépôt est corrompu d&#8217;une manière quelconque ou si l&#8217;utilisateur a une valeur de configuration malformée, Git va simplement refuser d&#8217;opérer beaucoup d&#8217;opérations.</p>
<p>Un autre encore est la gestion de processus.
Git vous oblige à maintenir un environnement de ligne de commande dans un processus séparé, ce qui peut ajouter une complexité indésirable.
Essayer de coordonner un certain nombre de tels processus est un problème épineux (spécialement quand on accède au même dépôt depuis plusieurs processus).</p>
</section>
<section class="sect1" title="Libgit2">
<h2 id="_libgit2">Libgit2</h2>
<p>
Une autre option à votre disposition consiste à utiliser Libgit2.
Libgit2 est une mise en œuvre de Git sans dépendance externe, qui se focalise sur une interface de programmation agréable à utiliser depuis d&#8217;autres programmes.
Vous pouvez la trouver sur <a href="http://libgit2.github.com" class="link">http://libgit2.github.com</a>.</p>
<p>Voyons d&#8217;abord à quoi ressemble l&#8217;API C.
En voici un tour rapide :</p>
<figure class="listing">
<pre class="source language-c"><code><span></span><span style="font-style: italic">// Ouvrir un depot</span>
git_repository *repo;
<span style="font-weight: bold">int</span> error = git_repository_open(&amp;repo, <span style="font-style: italic">&quot;/path/to/repository&quot;</span>);

<span style="font-style: italic">// Dereferencer HEAD vers un commit</span>
git_object *head_commit;
error = git_revparse_single(&amp;head_commit, repo, <span style="font-style: italic">&quot;HEAD^{commit}&quot;</span>);
git_commit *commit = (git_commit*)head_commit;

<span style="font-style: italic">// afficher quelques proprietes du commit</span>
printf(<span style="font-style: italic">&quot;%s&quot;</span>, git_commit_message(commit));
<span style="font-weight: bold">const</span> git_signature *author = git_commit_author(commit);
printf(<span style="font-style: italic">&quot;%s &lt;%s&gt;</span><span style="font-weight: bold; font-style: italic">\n</span><span style="font-style: italic">&quot;</span>, author-&gt;name, author-&gt;email);
<span style="font-weight: bold">const</span> git_oid *tree_id = git_commit_tree_id(commit);

<span style="font-style: italic">// Nettoyer</span>
git_commit_free(commit);
git_repository_free(repo);</code></pre>
</figure>
<p>Les deux premières lignes ouvrent un dépôt Git.
Le type <code class="literal">git_repository</code> représente un identificateur de dépôt avec un cache en mémoire.
C&#8217;est la méthode la plus simple, quand vous connaissez le chemin exact vers le répertoire de travail ou le répertoire <code class="literal">.git</code> d&#8217;un dépôt.
Il y a aussi <code class="literal">git_repository_open_ext</code> qui inclut des options pour chercher, <code class="literal">git_clone</code> et ses déclinaisons pour créer un clone local d&#8217;un dépôt distant et <code class="literal">git_repository_init</code> pour créer un dépôt entièrement nouveau.</p>
<p>Le second bloc de code utilise la syntaxe « rev-parse » (voir <a id="xref--ch07-git-tools--s_branch_references" href="ch07-git-tools.xhtml#s_branch_references" class="xref">Références de branches</a> pour plus de détails) pour obtenir le <em>commit</em> sur lequel HEAD peut pointer.
Le type retourné est un pointeur sur <code class="literal">git_object</code> qui représente quelque chose qui existe dans la base de données des objets de Git pour un dépôt.
<code class="literal">git_object</code> est en fait une type « parent » pour différentes sortes d&#8217;objets ; l&#8217;agencement en mémoire de chacun de ces types « enfants » est identique à celui de <code class="literal">git_object</code>, donc on peut forcer la conversion vers le type désiré en toute sécurité.
Dans notre cas, <code class="literal">git_object_type(commit)</code> retournerait <code class="literal">GIT_OBJ_COMMIT</code>, il est donc permis de le convertir en un pointeur de <code class="literal">git_commit</code>.</p>
<p>Le bloc suivant montre comment accéder aux propriétés d&#8217;un <em>commit</em>.
La dernière ligne utilise un type <code class="literal">git_oid</code> ; c&#8217;est la représentation d&#8217;une empreinte SHA-1 dans Libgit2.</p>
<p>De cet exemple, une structure générale commence à émerger :</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">Si vous déclarez un pointeur et que vous en passez une référence dans un appel à Libgit2, cet appel renverra vraisemblablement un code de retour entier.
Une valeur <code class="literal">0</code> indique un succès ; toute valeur négative est une erreur.</span>
</li>
<li>
<span class="principal">Si Libgit2 peuple un pointeur pour vous, vous êtes responsable de sa libération.</span>
</li>
<li>
<span class="principal">Si Libgit2 retourne un pointeur <code class="literal">const</code> après un appel, vous n&#8217;avez pas besoin de le libérer mais il deviendra invalide quand l&#8217;objet qui le possède sera lui-même libéré.</span>
</li>
<li>
<span class="principal">Écrire en C est un exercice plutôt douloureux.</span>
</li>
</ul>
</div>
<p>
Cette dernière remarque signifie qu&#8217;il est fort peu probable que vous écrirez du C pour utiliser Libgit2.
Heureusement, il existe un certain nombre de liaisons vers d&#8217;autres langages qui rendent plus facile l&#8217;interaction avec des dépôts Git depuis votre environnement et votre langage spécifiques.
Voyons l&#8217;exemple ci-dessus réécrit en utilisant le portage Ruby de Libgit2, appelé Rugged et qui peut être trouvé sur <a href="https://github.com/libgit2/rugged" class="link">https://github.com/libgit2/rugged</a>.</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>repo = Rugged::Repository.new(<span style="font-style: italic">&#39;path/to/repository&#39;</span>)
commit = repo.head.target
puts commit.message
puts <span style="font-style: italic">&quot;</span><span style="font-weight: bold; font-style: italic">#{</span>commit.author[<span style="font-style: italic">:name</span>]<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic"> &lt;</span><span style="font-weight: bold; font-style: italic">#{</span>commit.author[<span style="font-style: italic">:email</span>]<span style="font-weight: bold; font-style: italic">}</span><span style="font-style: italic">&gt;&quot;</span>
tree = commit.tree</code></pre>
</figure>
<p>Tout de suite, le code est moins verbeux.
Déjà, Rugged utilise des exceptions ; il peut lever <code class="literal">ConfigError</code> ou <code class="literal">ObjectE</code> pour signaler des conditions d&#8217;erreur.
Ensuite, il n&#8217;y a pas de libération explicite des ressources, puisque Ruby utilise un ramasse-miettes.
Voyons un exemple légèrement plus compliqué : créer un <em>commit</em> à partir de rien.</p>
<figure class="listing">
<pre class="source language-ruby"><code><span></span>blob_id = repo.write(<span style="font-style: italic">&quot;Blob contents&quot;</span>, <span style="font-style: italic">:blob</span>) <i class="conum" data-value="1">①</i>

index = repo.index
index.read_tree(repo.head.target.tree)
index.add(<span style="font-style: italic">:path</span> =&gt; <span style="font-style: italic">&#39;newfile.txt&#39;</span>, <span style="font-style: italic">:oid</span> =&gt; blob_id) <i class="conum" data-value="2">②</i>

sig = {
    <span style="font-style: italic">:email</span> =&gt; <span style="font-style: italic">&quot;bob@example.com&quot;</span>,
    <span style="font-style: italic">:name</span> =&gt; <span style="font-style: italic">&quot;Bob User&quot;</span>,
    <span style="font-style: italic">:time</span> =&gt; Time.now,
}

commit_id = Rugged::Commit.create(repo,
    <span style="font-style: italic">:tree</span> =&gt; index.write_tree(repo), <i class="conum" data-value="3">③</i>
    <span style="font-style: italic">:author</span> =&gt; sig,
    <span style="font-style: italic">:committer</span> =&gt; sig, <i class="conum" data-value="4">④</i>
    <span style="font-style: italic">:message</span> =&gt; <span style="font-style: italic">&quot;Add newfile.txt&quot;</span>, <i class="conum" data-value="5">⑤</i>
    <span style="font-style: italic">:parents</span> =&gt; repo.empty? ? [] : [ repo.head.target ].compact, <i class="conum" data-value="6">⑥</i>
    <span style="font-style: italic">:update_ref</span> =&gt; <span style="font-style: italic">&#39;HEAD&#39;</span>, <i class="conum" data-value="7">⑦</i>
)
commit = repo.lookup(commit_id) <i class="conum" data-value="8">⑧</i></code></pre>
</figure>
<div class="callout-list">
<ol>
<li><i class="conum" data-value="1">①</i> Créer un nouveau blob qui contient le contenu d&#8217;un nouveau fichier.</li>
<li><i class="conum" data-value="2">②</i> Peupler l&#8217;index avec l&#8217;arbre du <em>commit</em> HEAD et ajouter le nouveau fichier sous le chemin <code class="literal">newfile.txt</code>.</li>
<li><i class="conum" data-value="3">③</i> Ceci crée un nouvel arbre dans la base de données des objets et l&#8217;utilise pour le nouveau <em>commit</em>.</li>
<li><i class="conum" data-value="4">④</i> Nous utilisons la même signature pour l&#8217;auteur et le validateur.</li>
<li><i class="conum" data-value="5">⑤</i> Le message de validation.</li>
<li><i class="conum" data-value="6">⑥</i> À la création d&#8217;un <em>commit</em>, il faut spécifier les parents du nouveau <em>commit</em>.
on utilise le sommet de HEAD comme parent unique.</li>
<li><i class="conum" data-value="7">⑦</i> Rugged (et Libgit2) peuvent en option mettre à jour la référence lors de la création du <em>commit</em>.</li>
<li><i class="conum" data-value="8">⑧</i> La valeur retournée est une empreinte SHA-1 du nouvel objet <em>commit</em> que vous pouvez alors utiliser pour obtenir un objet <code class="literal">Commit</code>.</li>
</ol>
</div>
<p>Le code Ruby est joli et propre, mais comme Libgit2 réalise le gros du travail, il tourne aussi plutôt rapidement.
Si vous n&#8217;êtes pas rubyiste, nous aborderons d&#8217;autres portages dans <a id="xref-s_libgit2_bindings" href="#s_libgit2_bindings" class="xref">Autres liaisons</a>.</p>
<section class="sect2" title="Fonctionnalité avancée">
<h3 id="_fonctionnalité_avancée">Fonctionnalité avancée</h3>
<p>Libgit2 a certaines capacités qui ne sont pas disponibles dans Git natif.
Un exemple est la possibilité de greffons : Libgit2 vous permet de fournir des services « d&#8217;arrière-plan » pour différents types d&#8217;opérations, pour vous permettre de stocker les choses d&#8217;une manière différente de Git.
Libgit2 autorise des services d&#8217;arrière-plan pour la configuration, le stockage des références et la base de données d&#8217;objets, entre autres.</p>
<p>Voyons comment cela fonctionne.
Le code ci-dessous est emprunté à un ensemble d&#8217;exemples de services fourni par l&#8217;équipe Libgit2 (qui peut être trouvé sur <a href="https://github.com/libgit2/libgit2-backends" class="link">https://github.com/libgit2/libgit2-backends</a>).
Voici comment un service d&#8217;arrière-plan pour une base de données d&#8217;objets peut être créée :</p>
<figure class="listing">
<pre class="source language-c"><code><span></span>git_odb *odb;
<span style="font-weight: bold">int</span> error = git_odb_new(&amp;odb); <i class="conum" data-value="1">①</i>

git_odb_backend *my_backend;
error = git_odb_backend_mine(&amp;my_backend, <span style="font-style: italic">/*…*/</span>); <i class="conum" data-value="2">②</i>

error = git_odb_add_backend(odb, my_backend, 1); <i class="conum" data-value="3">③</i>

git_repository *repo;
error = git_repository_open(&amp;repo, <span style="font-style: italic">&quot;some-path&quot;</span>);
error = git_repository_set_odb(odb); <i class="conum" data-value="4">④</i></code></pre>
</figure>
<p><em>(Notez que les erreurs sont capturées, mais ne sont pas gérées. Nous espérons que votre code est meilleur que le nôtre).</em></p>
<div class="callout-list">
<ol>
<li><i class="conum" data-value="1">①</i> Initialise une enveloppe d&#8217;interface d&#8217;une base de données d&#8217;objets vide (ODB) qui agit comme un conteneur pour les tâches de fond qui feront le vrai travail.</li>
<li><i class="conum" data-value="2">②</i> Initialise une tâche de fond ODB.</li>
<li><i class="conum" data-value="3">③</i> Ajoute la tâche de fond dans l&#8217;enveloppe.</li>
<li><i class="conum" data-value="4">④</i> Ouvre le dépôt et le paramètre pour utiliser notre ODB pour rechercher les objets.</li>
</ol>
</div>
<p>Mais qu&#8217;est-ce que ce <code class="literal">git_odb_backend_mine</code> ?
Hé bien, c&#8217;est le constructeur de notre propre réalisation de l&#8217;ODB et nous pouvons la faire comme nous voulons tant que la structure <code class="literal">git_odb_backend</code> est correctement renseignée.
Voici à quoi elle <em>pourrait</em> ressembler :</p>
<figure class="listing">
<pre class="source language-c"><code><span></span><span style="font-weight: bold">typedef</span> <span style="font-weight: bold">struct</span> {
    git_odb_backend parent;

    <span style="font-style: italic">// Some other stuff</span>
    <span style="font-weight: bold">void</span> *custom_context;
} my_backend_struct;

<span style="font-weight: bold">int</span> git_odb_backend_mine(git_odb_backend **backend_out, <span style="font-style: italic">/*…*/</span>)
{
    my_backend_struct *backend;

    backend = calloc(1, <span style="font-weight: bold">sizeof</span> (my_backend_struct));

    backend-&gt;custom_context = <span style="border: 1px solid #FF0000">…</span>;

    backend-&gt;parent.read = &amp;my_backend__read;
    backend-&gt;parent.read_prefix = &amp;my_backend__read_prefix;
    backend-&gt;parent.read_header = &amp;my_backend__read_header;
    <span style="font-style: italic">// …</span>

    *backend_out = (git_odb_backend *) backend;

    <span style="font-weight: bold">return</span> GIT_SUCCESS;
}</code></pre>
</figure>
<p>La contrainte la plus subtile ici est que le premier membre de <code class="literal">my_backend_structure</code> doit être une structure <code class="literal">git_odb_backend</code> ; cela assure que la disposition en mémoire correspond à ce qu&#8217;attend le code de Libgit2.
Le reste est totalement arbitraire ; cette structure peut être aussi grande ou petite que nécessaire.</p>
<p>La fonction d&#8217;initialisation alloue de la mémoire pour la structure, initialise le contexte spécifique, puis remplit les membres de la structure <code class="literal">parent</code> qu&#8217;elle supporte.
Référez-vous au fichier <code class="literal">include/git2/sys/odb_backend.h</code> dans les sources de Libgit2 pour l&#8217;intégralité des signatures d&#8217;appels ; votre cas d&#8217;utilisation particulier vous permettra de déterminer lesquelles vous souhaitez supporter.</p>
</section>
<section class="sect2" title="Autres liaisons">
<h3 id="s_libgit2_bindings">Autres liaisons</h3>
<p>Libgit2 dispose de liaisons vers de nombreux langages.
Nous allons montrer ici un petit exemple en utilisant quelques-unes des liaisons les plus abouties au moment de la rédaction de ce livre ; des bibliothèques existent pour de nombreux autres langages qui incluent C++, Go, Node.js, Erlang et la JVM à différents stades de maturité.
La collection officielle de liaisons peut être trouvée en parcourant les dépôts sur <a href="https://github.com/libgit2" class="link">https://github.com/libgit2</a>.</p>
<p>Le code que nous allons écrire retournera le message de validation du <em>commit</em> finalement pointé par HEAD (<code class="literal">git log -1</code> en quelque sorte).</p>
<section class="sect3" title="LibGit2Sharp">
<h4 id="_libgit2sharp">LibGit2Sharp</h4>
<p>
Si vous écrivez une application .NET ou Mono, LigGit2Sharp (<a href="https://github.com/libgit2/libgit2sharp" class="link">https://github.com/libgit2/libgit2sharp</a>) est tout ce que vous cherchez.
Les liaisons sont écrites en C# et une grande attention a été portée à envelopper les appels directs à Libgit2 avec une interface de programmation naturelle en C#.
Voici à quoi notre programme d&#8217;exemple ressemble :</p>
<figure class="listing">
<pre class="source language-csharp"><code><span></span><span style="font-weight: bold">new</span> Repository(<span style="font-style: italic">@&quot;C:\path\to\repo&quot;</span>).Head.Tip.Message;</code></pre>
</figure>
<p>Pour les applications graphiques Windows, il existe même un paquet NuGet qui vous permettra de démarrer vos développements rapidement.</p>
</section>
<section class="sect3" title="objective-git">
<h4 id="_objective_git">objective-git</h4>
<p>
Si votre application tourne sur une plateforme Apple, vous avez de grandes chances d&#8217;utiliser Objective-C comme langage de programmation.
Objective-Git (<a href="https://github.com/libgit2/objective-git" class="link">https://github.com/libgit2/objective-git</a>) est le nom de la liaison de Libgit2 pour cet environnement.</p>
<p>Le programme d&#8217;exemple ressemble à ceci :</p>
<figure class="listing">
<pre class="source language-objc"><code><span></span>GTRepository *repo =
    [[GTRepository alloc] initWithURL:[NSURL fileURLWithPath: <span style="font-style: italic">@&quot;/path/to/repo&quot;</span>] error:NULL];
NSString *msg = [[[repo headReferenceWithError:NULL] resolvedTarget] message];</code></pre>
</figure>
<p>Objective-git est totalement interopérable avec Swift, donc n&#8217;ayez crainte si vous avez abandonné Objective-C.</p>
</section>
<section class="sect3" title="pygit2">
<h4 id="_pygit2">pygit2</h4>
<p>
La liaison avec Libgit2 en Python s&#8217;appelle Pygit2 et elle peut être trouvée sur <a href="http://www.pygit2.org/" class="link">http://www.pygit2.org/</a>.
Notre programme d&#8217;exemple :</p>
<figure class="listing">
<pre class="source language-python"><code><span></span>pygit2.Repository(<span style="font-style: italic">&quot;/chemin/du/depot&quot;</span>) <span style="font-style: italic"># ouvre le depot</span>
    .head                             <span style="font-style: italic"># recupere la branche en cours</span>
    .peel(pygit2.Commit)              <span style="font-style: italic"># descend au commit</span>
    .message                          <span style="font-style: italic"># lit le message</span></code></pre>
</figure>
</section>
</section>
<section class="sect2" title="Pour aller plus loin">
<h3 id="_pour_aller_plus_loin">Pour aller plus loin</h3>
<p>Bien sûr, un traitement complet des capacités de Libgit2 est hors du cadre de ce livre.
Si vous souhaitez plus d&#8217;information sur Libgit2 elle-même, la documentation de programmation se trouve sur <a href="https://libgit2.github.com/libgit2" class="link">https://libgit2.github.com/libgit2</a> et un ensemble de guides sur <a href="https://libgit2.github.com/docs" class="link">https://libgit2.github.com/docs</a>.
Pour les autres liaisons, cherchez dans le README et dans les tests ; il y a souvent des petits didacticiels et des pointeurs sur d&#8217;autres documents.</p>
</section>
</section>
<section class="sect1" title="JGit">
<h2 id="_jgit">JGit</h2>
<p>
Si vous voulez utiliser Git depuis un programme Java, il existe une bibliothèque complète appelée JGit.
JGit est une réalisation relativement complète de Git écrite nativement en Java etelle est largement utilisée dans la communauté Java.
Le projet JGit est développé sous l&#8217;égide d&#8217;Eclipse et son site se trouve sur <a href="http://www.eclipse.org/jgit" class="link">http://www.eclipse.org/jgit</a>.</p>
<section class="sect2" title="Mise en place">
<h3 id="_mise_en_place">Mise en place</h3>
<p>Il y a différents moyens de connecter votre projet à JGit et de commencer à l&#8217;utiliser dans votre code.
La manière probablement la plus facile consiste à utiliser Maven – on réalise l&#8217;intégration en ajoutant la section suivante sous la balise <code class="literal">&lt;dependencies&gt;</code> de votre fichier pom.xml :</p>
<figure class="listing">
<pre class="source language-xml"><code><span></span><span style="font-weight: bold">&lt;dependency&gt;</span>
    <span style="font-weight: bold">&lt;groupId&gt;</span>org.eclipse.jgit<span style="font-weight: bold">&lt;/groupId&gt;</span>
    <span style="font-weight: bold">&lt;artifactId&gt;</span>org.eclipse.jgit<span style="font-weight: bold">&lt;/artifactId&gt;</span>
    <span style="font-weight: bold">&lt;version&gt;</span>3.5.0.201409260305-r<span style="font-weight: bold">&lt;/version&gt;</span>
<span style="font-weight: bold">&lt;/dependency&gt;</span></code></pre>
</figure>
<p>La <code class="literal">version</code> aura très certainement évolué lorsque vous lirez ces lignes ; vérifiez <a href="http://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit" class="link">http://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit</a> pour une information de version mise à jour.
Une fois cette étape accomplie, Maven va automatiquement récupérer et utiliser les bibliothèques JGit dont vous aurez besoin.</p>
<p>Si vous préférez gérer les dépendances binaires par vous-même, des binaires JGit pré-construits sont disponibles sur <a href="http://www.eclipse.org/jgit/download" class="link">http://www.eclipse.org/jgit/download</a>.
Vous pouvez les inclure dans votre projet en lançant une commande telle que :</p>
<figure class="listing">
<pre class="source language-console"><code><span></span>javac -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App.java
java -cp .:org.eclipse.jgit-3.5.0.201409260305-r.jar App</code></pre>
</figure>
</section>
<section class="sect2" title="Plomberie">
<h3 id="_plomberie">Plomberie</h3>
<p>JGit propose deux niveaux généraux d&#8217;interfaçage logiciel : plomberie et porcelaine.
La terminologie de ces niveaux est directement calquée sur celle de Git lui-même et JGit est partitionné globalement de la même manière : les APIs de porcelaine sont une interface de haut niveau pour des interactions de niveau utilisateur (le genre de choses qu&#8217;un utilisateur normal ferait en utilisant la ligne de commande), tandis que les APIs de plomberie permettent d&#8217;interagir directement avec les objets de bas niveau du dépôt.</p>
<p>Le point de départ pour la plupart des sessions JGit est la classe <code class="literal">Repository</code> et la première action consiste à créer une instance de celle-ci.
Pour un dépôt basé sur un système de fichier (hé oui, JGit permet d&#8217;autre modèles de stockage), cela passe par l&#8217;utilisation d&#8217;un <code class="literal">FileRepositoryBuilder</code> :</p>
<figure class="listing">
<pre class="source language-java"><code><span></span><span style="font-style: italic">// Creer un nouveau depot</span>
Repository newlyCreatedRepo = FileRepositoryBuilder.create(
    <span style="font-weight: bold">new</span> File(<span style="font-style: italic">&quot;/tmp/new_repo/.git&quot;</span>));
newlyCreatedRepo.create();

<span style="font-style: italic">// Ouvrir un depot existant</span>
Repository existingRepo = <span style="font-weight: bold">new</span> FileRepositoryBuilder()
    .setGitDir(<span style="font-weight: bold">new</span> File(<span style="font-style: italic">&quot;my_repo/.git&quot;</span>))
    .build();</code></pre>
</figure>
<p>Le constructeur contient une API souple qui fournit tout ce dont il a besoin pour trouver un dépôt Git, que votre programme sache ou ne sache pas exactement où il est situé.
Il peut utiliser des variables d’environnement (<code class="literal">.readEnvironment()</code>), démarrer depuis le répertoire de travail et chercher (<code class="literal">setWorkTree(…).findGitDir()</code>) ou juste ouvrir un répertoire <code class="literal">.git</code> connu, comme ci-dessus.</p>
<p>Une fois muni d&#8217;une instance de <code class="literal">Repository</code>, vous pouvez faire toutes sortes de choses avec.
En voici un échantillon rapide :</p>
<figure class="listing">
<pre class="source language-java"><code><span></span><span style="font-style: italic">// acceder a une reference</span>
Ref master = repo.getRef(<span style="font-style: italic">&quot;master&quot;</span>);

<span style="font-style: italic">// acceder a l&#39;objet pointe par une reference</span>
ObjectId masterTip = master.getObjectId();

<span style="font-style: italic">// Rev-parse</span>
ObjectId obj = repo.resolve(<span style="font-style: italic">&quot;HEAD^{tree}&quot;</span>);

<span style="font-style: italic">// Charger le contenu brut d&#39;un objet</span>
ObjectLoader loader = repo.open(masterTip);
loader.copyTo(System.out);

<span style="font-style: italic">// Creer une branche</span>
RefUpdate createBranch1 = repo.updateRef(<span style="font-style: italic">&quot;refs/heads/branch1&quot;</span>);
createBranch1.setNewObjectId(masterTip);
createBranch1.update();

<span style="font-style: italic">// Delete a branch</span>
RefUpdate deleteBranch1 = repo.updateRef(<span style="font-style: italic">&quot;refs/heads/branch1&quot;</span>);
deleteBranch1.setForceUpdate(<span style="font-weight: bold">true</span>);
deleteBranch1.delete();

<span style="font-style: italic">// Config</span>
Config cfg = repo.getConfig();
String name = cfg.getString(<span style="font-style: italic">&quot;user&quot;</span>, <span style="font-weight: bold">null</span>, <span style="font-style: italic">&quot;name&quot;</span>);</code></pre>
</figure>
<p>Il y a pas mal de choses mises en œuvre ici, donc nous allons détailler chaque section.</p>
<p>La première ligne récupère un pointeur sur la référence <code class="literal">master</code>.
JGit récupère automatiquement la référence master <em>réelle</em> qui se situe dans <code class="literal">refs/heads/master</code> et retourne un objet qui vous permet de récupérer des informations sur cette référence.
Vous pouvez récupérer le nom (<code class="literal">.getName()</code>) ou bien l&#8217;objet cible de la référence directe (<code class="literal">.getObjectId()</code>), ou encore la référence pointée par une référence symbolique (<code class="literal">.getTarget()</code>).
Les objets de référence sont aussi utilisés pour représenter les références d&#8217;étiquette ou des objets, donc vous pouvez demander si l&#8217;étiquette est « pelée », ce qui signifie qu&#8217;elle pointe sur une cible finale d&#8217;une série (potentiellement longue) d&#8217;objets étiquettes.</p>
<p>La seconde ligne donne la cible de la référence <code class="literal">master</code> qui est retournée comme une instance d&#8217;ObjectId.
ObjectId représente l&#8217;empreinte SHA-1 d&#8217;un objet qui peut exister ou non dans la base de données des objets de Git.
La troisième ligne est similaire, mais elle montre comment JGit gère la syntaxe « rev-parse » (pour plus d&#8217;information, voir <a href="ch07-git-tools.xhtml#s_branch_references" class="xref">Références de branches</a>).
Vous pouvez passer n&#8217;importe quel spécificateur d&#8217;objet que Git comprend et JGit retournera un ObjectId valide ou bien <code class="literal">null</code>.</p>
<p>Les deux lignes suivantes montrent comment charger le contenu brut d&#8217;un objet.
Dans cet exemple, nous appelons <code class="literal">ObjectLoader.copyTo()</code> pour rediriger le contenu de l&#8217;objet directement sur la sortie standard, mais <code class="literal">ObjectLoader</code> dispose aussi de méthodes pour lire le type et la taille d&#8217;un objet et le retourner dans un tableau d&#8217;octets.
Pour les gros objets (pour lesquels <code class="literal">.isLarge()</code> renvoie <code class="literal">true</code>), vous pouvez appeler <code class="literal">.openStream()</code> pour récupérer un objet similaire à InputStream qui peut lire l&#8217;objet brut sans le tirer intégralement en mémoire vive.</p>
<p>Les quelques lignes suivantes montrent ce qui est nécessaire pour créer une nouvelle branche.
Nous créons une instance de RefUpdate, configurons quelques paramètres et appelons <code class="literal">.update()</code> pour déclencher la modification.
Le code pour effacer cette branche suit juste après.
Notez que <code class="literal">.setForceUpdate(true)</code> est nécessaire pour que cela fonctionne ; sinon l&#8217;appel à <code class="literal">.delete()</code> retourne <code class="literal">REJECTED</code> et il ne se passera rien.</p>
<p>Le dernier exemple montre comment récupérer la valeur <code class="literal">user.name</code> depuis les fichiers de configuration de Git.
Cette instance de Config utilise le dépôt que nous avons ouvert plus tôt pour la configuration locale, mais détectera automatiquement les fichiers de configuration globale et système et y lira aussi les valeurs.</p>
<p>Ceci n&#8217;est qu&#8217;un petit échantillon de toute l&#8217;API de plomberie ; il existe beaucoup d&#8217;autre méthodes et classes.
Ici, nous ne montrons pas non plus comment JGit gère les erreurs, au moyen d&#8217;exceptions.
Les APIs JGit lancent quelques fois des exceptions Java standard (telles que <code class="literal">IOException</code>), mais il existe aussi une liste de types d&#8217;exception spécifiques à JGit (tels que <code class="literal">NoRemoteRepositoryException</code>, <code class="literal">CorruptObjectException</code> et <code class="literal">NoMergeBaseException</code>).</p>
</section>
<section class="sect2" title="Porcelaine">
<h3 id="_porcelaine">Porcelaine</h3>
<p>Les APIs de plomberie sont plutôt complètes, mais il peut s&#8217;avérer lourd de les enchaîner pour des activités fréquentes, telles que l&#8217;ajout de fichier à l&#8217;index ou la validation.
JGit fournit un ensemble de plus haut niveau d&#8217;APIs pour simplifier celles-ci et le point d&#8217;entrée pour ces APIs est la classe <code class="literal">Git</code> :</p>
<figure class="listing">
<pre class="source language-java"><code><span></span>Repository repo;
<span style="font-style: italic">// construit le depot...</span>
Git git = <span style="font-weight: bold">new</span> Git(repo);</code></pre>
</figure>
<p>La classe Git propose un joli ensemble de méthodes de haut niveau de style <code class="literal">builder</code> qui peuvent être utilisées pour construire des comportements assez complexes.
Voyons un exemple, tel que recréer quelque chose comme <code class="literal">git ls-remote</code> :</p>
<figure class="listing">
<pre class="source language-java"><code><span></span>CredentialsProvider cp = <span style="font-weight: bold">new</span> UsernamePasswordCredentialsProvider(<span style="font-style: italic">&quot;username&quot;</span>, <span style="font-style: italic">&quot;p4ssw0rd&quot;</span>);
Collection&lt;Ref&gt; remoteRefs = git.lsRemote()
    .setCredentialsProvider(cp)
    .setRemote(<span style="font-style: italic">&quot;origin&quot;</span>)
    .setTags(<span style="font-weight: bold">true</span>)
    .setHeads(<span style="font-weight: bold">false</span>)
    .call();
<span style="font-weight: bold">for</span> (Ref ref : remoteRefs) {
    System.out.println(ref.getName() + <span style="font-style: italic">&quot; -&gt; &quot;</span> + ref.getObjectId().name());
}</code></pre>
</figure>
<p>C&#8217;est la structure habituelle avec la classe Git ; les méthodes renvoient un objet commande qui permet d&#8217;enchaîner les appels de paramétrage qui sont finalement exécutés par l&#8217;appel à <code class="literal">.call()</code>.
Dans notre cas, nous interrogeons le dépôt distant <code class="literal">origin</code> sur ses étiquettes, et non sur ses sommets de branches.
Notez aussi l&#8217;utilisation d&#8217;un objet <code class="literal">CredentialsProvider</code> pour l&#8217;authentification.</p>
<p>De nombreuses autres commandes sont disponibles au travers de la classe Git, dont entre autres <code class="literal">add</code>, <code class="literal">blame</code>, <code class="literal">commit</code>, <code class="literal">clean</code>, <code class="literal">push</code>, <code class="literal">rebase</code>, <code class="literal">revert</code> et <code class="literal">reset</code>.</p>
</section>
<section class="sect2" title="Pour aller plus loin">
<h3 id="_pour_aller_plus_loin_2">Pour aller plus loin</h3>
<p>Tout ceci n&#8217;est qu&#8217;un mince échantillon de toutes les capacités de JGit.
Si vous êtes intéressé et souhaitez en savoir plus, voici des liens vers plus d&#8217;information et d&#8217;inspiration :</p>
<div class="itemized-list">
<ul>
<li>
<span class="principal">La documentation officielle de l&#8217;API JGit est disponible sur <a href="http://download.eclipse.org/jgit/docs/latest/apidocs" class="link">http://download.eclipse.org/jgit/docs/latest/apidocs</a>.
Il existe des Javadoc standard, donc votre EDI JVM favori sera aussi capable de les installer localement.</span>
</li>
<li>
<span class="principal">Le livre de recettes JGit <a href="https://github.com/centic9/jgit-cookbook" class="link">https://github.com/centic9/jgit-cookbook</a> contient de nombreux exemples de réalisation de différentes tâches avec JGit.</span>
</li>
<li>
<span class="principal">Il existe quelques bonnes ressources énumérées sur <a href="http://stackoverflow.com/questions/6861881" class="link">http://stackoverflow.com/questions/6861881</a>.</span>
</li>
</ul>
</div>
</section>
</section>
</section>
</body>
</html>